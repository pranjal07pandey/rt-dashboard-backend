<?php

namespace App\Http\Controllers;

use App\AssignedDocket;
use App\AssignedInvoice;
use App\Client;
use App\ClientRequest;
use App\Company;
use App\CompanySubscription;
use App\CompanyXero;
use App\DefaultRecipient;
use App\Docket;
use App\DocketAttachments;
use App\DocketConstantField;
use App\DocketDocument;
use App\DocketDraft;
use App\DocketExportMapping;
use App\DocketFieldFooter;
use App\DocketFieldGrid;
use App\DocketFieldGridLabel;
use App\DocketFieldGridValue;
use App\DocketFieldNumber;
use App\DocketFieldSignatureOption;
use App\DocketFieldDateOption;
use App\DocketFiledCategory;
use App\DocketFiledPreFiller;
use App\DocketFooter;
use App\DocketGridAutoPrefiller;
use App\DocketGridPrefiller;
use App\DocketInvoiceField;
use App\DocketLabel;
use App\DocketManualTimer;
use App\DocketManualTimerBreak;
use App\DocketPrefiller;
use App\DocketPrefillerValue;
use App\DocketPreviewField;
use App\DocketTallyableUnitRate;
use App\DocketTimesheet;
use App\DocketUnitRate;
use App\Email_Client;
use App\EmailSentDocket;
use App\EmailSentDocketRecipient;
use App\EmailSentDocketValue;
use App\EmailSentInvoice;
use App\EmailSnetDocketUnitRateValue;
use App\EmailUser;
use App\Employee;
use App\DocketField;
use App\ExportMapping;
use App\ExportMappingFieldCategory;
use App\FakeData;
use App\Folder;
use App\EmployeeLeave;
use App\GridFieldFormula;
use App\Helpers\Docket\SentDocketHelpers;
use App\Invoice;
use App\Invoice_Label;
use App\InvoiceField;
use App\InvoiceFieldCategory;
use App\InvoiceSetting;
use App\InvoiceXeroSetting;
use App\LinkGridPrefillerFilter;
use App\LinkPrefillerFilter;
use App\PrefillerEcowise;
use App\SentDcoketTimerAttachment;
use App\SentDocketLabel;
use App\SentDocketManualTimer;
use App\SentDocketRecipient;
use App\SentDocketRecipientApproval;
use App\SentDocketReject;
use App\SentDockets;
use App\SentDocketsValue;
use App\SentDocketUnitRateValue;
use App\SentDocValYesNoValue;
use App\SentEmailDocketLabel;
use App\SentInvoice;
use App\SentInvoiceLabel;
use App\SentInvoicePaymentDetail;
use App\Services\ClientService;
use App\Services\CompanyService;
use App\TemplateBank;
use App\TimerClient;
use App\UserNotification;
use App\XeroField;
use App\XeroInvoiceValue;
use App\YesNoDocketsField;
use App\YesNoFields;
use DebugBar\DebugBar;
use function GuzzleHttp\Promise\all;
use Illuminate\Pagination\LengthAwarePaginator as Paginator;
use Illuminate\Support\Facades\Cache;
use mysql_xdevapi\Exception;
use PDF;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use function PHPSTORM_META\type;
use Psy\Util\Str;
use Session;
use App\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Input;
use Illuminate\Support\Facades\Hash;
use App\SentInvoiceDescription;
use App\SentInvoiceValue;
use App\PaymentLog;
use SplTempFileObject;
use Stripe\Customer;
use Stripe\Plan;
use Stripe\Stripe;
use Stripe\Charge;
use Stripe\Subscription;
use Illuminate\Support\Facades\File;
use App\EmailSentInvoiceValue;
use App\EmailSentInvoiceDescription;
use App\EmailSentInvoicePaymentDetail;
use App\DocumentTheme;
use App\DocketFrequency;
use Illuminate\Pagination\LengthAwarePaginator;
use League\Csv\Reader;
use League\Csv\Writer;
use XeroPHP\Application\PrivateApplication;
use XeroPHP\Models\Accounting\Account;
use XeroPHP\Models\Accounting\TaxRate;
use Zipper;
use App\ThemePurchase;
use overint\MailgunValidator;
use App\Timer;
use App\EmailSentInvoiceLabel;
use App\Support\Collection;
use Illuminate\Support\Facades\Mail;
use App\Machine;
use App\AssignDocketUser;
use App\AssignDocketUserConnection;
use App\DocketDraftsAssign;
use App\Http\Requests\AssignTaskRequest;
use App\Helpers\V2\FunctionUtils;
use App\Helpers\V2\AmazoneBucket;

class CompanyDashboard extends Controller
{
    public function __construct()
    {
        $this->middleware(function ($request, $next) {
            if(Session::get('company_id')==''){
                if(Employee::where('user_id', Auth::user()->id)->count()!=0):
                    $companyId = Employee::where('user_id', Auth::user()->id)->first()->company_id;
                    Session::put('adminType',2);
                else :
                    $companyId   =   Company::where('user_id', Auth::user()->id)->first()->id;
                    Session::put('adminType',1);
                endif;
                Session::put('company_id',$companyId);
            }
            if(!checkProfileComplete()){
                return redirect()->route('companyProfile');
            }

            $status     =   checkSubscription();
            switch ($status){
                case 'noSubscription':
                    return redirect('dashboard/company/profile/selectSubscription');
                    break;

                case 'subscriptionCancel':
                    return redirect()->route('Company.Subscription.Continue');
                    break;

                case 'past_due':
                    break;

                case 'card_declined':
                    return redirect()->route('Company.Subscription.CardDeclined');
                    break;

                case 'canceled':
                    //return redirect()->route('Company.Subscription.Canceled');
                    break;
                default:
                    break;
            }
            return $next($request);
        });
    }

    public function index(CompanyService $companyService)
    {
        $company =  Company::with('invoiceLabels','docketLabels','clientRequest')->findOrfail(Session::get('company_id'));
        $allSentDockets     =   $companyService->allSentDockets($company);
        $emailSentDocket    =   $companyService->emailSentDockets($company);

        $totalDockets       =   $allSentDockets->count() + $emailSentDocket->count();
        $latestDockets      =   (new Collection($allSentDockets->take(5)->concat($emailSentDocket->take(5))))->sortByDesc('created_at')->take(5);

        $allSentInvoices    =   $companyService->allSentInvoices($company);
        $emailSentInvoices  =   $companyService->emailSentInvoices($company);

        $totalInvoices      =   $allSentInvoices->count() + $emailSentInvoices->count();
        $latestInvoices     =   (new Collection($allSentInvoices->take(5)->concat($emailSentInvoices->take(5))))->sortByDesc('created_at')->take(5);

        $sentDocketLabel    =    $company->docketLabels;
        $sentInvoiceLabel   =    $company->invoiceLabels;

        return view('dashboard.company.index', compact( 'company','totalDockets','totalInvoices','latestDockets','latestInvoices','sentInvoiceLabel','sentDocketLabel'));
    }

    public function timers()
    {

        return view('dashboard.company.include.timers');
    }

    public function getTimersCount(){

        $employeeIds    =   Employee::where('company_id',Session::get('company_id'))->pluck('user_id');
        $timersCount    =   Timer::whereIn('user_id', $employeeIds)->orderBy('created_at', 'desc')->count();

        return $timersCount;
    }

    public function subscriptionSubmit(Request $request){
        $this->validate($request,['plan'   => 'required']);
        Stripe::setApiKey('sk_test_JFpbP7SGSKbebNvaw5eT6SbQ');

        switch ($request->plan){
            case "plan1":
                try{
                    $charge     =   Charge::create(array(
                        "amount"    =>  50*100,
                        "currency"  =>  "aud",
                        "source"    =>  $request->input('stripeToken'),
                        "description"   =>  "Charge for ".Company::find(Session::get('company_id'))->name." submited by: ".Auth::user()->first_name." ".Auth::user()->last_name
                    ));
                    $paymentLog =   new PaymentLog();
                    $paymentLog->submitted_by   =   Auth::user()->id;
                    $paymentLog->company_id     =   Session::get('company_id');
                    $paymentLog->charge_id      =   $charge->id;
                    $paymentLog->charge         =   50;
                    $paymentLog->active_user    =   Company::find(Session::get('company_id'))->employees->count() +1;
                    $paymentLog->renew_date     =   Carbon::now();
                    $paymentLog->expiry_date    =   Carbon::now()->addMonth(1);
                    $paymentLog->description    =   "Charge for ".Company::find(Session::get('company_id'))->name." submited by: ".Auth::user()->first_name." ".Auth::user()->last_name;
                    $paymentLog->status         =   1;
                    $paymentLog->save();

                    $company    =   Company::find(Session::get('company_id'));
                    $company->max_user      =   4;
                    $company->renew_date    =   $paymentLog->renew_date;
                    $company->expiry_date   =    $paymentLog->expiry_date;
                    $company->save();
                    flash("Your subscription has been updated successfully.","success");
                    return redirect()->to('dashboard/company/profile/subscription');
                } catch (\Exception $e){
                    flash($e->getMessage(),"warning");
                }
                break;
            case "plan2":
                try{
                    $charge     =   Charge::create(array(
                        "amount"    =>  70*100,
                        "currency"  =>  "aud",
                        "source"    =>  $request->input('stripeToken'),
                        "description"   =>  "Charge for ".Company::find(Session::get('company_id'))->name." submited by: ".Auth::user()->first_name." ".Auth::user()->last_name
                    ));
                    $paymentLog =   new PaymentLog();
                    $paymentLog->submitted_by   =   Auth::user()->id;
                    $paymentLog->company_id     =   Session::get('company_id');
                    $paymentLog->charge_id      =   $charge->id;
                    $paymentLog->charge         =   70;
                    $paymentLog->active_user    =   Company::find(Session::get('company_id'))->employees->count() +1;
                    $paymentLog->renew_date     =   Carbon::now();
                    $paymentLog->expiry_date    =   Carbon::now()->addMonth(1);
                    $paymentLog->description    =   "Charge for ".Company::find(Session::get('company_id'))->name." submited by: ".Auth::user()->first_name." ".Auth::user()->last_name;
                    $paymentLog->status         =   1;
                    $paymentLog->save();

                    $company    =   Company::find(Session::get('company_id'));
                    $company->max_user      =   9;
                    $company->renew_date    =   $paymentLog->renew_date;
                    $company->expiry_date   =    $paymentLog->expiry_date;
                    $company->save();
                    flash("Your subscription has been updated successfully.","success");
                    return redirect()->to('dashboard/company/profile/subscription');
                } catch (\Exception $e){
                    flash($e->getMessage(),"warning");
                }
                break;
            case "plan3":
                try{
                    $charge     =   Charge::create(array(
                        "amount"    =>  100*100,
                        "currency"  =>  "aud",
                        "source"    =>  $request->input('stripeToken'),
                        "description"   =>  "Charge for ".Company::find(Session::get('company_id'))->name." submited by: ".Auth::user()->first_name." ".Auth::user()->last_name
                    ));
                    $paymentLog =   new PaymentLog();
                    $paymentLog->submitted_by   =   Auth::user()->id;
                    $paymentLog->company_id     =   Session::get('company_id');
                    $paymentLog->charge_id      =   $charge->id;
                    $paymentLog->charge         =   100;
                    $paymentLog->active_user    =   Company::find(Session::get('company_id'))->employees->count() +1;
                    $paymentLog->renew_date     =   Carbon::now();
                    $paymentLog->expiry_date    =   Carbon::now()->addMonth(1);
                    $paymentLog->description    =   "Charge for ".Company::find(Session::get('company_id'))->name." submited by: ".Auth::user()->first_name." ".Auth::user()->last_name;
                    $paymentLog->status         =   1;
                    $paymentLog->save();

                    $company    =   Company::find(Session::get('company_id'));
                    $company->renew_date    =   $paymentLog->renew_date;
                    $company->expiry_date   =    $paymentLog->expiry_date;
                    $company->max_user      =   14;
                    $company->save();
                    flash("Your subscription has been updated successfully.","success");
                    return redirect()->to('dashboard/company/profile/subscription');
                } catch (\Exception $e){
                    flash($e->getMessage(),"warning");
                }
                break;

            default:
                flash("Invalid attempt!","warning");
                break;
        }
        return redirect()->to('dashboard/company/profile/subscription');
    }

    public function invoiceSetting(){
        if(!checkProfileComplete()){
            return redirect()->route('companyProfile');
        }
        $userProfile    =    User::find(Auth::user()->id);
        $companyProfile =   Company::find(Session::get('company_id'));
        $invoiceSetting =   InvoiceSetting::where('company_id',Session::get('company_id'))->first();
        return view('dashboard.company.profile.invoiceSetting', compact('userProfile','companyProfile','invoiceSetting'));
    }

    public function invoiceSettingSubmit(Request $request){
        $this->validate($request,['bank_name'   => 'required',
            'account_name' => 'required',
            'bsb_number'   => 'required',
            'account_number'  => 'required',
            'instruction' => 'required']);

        $invoiceSettingQuery    =   InvoiceSetting::where('company_id',Session::get('company_id'));
        if($invoiceSettingQuery->count()>0) {
            $invoiceSetting =   InvoiceSetting::find($invoiceSettingQuery->first()->id);
        }else {
            $invoiceSetting =   new InvoiceSetting();
        }
        $invoiceSetting->bank_name              =   $request->bank_name;
        $invoiceSetting->account_name           =   $request->account_name;
        $invoiceSetting->bsb_number             =   $request->bsb_number;
        $invoiceSetting->account_number         =   $request->account_number;
        $invoiceSetting->instruction            =   (strlen($request->instruction)==0)?"IMPORTANT INFORMATION: Quote Invoice number as reference when making deposits":$request->instruction;
        $invoiceSetting->additional_information =   (strlen($request->additional_information)==0)?"":$request->additional_information;
        $invoiceSetting->user_id                =   Auth::user()->id;
        $invoiceSetting->company_id             =   Session::get('company_id');
        $invoiceSetting->save();

        flash('Invoice details updated successfully!','success');
        return redirect()->route('invoiceSetting');
    }

    public function changePassword(){
        return view('dashboard.company.profile.changePassword');
    }
    public function changePasswordSubmit(Request $request){
        $this->validate($request,['password' => 'required','old_password'=>'required','retypePassword' => 'required|same:password']);
        if(!Hash::check($request['old_password'],  Auth::user()->password)){
            flash('Your Old Password does not Match','warning');
            return redirect('dashboard/company/profile/changePassword');
        }else{
            Auth::user()->password = Hash::make($request['password']);
            Auth::user()->hashToken = '';
            Auth::user()->deviceToken = '';
            Auth::user()->device_type = '0';
            Auth::user()->save();
            flash('Profile updated successfully!','success');
            return redirect('dashboard/company/profile/changePassword');
        }
    }

    public function intro(){
        return view('dashboard.company.docketManager.intro');
    }

    //=================================== SENT DOCKET DOCKETS ===================================//

    //=================================== EMAIL DOCKETS ===================================//

    public function companyDocketViewEmailed($id){
        $sentDocket     =   EmailSentDocket::where('id',$id)->withTrashed()->get()->first();
        if ($sentDocket->theme_document_id == 0){
            $approval_type = array();
            foreach ($sentDocket->recipientInfo as $items){
                $approval_type[] = array(
                    'id' => $items->id,
                    'status' =>$items->status,
                    'approval' =>$items->approval,
                    'email' => $items->emailUserInfo->email,
                    'approval_time' =>$items->approval_time,
                    'name'=>$items->name,
                    'signature'=>AmazoneBucket::url() . $items->signature
                );
            }
            $companyName = array();
            foreach ($sentDocket->recipientInfo as $item){
               $companyName[] =   $item->receiver_company_name;

            }
            $emailUser = array();
            foreach ($sentDocket->recipientInfo as $row){
                $emailUser[] =   $row->emailUserInfo->email;

            }
            $company_name =implode(", ", $companyName);
            $employee_name =implode(", ", $emailUser);


            $docketTimer = SentDcoketTimerAttachment::where('sent_docket_id',$id)->where('type',2)->get();
            if($sentDocket->company_id == Session::get('company_id')){
                $docketFields   =  EmailSentDocketValue::where('email_sent_docket_id',$sentDocket->id)->with('docketFieldInfo')->get();
                $distinctValue =  EmailSentDocketRecipient::where('email_sent_docket_id',$id)->distinct('receiver_company_name')->pluck('receiver_company_name')->toArray();
                return view('dashboard.company.docketManager.docket.viewEmailed',compact('sentDocket','docketFields','docketTimer','approval_type','company_name','employee_name','distinctValue'));
            }else {
                flash('Invalid action ! Please try with valid action.','warning');
                return redirect()->back();
            }
        }else{
            $theme = DocumentTheme::where('id', $sentDocket->theme_document_id)->first();
            $approval_type = array();
            foreach ($sentDocket->recipientInfo as $items){
                $approval_type[] = array(
                    'id' => $items->id,
                    'status' =>$items->status,
                    'approval' =>$items->approval,
                    'email' => $items->emailUserInfo->email,
                    'approval_time' =>$items->approval_time,
                    'name'=>$items->name,
                    'signature'=>AmazoneBucket::url() . $items->signature
                );
            }
            $companyName = array();
            foreach ($sentDocket->recipientInfo as $item){
                $companyName[] =   $item->receiver_company_name;

            }
            $emailUser = array();
            foreach ($sentDocket->recipientInfo as $row){
                $emailUser[] =   $row->emailUserInfo->email;

            }
            $company_name =implode(", ", $companyName);
            $employee_name =implode(", ", $emailUser);

            $docketTimer = SentDcoketTimerAttachment::where('sent_docket_id',$id)->where('type',2)->get();
            if($sentDocket->company_id==Session::get('company_id')){
                $docketFields   =  EmailSentDocketValue::where('email_sent_docket_id',$sentDocket->id)->get();
                return view('dashboard/company/theme/'.$theme->slug.'/index',compact('sentDocket','docketFields','docketTimer','approval_type','company_name','employee_name'));
            }else {
                flash('Invalid action ! Please try with valid action.','warning');
                return redirect()->back();
            }

        }

    }

    public function emailFilter(Request $request){
        $sentDocketLabel =   DocketLabel::where('company_id',Session::get('company_id'))->get();
        $dockets        =   EmailSentDocket::where('company_id',Session::get('company_id'))->orderBy('id','desc')->get();

        $employes = Employee::where('company_id',Session::get('company_id'))->pluck('user_id')->toArray();
        $company   =   array(Company::where('id',Session::get('company_id'))->first()->user_id);
        $total =  array_merge($company, $employes);
        $docketusedbyemail = EmailSentDocket::select('docket_id')->whereIn('user_id',$total)->groupBy('docket_id')->get();
        $sentemailDocketsQuery =  EmailSentDocket::query();
        $sentemailDocketsQuery->where('company_id',Session::get('company_id'));

        if($request->invoiceable){
            $sentemailDocketsQuery->where('invoiceable',$request->invoiceable);
        }

        if($request->email){
            $emailUserQuery= EmailUser::where('email',$request->email);
            if($emailUserQuery->count()){
                $sentemailDocketsQuery->where('receiver_user_id', $emailUserQuery->first()->id);
            }else{

            }

//            $sentemailDocketsQuery->where('receiver_user_id', $emailUser);
        }
        if($request->date){
            if($request->date==1){
                if($request->from)
                    $sentemailDocketsQuery->whereDate('created_at','>=',Carbon::parse($request->from)->format('Y-m-d'));

                if($request->to)
                    $sentemailDocketsQuery->whereDate('created_at','<=',Carbon::parse($request->to)->format('Y-m-d'));
            }
        }
//        if($request->from){
//            $sentemailDocketsQuery->whereDate('created_at','>=',Carbon::parse($request->from)->format('Y-m-d'));
//        }
//        if($request->to){
//            $sentemailDocketsQuery->whereDate('created_at','<=',Carbon::parse($request->to)->format('Y-m-d'));
//        }
        if($request->docketTemplateId){
            $sentemailDocketsQuery->where('docket_id',$request->docketTemplateId);
        }
        if($request->docketId){
            $sentemailDocketsQuery->where('company_docket_id',$request->docketId);
        }
        if($request->date) {
            if ($request->date == 2) {
                if ($request->from) {
                    $carbonDateFrom = Carbon::parse($request->from);
                    unset($tempSentDocket);
                    $tempSentDocket = array();
                    foreach ($sentemailDocketsQuery->get() as $row) {
                        $flag = false;
                        $docketTemplate = $row->docketInfo();
                        $docketFieldsIds = $docketTemplate->first()->getDocketFieldsByCategoryId(6)->get()->pluck('id');

                        $getAllSentDocketDateFieldsValues = EmailSentDocketValue::whereIn('docket_field_id', $docketFieldsIds)->where('email_sent_docket_id', $row->id)->get();
                        foreach ($getAllSentDocketDateFieldsValues as $rowValue) {
                            try{
                                Carbon::parse($rowValue->value);
                                if ($rowValue->value != "" && $rowValue->value != "null") {
                                    if ($carbonDateFrom->lte(Carbon::parse($rowValue->value)))
                                        $flag = true;
                                }
                                if ($flag == true)
                                    break;
                            }catch(\Exception $e) {
                                break;
                            }
                        }

                        if ($flag == true) {
                            $tempSentDocket[] = $row->id;
                        }
                    }
                    unset($sentDocketsQuery);
                    $sentDocketsQuery = EmailSentDocket::whereIn('id', $tempSentDocket);
                }

                if ($request->to) {
                    $carbonDateTo = Carbon::parse($request->to);


                    unset($tempSentDocket);
                    $tempSentDocket = array();
                    foreach ($sentDocketsQuery->get() as $row) {
                        $flag = false;
                        $docketTemplate = $row->docketInfo();
                        $docketFieldsIds = $docketTemplate->first()->getDocketFieldsByCategoryId(6)->get()->pluck('id');

                        $getAllSentDocketDateFieldsValues = EmailSentDocketValue::whereIn('docket_field_id', $docketFieldsIds)->where('email_sent_docket_id', $row->id)->get();
                        foreach ($getAllSentDocketDateFieldsValues as $rowValue) {
                            if ($rowValue->value != "" && $rowValue->value != "null") {
                                if ($carbonDateTo->gte(Carbon::parse($rowValue->value)))
                                    $flag = true;
                            }
                            if ($flag == true)
                                break;
                        }

                        if ($flag == true) {
                            $tempSentDocket[] = $row->id;
                        }
                    }
                    unset($sentDocketsQuery);
                    $sentemailDocketsQuery = EmailSentDocket::whereIn('id', $tempSentDocket);

                }
            }
        }
        $sentEmailDockets     =   $sentemailDocketsQuery->get();
        $company            =   Company::with('dockets','invoices','docketLabels','invoiceLabels','employees.userInfo','userInfo')->findOrfail(Session::get('company_id'));
        return view('dashboard.company.docketManager.emaildocketFilter',compact('company','sentEmailDockets','request','dockets','docketusedbyemail','sentDocketLabel'));
    }



    public function companyDocketView($id){




//          $user= SentDockets::get();
//             foreach($user as $row){
//                 $row->company_logo = $row->senderCompanyInfo->logo;
//                 $row->save();
//             }


        $sentDocket     =   SentDockets::where('id',$id)->withTrashed()->get()->first();
        if ($sentDocket->theme_document_id == 0){
            $approval_type = array();
            foreach ($sentDocket->sentDocketRecipientApproval as $items){
                $approval_type[] = array(
                    'id' => $items->id,
                    'status' =>$items->status,
                    'full_name' => $items->userInfo->first_name." ".$items->userInfo->last_name,
                    'approval_time' =>$items->approval_time,
                    'name'=>$items->name,
                    'signature'=>AmazoneBucket::url() . $items->signature
                );
            }
            $docketTimer = SentDcoketTimerAttachment::where('sent_docket_id',$id)->where('type',1)->get();
//            $recipientIds   =   $sentDocket->recipientInfo->pluck('user_id');
//            $companyEmployeeQuery   =    Employee::whereIn('user_id',$recipientIds)->pluck('company_id');
//
//            $empCompany    =    Company::whereIn('id',$companyEmployeeQuery)->pluck('id')->toArray();
//            $adminCompanyQuery   =    Company::whereIn('user_id',$recipientIds)->pluck('id')->toArray();
//            $company    =   Company::whereIn('id',array_unique(array_merge($empCompany,$adminCompanyQuery)))->get();

            $sentDocketRecepients = array();

            foreach ($sentDocket->recipientInfo as $sentDocketRecepient){
                if ($sentDocketRecepient->userInfo->employeeInfo){
                    $companyNameRecipent = $sentDocketRecepient->userInfo->employeeInfo->companyInfo->name;
                }else if ($sentDocketRecepient->userInfo->companyInfo){
                    $companyNameRecipent = $sentDocketRecepient->userInfo->companyInfo->name;
                }


                $sentDocketRecepients[]=array(
                    'name'=>$sentDocketRecepient->userInfo->first_name." ".$sentDocketRecepient->userInfo->last_name,
                    'company_name'=> $companyNameRecipent,
                );


            }

            $data= (new Collection($sentDocketRecepients))->sortBy('company_name');

            $receiverDetail = array();

            foreach ($data as $datas){

                $receiverDetail[$datas['company_name']][]= $datas['name'];


            }




//            $companyName = array();
//            foreach ($company as $row){
//                $companyName[] = $row->name;
//            }
//            $receiver_detail = array();
//            foreach ($sentDocket->recipientInfo as $row){
//                $receiver_detail[] =   $row->userInfo->first_name." ".$row->userInfo->last_name;
//
//            }
//           $company_name =implode(", ", $companyName);
//            $employee_name =implode(", ", $receiver_detail);



            if($sentDocket->sender_company_id==Session::get('company_id')){
                $docketFields   =   SentDocketsValue::where('sent_docket_id',$sentDocket->id)->with(['docketFieldInfo' => function ($query) {
                    $query->withTrashed();
                }])->get();
                return view('dashboard.company.docketManager.docket.view',compact('sentDocket','docketFields','docketTimer','approval_type','receiverDetail'));
            }else{
                //get total company employee ids
                $employeeIds    =   Employee::where('company_id',Session::get('company_id'))->pluck('user_id');
                $employeeIds[]  =   Company::find(Session::get('company_id'))->user_id;

                if(SentDocketRecipient::whereIn('user_id',$employeeIds)->where('sent_docket_id',$id)->count()>0){
                    $docketFields   =   SentDocketsValue::where('sent_docket_id',$sentDocket->id)->get();
                    return view('dashboard.company.docketManager.docket.view',compact('sentDocket','docketFields','docketTimer','approval_type','company_name','employee_name','receiverDetail'));
                }else{
                    flash('Invalid action !.','warning');
                    return redirect()->back();
                }
            }
        }else{
            $approval_type = array();
            foreach ($sentDocket->sentDocketRecipientApproval as $items){
                $approval_type[] = array(
                    'id' => $items->id,
                    'status' =>$items->status,
                    'full_name' => $items->userInfo->first_name." ".$items->userInfo->last_name,
                    'approval_time' =>$items->approval_time,
                    'name'=>$items->name,
                    'signature'=>AmazoneBucket::url() . $items->signature
                );
            }
            $theme = DocumentTheme::where('id', $sentDocket->theme_document_id)->first();
            $docketTimer = SentDcoketTimerAttachment::where('sent_docket_id',$id)->where('type',1)->get();
            $recipientIds   =   $sentDocket->recipientInfo->pluck('user_id');
            $companyEmployeeQuery   =    Employee::whereIn('user_id',$recipientIds)->pluck('company_id');
            $empCompany    =    Company::whereIn('id',$companyEmployeeQuery)->pluck('id')->toArray();
            $adminCompanyQuery   =    Company::whereIn('user_id',$recipientIds)->pluck('id')->toArray();
            $company    =   Company::whereIn('id',array_unique(array_merge($empCompany,$adminCompanyQuery)))->get();
            $companyName = array();
            foreach ($company as $row){
                $companyName[] = $row->name;
            }
            $receiver_detail = array();
            foreach ($sentDocket->recipientInfo as $row){
                $receiver_detail[] =   $row->userInfo->first_name." ".$row->userInfo->last_name;

            }
            $company_name =implode(", ", $companyName);
            $employee_name =implode(", ", $receiver_detail);

            if($sentDocket->sender_company_id==Session::get('company_id')){
                $docketFields   =   SentDocketsValue::where('sent_docket_id',$sentDocket->id)->get();
                return view('dashboard/company/theme/'.$theme->slug.'/index',compact('sentDocket','docketFields','company','docketTimer','approval_type','company_name','employee_name'));
            }else{
                //get total company employee ids
                $employeeIds    =   Employee::where('company_id',Session::get('company_id'))->pluck('user_id');
                $employeeIds[]  =   Company::find(Session::get('company_id'))->user_id;

                if(SentDocketRecipient::whereIn('user_id',$employeeIds)->where('sent_docket_id',$id)->count()>0){
                    $docketFields   =   SentDocketsValue::where('sent_docket_id',$sentDocket->id)->get();
                    return view('dashboard/company/theme/'.$theme->slug.'/index',compact('sentDocket','docketFields','company','docketTimer','approval_type','company_name','employee_name'));
                }else{
                    flash('Invalid action !.','warning');
                    return redirect()->back();
                }
            }
        }
    }

    public function companyDocketApprove(Request $request ){
        $sentDocket     =   SentDockets::findOrFail($request->sentDocketId);
//        $sentDocket =SentDockets::where('id',$request->sentDocketId);
        if($sentDocket->sentDocketRecipientApproval) {
            if (in_array(Auth::user()->id, $sentDocket->sentDocketRecipientApproval->pluck('user_id')->toArray())):
                $sentDocketRecipientApprovalQuery = SentDocketRecipientApproval::where('sent_docket_id', $request->sentDocketId)->Where('user_id', Auth::user()->id)->where('status', 0);
                if ($sentDocketRecipientApprovalQuery->count() == 1) {
                    if ($sentDocket->docketApprovalType == 1){
                        $this->validate($request,['sentDocketId' =>     'required','name' =>     'required','signature' =>     'required']);
                            $sentDocketRecipientApproval     =   SentDocketRecipientApproval::findOrFail($sentDocketRecipientApprovalQuery->first()->id);
                            $sentDocketRecipientApproval->status     =   1;
                            $sentDocketRecipientApproval->approval_time =Carbon::now()->toDateTimeString();
                            $sentDocketRecipientApproval->name =$request->name;
                            $image = $request->signature;  // your base64 encoded
                            $image = str_replace('data:image/png;base64,', '', $image);
                            $image = str_replace(' ', '+', $image);
                            $imageName = 'signature'.time().'.'.'png';
                             \File::put(base_path('assets'). '/signature/' . $imageName, base64_decode($image));
                            $sentDocketRecipientApproval->signature=$imageName;
                            $sentDocketRecipientApproval->save();

                    }else{
                        $this->validate($request,['sentDocketId' =>     'required']);
                            $sentDocketRecipientApproval     =   SentDocketRecipientApproval::findOrFail($sentDocketRecipientApprovalQuery->first()->id);
                            $sentDocketRecipientApproval->status     =   1;
                            $sentDocketRecipientApproval->approval_time =Carbon::now()->toDateTimeString();
                            $sentDocketRecipientApproval->save();

                    }

                    $sentDocketSenderInfo = User::where('id', $sentDocket->user_id)->first();
                    $sentDocketReceiverInfo = User::where('id', Auth::user()->id)->first();

                    if (SentDocketRecipientApproval::where('sent_docket_id', $request->sentDocketId)->where('status', 0)->count() == 0) {
                        $sentDocketUpdate = SentDockets::findOrFail($request->sentDocketId);
                        $sentDocketUpdate->status = 1;
                        $sentDocketUpdate->save();

                        if (SentDocketRecipientApproval::where('sent_docket_id', $request->sentDocketId)->count() > 1) {
                            if ($sentDocketSenderInfo->device_type == 2) {
                                $this->sendiOSNotification($sentDocketSenderInfo->deviceToken, "Docket Approved", "Your docket " . $sentDocketUpdate->docketInfo->title . " has fully approved by all.");
                            }
                            if ($sentDocketSenderInfo->device_type == 1) {
                                $this->sendAndroidNotification($sentDocketSenderInfo->deviceToken, "Docket Approved", "Your docket " . $sentDocketUpdate->docketInfo->title . " has fully approved by all.");
                            }
                        }
                    }

                    if ($sentDocketSenderInfo->device_type == 2) {
                        $this->sendiOSNotification($sentDocketSenderInfo->deviceToken, "Docket Approved", $sentDocketReceiverInfo->first_name . " " . $sentDocketReceiverInfo->last_name . " has approved your docket.");
                    }
                    if ($sentDocketSenderInfo->device_type == 1) {
                        $this->sendAndroidNotification($sentDocketSenderInfo->deviceToken, "Docket Approved", $sentDocketReceiverInfo->first_name . " " . $sentDocketReceiverInfo->last_name . " has approved your docket.");
                    }

//                    flash('Docket approved successfully.', 'success');
//                    return redirect('dashboard/company/docketBookManager/docket/received');
                    $message= 'Docket approved successfully.';
                    return response()->json(['status' => true, 'message' => $message]);
                } else {
                    flash('Invalid attempt!  approved successfully.', 'success');
                    return redirect('dashboard/company/docketBookManager/docket/received');
                }
            else:
                flash('Invalid attempt!  approved successfully.', 'success');
                return redirect('dashboard/company/docketBookManager/docket/received');
            endif;
        }else{
            flash('Invalid attempt!  approved successfully.', 'success');
            return redirect('dashboard/company/docketBookManager/docket/received');
        }
    }

    public function approvalTypeView($id){
        $sentDocket     =   SentDockets::findOrFail($id);
        $approval_type = array();
        foreach ($sentDocket->sentDocketRecipientApproval as $items){
            $approval_type[] = array(
                'id' => $items->id,
                'status' =>$items->status,
                'full_name' => $items->userInfo->first_name." ".$items->userInfo->last_name,
                'approval_time' =>$items->approval_time,
                'name'=>$items->name,
                'signature'=>AmazoneBucket::url() . $items->signature
            );
        }
        $recipientIds   =   $sentDocket->recipientInfo->pluck('user_id');
        $companyEmployeeQuery   =    Employee::whereIn('user_id',$recipientIds)->pluck('company_id');
        $empCompany    =    Company::whereIn('id',$companyEmployeeQuery)->pluck('id')->toArray();
        $adminCompanyQuery   =    Company::whereIn('user_id',$recipientIds)->pluck('id')->toArray();
        $company    =   Company::whereIn('id',array_unique(array_merge($empCompany,$adminCompanyQuery)))->get();

        if($sentDocket->sender_company_id==Session::get('company_id')){
            $docketFields   =   SentDocketsValue::where('sent_docket_id',$sentDocket->id)->get();
            return view('dashboard.company.docketManager.docket.approvalTypeView',compact('sentDocket','docketFields','company','approval_type '));
        }else{
            //get total company employee ids
            $employeeIds    =   Employee::where('company_id',Session::get('company_id'))->pluck('user_id');
            $employeeIds[]  =   Company::find(Session::get('company_id'))->user_id;

            if(SentDocketRecipient::whereIn('user_id',$employeeIds)->where('sent_docket_id',$id)->count()>0){
                $docketFields   =   SentDocketsValue::where('sent_docket_id',$sentDocket->id)->get();
                return view('dashboard.company.docketManager.docket.approvalTypeView',compact('sentDocket','docketFields','company','approval_type '));
            }else{
                flash('Invalid action !.','warning');
                return redirect()->back();
            }
        }
    }


    public function saveDocketFrequency(Request $request){

        $this->validate($request,['frequency_value'   => 'unique:docket_frequencies']);
        if(DocketFrequency::where('company_id',Session::get('company_id'))->where('frequency_value',$request->frequency_value)->count()!=0){
            flash('The Docket Frequency "'.$request->frequency_value.'" has already been taken.','warning');
            return redirect('dashboard/company/docketBookManager/template');
        }else{
            $docket_frequency = new DocketFrequency();
            $docket_frequency->frequency_value = $request->frequency_value;
            $docket_frequency->slug = str_slug($request->frequency_value);
            $docket_frequency->company_id = Session::get('company_id');
            $docket_frequency->save();

            flash('The Docket Frequency "'.$request->docketTitle.'" has been saved successfully.','success');
            return redirect('dashboard/company/docketBookManager/template');
        }
    }






    public function saveTempDocket(Request $request){
        $this->validate($request,['docketTitle'   => 'required']);
        if(Docket::where('company_id',Session::get('company_id'))->where('title',$request->docketTitle)->where('is_archive',0)->count()!=0){
            flash('The title "'.$request->docketTitle.'" has already been taken.','warning');
            return redirect('dashboard/company/docketBookManager/template');
        }else{
            $tempDocket             =    new Docket();
            $tempDocket->title      =   $request->docketTitle;
            $tempDocket->subTitle   =   "";
            $tempDocket->user_id    =   Auth::user()->id;
            $tempDocket->invoiceable    =   0;
            $tempDocket->docketApprovalType = $request->docketApprovalType;
            $tempDocket->invoiceable = $request->invoiceable;
            $tempDocket->theme_document_id = 0;
            if($request->timer_attachement == null){
                $tempDocket->timer_attachement = 0;
            }else{
                $tempDocket->timer_attachement = $request->timer_attachement;
            }
            if($request->xero_timesheet == null){
                $tempDocket->xero_timesheet = 0;

            }else{
                $tempDocket->xero_timesheet = $request->xero_timesheet;
            }
            $tempDocket->company_id =   Session::get('company_id');
            $tempDocket->save();

            $helpFlag =  $request->helpFlag;
            return redirect('dashboard/company/docketBookManager/designDocket/'.$tempDocket->id)->with(['helpFlag' => $helpFlag]);
        }
    }

    public function updateTempDocket(Request $request){
        $this->validate($request,['docketId' => 'required','docketName'   => 'required']);

        $docketInfo     =    Docket::where('id',$request->docketId)->firstOrFail();
        if($docketInfo->company_id==Session::get('company_id')){
            $docketInfo->title  =    $request->docketName;
            $docketInfo->subTitle   =   $request->docketTitle;
            if($request->theme_document_id){
                $docketInfo->theme_document_id = $request->theme_document_id;
            }
            $docketInfo->save();
            flash('Template updated successfully.','success');
            return redirect('dashboard/company/docketBookManager/designDocket/'.$request->docketId);
        }else {
            flash('Invalid action ! Please try with valid action.','warning');
            return redirect('dashboard/company/docketBookManager/designDocket/'.$request->docketId);
        }

        $tempDocket             =    new Docket();
        $tempDocket->title      =   $request->docketTitle;
        $tempDocket->user_id    =   Auth::user()->id;
        $tempDocket->company_id =   Session::get('company_id');
        $tempDocket->save();

        return redirect('dashboard/company/docketBookManager/designDocket/'.$tempDocket->id);
    }

    public function updateTempThemeDocket(Request $request){
        $this->validate($request,['docketId' => 'required','theme_document_id'   => 'required']);

        $docketInfo     =    Docket::where('id',$request->docketId)->firstOrFail();
        if($docketInfo->company_id==Session::get('company_id')){

            $docketInfo->theme_document_id = $request->theme_document_id;
            $docketInfo->save();
            flash('Template updated successfully.','success');
            return redirect('dashboard/company/docketBookManager/designDocket/'.$request->docketId);
        }else {
            flash('Invalid action ! Please try with valid action.','warning');
            return redirect('dashboard/company/docketBookManager/designDocket/'.$request->docketId);
        }

        $tempDocket             =    new Docket();
        $tempDocket->theme_document_id      =   $request->theme_document_id;
        $tempDocket->user_id    =   Auth::user()->id;
        $tempDocket->company_id =   Session::get('company_id');
        $tempDocket->save();

        return redirect('dashboard/company/docketBookManager/designDocket/'.$tempDocket->id);
    }
    public function updateTempThemeInvoice(Request $request){
        $this->validate($request,['invoiceId' => 'required','theme_document_id'   => 'required']);

        $docketInfo     =    Invoice::where('id',$request->invoiceId)->firstOrFail();
        if($docketInfo->company_id==Session::get('company_id')){

            $docketInfo->theme_document_id = $request->theme_document_id;
            $docketInfo->save();
            flash('Template updated successfully.','success');
            return redirect('dashboard/company/invoiceManager/designInvoice/'.$request->invoiceId);
        }else {
            flash('Invalid action ! Please try with valid action.','warning');
            return redirect('dashboard/company/invoiceManager/designInvoice/'.$request->invoiceId);
        }

        $tempInvoice            =    new Invoice();
        $tempInvoice->theme_document_id      =   $request->theme_document_id;
        $tempInvoice->user_id    =   Auth::user()->id;
        $tempInvoice->company_id =   Session::get('company_id');
        $tempInvoice->save();

        return redirect('dashboard/company/invoiceManager/designInvoice/'.$tempInvoice->invoiceId);
    }

    public  function checkNumberField($tempDocketFields){
        foreach ($tempDocketFields as $rows ){
            if ($rows->docket_field_category_id == 3){
                if (DocketFieldNumber::where('docket_field_id',$rows->id)->count()==0){
                    DocketFieldNumber::insert([
                        ['docket_field_id'  =>  $rows->id],

                    ]);

                }
            }

            if ($rows->docket_field_category_id == 18){
                if (YesNoFields::where('docket_field_id',$rows->id)->count()==0){
                    YesNoFields::insert([
                        ['docket_field_id'  =>  $rows->id, 'type'  =>  0, 'label'  =>  'No','colour'=>'#dd0006','icon_image'=>'assets/yesnonaimage/close.png' ,'label_type'=>'0'],
                        ['docket_field_id'  =>  $rows->id, 'type'  =>  1, 'label'  =>  'Yes','colour'=>'#009688','icon_image'=>'assets/yesnonaimage/check.png','label_type'=>'0'],
                        ['docket_field_id'  =>  $rows->id, 'type'  =>  2, 'label'  =>  'N/a','colour'=>'#dd0006','icon_image'=>'assets/yesnonaimage/na.png','label_type'=>'0']
                    ]);

                }

            }


        }
    }

//     public  function childPrefiller($items){
//       $lab ='';
//        foreach ($items->childs as $itemss){
//
//            if (count($items->childs)) {
//
//                $lab .=   $itemss->value . '  > ' . '</br>';
//            }
//
//            $lab  .=   $this->childPrefiller($itemss);
//        }
//
//        return $lab;
//     }


    function buildTreeArray(array $prefiller, $parentId = 0) {
        $branch = array();
        foreach ($prefiller as $prefillers) {
            if ($prefillers['root_id'] == $parentId) {
                $children = $this->buildTreeArray($prefiller, $prefillers['id']);
                if ($children) {
                    $prefillers['prefiller'] = $children;
                }else{
                    $prefillers['prefiller'] =[];
                }
                $branch[] = $prefillers;
            }
        }
        return $branch;
    }



    private $prefillerFirstRow ;

    public function getPrefillerChild($prefiller,$finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory){
        $child = "";
        $urlUpdatePreFiller = url('dashboard/company/docketBookManager/designDocket/updatePreFiller');
        foreach ($prefiller as $item){

            $prefillerForMaxIndex = DocketFiledPreFiller::where('docket_field_id',$item['docket_field_id'])->pluck('index')->toArray();
            $finalPrefillerMaxIndex =max($prefillerForMaxIndex);

            $docketField = DocketField::where('id',$item['docket_field_id'])->where('docket_id',$tempDocketId)->first();
            $defaultPrefillerId =unserialize($docketField->default_prefiller_id);


            if(!$this->prefillerFirstRow){
                $child .= "<tr>";
                for($i=1; $i<$item['index'];$i++){ $child .= "<td></td>"; }
            }
            if ($finalPrefillerMaxIndex == $item['index']){
                if ($defaultPrefillerId != null) {
                    if (in_array($item['id'], $defaultPrefillerId)) {
                        $child .= '<td><div class="prefillercontent"> <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" value="' . $item['id'] . '" items="' . $item["docket_field_id"] . '"  checked><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a  data-toggle="modal" data-target="#deleteLabel" data-id="' . $item['id'] . '" data-docketfieldid="' . $item['docket_field_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $item['index'].'"  data-labels="'.$item["docket_field_name"].'"  data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div>  </td>';
                    } else {
                        $child .= '<td><div class="prefillercontent"> <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" value="' . $item['id'] . '" items="' . $item["docket_field_id"] . '" ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a  data-toggle="modal" data-target="#deleteLabel" data-id="' . $item['id'] . '" data-docketfieldid="' . $item['docket_field_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $item['index'].'"  data-labels="'.$item["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>   </td>';

                    }
                }else{
                     $child .= '<td><div class="prefillercontent"> <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" value="' . $item['id'] . '" items="' . $item["docket_field_id"] . '" ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a  data-toggle="modal" data-target="#deleteLabel" data-id="' . $item['id'] . '" data-docketfieldid="' . $item['docket_field_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $item['index'].'"  data-labels="'.$item["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>  </td>';

                }
            }else{
                $child .= '<td><div class="prefillercontent"> <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" disabled  ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="'.$item['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $item['value'] .'</a> <a  data-toggle="modal" data-target="#deleteLabel" data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin : 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $item['index'].'"  data-labels="'.$item["docket_field_name"].'"  class="btn btn-raised btn-danger btn-xs btnprefiller" data-prefillertype="'.$docketFieldCategory.'"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>  </td>';

            }
            if(count($item['prefiller'])>0){
                $this->prefillerFirstRow = true;
                $child .= $this->getPrefillerChild($item['prefiller'],$finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory);
            }else{
                $this->prefillerFirstRow = false;
                $child .="</tr>";
            }
        }
        return $child;
    }


    public function designDocket($tempDocketId){
//        dd($_SERVER);

        if(@$_SERVER["QUERY_STRING"] == null){
            $isDeletedShow = 0;
        }else{
            $isDeletedShow = explode('=',$_SERVER["QUERY_STRING"])[1];
        }

//        $isDeletedShow  = 0;
        $this->updateDefaultPrefiller();
        $tempDocket =   Docket::where('id',$tempDocketId)->firstOrFail();


        $prefiller = array();
        foreach ($tempDocket->docketField as $tempdocketField){
            foreach($tempdocketField->docketPreFiller as $subRow):
                $prefiller[]   =  array(
                    'id'=> $subRow->id,
                    'value'=> $subRow->value,
                    'root_id'=> $subRow->root_id,
                    'index'=> $subRow->index,
                    'docket_field_id'=> $subRow->docket_field_id,
                    'docket_field_name'=>$subRow->docketField->label,
                );
            endforeach;
        }

        $urlUpdatePreFiller = url('dashboard/company/docketBookManager/designDocket/updatePreFiller');
        $datas = $this->buildTreeArray($prefiller);
        $finalPrefillerView = array();
        foreach ($datas as $row){
            $checkCategoryField = DocketField::where('id',$row['docket_field_id'])->where('docket_id',$tempDocketId)->first();
            if ($checkCategoryField->docket_field_category_id == 3){
                $docketFieldCategory = 1;
            }else{
                $docketFieldCategory = 0;
            }
            $final = "";
            $this->prefillerFirstRow    =   true;
            $final .= '<tr><td>';
            $prefillerForMaxIndex = DocketFiledPreFiller::where('docket_field_id',$row['docket_field_id'])->pluck('index')->toArray();
            $finalPrefillerMaxIndex =max($prefillerForMaxIndex);
            $docketField = DocketField::where('id',$row['docket_field_id'])->where('docket_id',$tempDocketId)->first();
            $defaultPrefillerId =unserialize($docketField->default_prefiller_id);
            if ($finalPrefillerMaxIndex == $row['index']){
                if ($defaultPrefillerId != null){
                    if (in_array($row['id'],$defaultPrefillerId)){
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_id"].'"  checked  > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true" /></a>  <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a>  </div> </td>' ;
                    }else{
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_id"].'"   ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;
                    }
                }else{
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_id"].'"   ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'"  data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;
                }
            }else{
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark"  disabled  ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;
            }
            if(count($row["prefiller"])>0){
                $final .=  $this->getPrefillerChild($row["prefiller"],$finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory);
            }
            $finalPrefillerView[] = array(
                'id'=>$row['docket_field_id'],
                'final'=>$final
            );

        }

        $purchased_theme_ids = ThemePurchase::where('company_id', Session::get('company_id'))->pluck('theme_id');
        $themes = DocumentTheme::where('is_active', 1)->where('paid_free', 0)->orWhereIn('id', $purchased_theme_ids)->get();

        if($tempDocket->xero_timesheet == 1){
             if(DocketField::where('docket_id',$tempDocketId)->count()==0):
                 $tempDocketFields   =   $this->insertDefaultTimesheetDocketTemplate($tempDocketId);
                 if ($tempDocket->xero_timesheet==1){
                     $tempDocketFields =  DocketField::where('docket_id',$tempDocketId)->orderBy('order','asc')->get();
                     foreach ($tempDocketFields as $items){
                         $docketTimesheet= new DocketTimesheet();
                         $docketTimesheet->docket_id = $items->docket_id;
                         $docketTimesheet->docket_field_id = $items->id;
                         $docketTimesheet->save();
                     }
                 }

             endif;
         }else{
             if(DocketField::where('docket_id',$tempDocketId)->withTrashed()->count()==0):
                 $tempDocketFields   =   $this->insertDefaultDocketTemplate($tempDocketId);
             endif;
         }

//        if(DocketField::where('docket_id',$tempDocketId)->count()==0):
//            $tempDocketFields   =   $this->insertDefaultDocketTemplate($tempDocketId);
//        endif;



        if($isDeletedShow == 0){
            $tempDocketFields =  DocketField::where('docket_id',$tempDocketId)->orderBy('order','asc')->get();
        }else{
            $tempDocketFields =  DocketField::where('docket_id',$tempDocketId)->withTrashed()->orderBy('order','asc')->get();
        }

        // for pie chart query
        $totalDocketSent    =    SentDockets::where('company_id',Session::get('company_id'))->count();
        $adminEmployeeId  =   array();
        $adminEmployeeId[]    = Company::where('id',Session::get('company_id'))->first()->user_id;
        $adminEmployeeQuery  =   Employee::where('company_id',Session::get('company_id'))->where('is_admin',1)->get();
        foreach ($adminEmployeeQuery as $row){
            $adminEmployeeId[]   =   $row->user_id;
        }
        $docketUsedByAdmin  =    SentDockets::whereIn('user_id',$adminEmployeeId)->count();

        $employeeId  =   array();
        $employeeQuery  =   Employee::where('company_id',Session::get('company_id'))->where('is_admin',0)->get();
        foreach ($employeeQuery as $row){
            $employeeId[]   =   $row->user_id;
        }
        $docketUsedByEmployee  =    SentDockets::whereIn('user_id',$employeeId)->count();

        //get data for horizontal bar chart
        $employeeData   =    Employee::where('company_id',Session::get('company_id'))->get();

        $companyAdminData   =   Company::where('id', Session::get('company_id'))->first();

        $employeesQuery   =   Employee::where('company_id',Session::get('company_id'))->get();
        $companyAdmin   =    Company::where('id',Session::get('company_id'))->first();
        $employees[]  =   array('id'    =>  $companyAdmin->user_id,  'name'  =>  $companyAdmin->userInfo->first_name. " ".$companyAdmin->userInfo->last_name);
        foreach ($employeesQuery as $row){
            $employees[]    =    array('id'    =>  $row->user_id, 'name'  =>  @$row->userInfo->first_name. " ".@$row->userInfo->last_name);
        }


        $totalAssign    =    AssignedDocket::where('docket_id',$tempDocketId)->count();
        $docketSetting =   DocketFooter::where('company_id',Session::get('company_id'))->orderby ('id','desc')->get();
        $docketFields= DocketField::orderby ('id','desc')->first();

        $docketDocument=DocketDocument::where('company_id',Session::get('company_id'))->orderby ('id','desc')->get();
        $attachedDocument=DocketAttachments::orderby ('id','desc')->get();
        $docketPrefillerValue=DocketPrefiller::where('company_id',Session::get('company_id'))->orderby ('id','desc')->get();
        $this->checkNumberField($tempDocketFields);


        $docketRecepients = array();
        $added_company_idQuery          =   Client::where("company_id",Session::get('company_id'))->orWhere('requested_company_id',Session::get('company_id'))->get();
        if(count($added_company_idQuery) != 0){
            foreach ($added_company_idQuery as $added_company_idQuerys) {
                if ($added_company_idQuerys->companyInfo->userInfo) {
                    if ($added_company_idQuerys->companyInfo->userInfo->isActive==1){
                        $docketRecepients[] = array(
                            'id' => $added_company_idQuerys->companyInfo->userInfo->id,
                            'name' => @$added_company_idQuerys->companyInfo->userInfo->first_name . ' ' . @$added_company_idQuerys->companyInfo->userInfo->last_name,
                            'company' => $added_company_idQuerys->companyInfo->name,
                            'type'=>1,
                        );
                    }
                }


                if ($added_company_idQuerys->companyInfo->employees) {
                    foreach ($added_company_idQuerys->companyInfo->employees as $employeeDatas) {
                        //   dd($employeeDatas->userInfo->isActive);
                        if (@$employeeDatas->userInfo->isActive == 1) {
                            $docketRecepients[] = array(
                                'id' => $employeeDatas->userInfo->id,
                                'name' => $employeeDatas->userInfo->first_name . ' ' . $employeeDatas->userInfo->last_name,
                                'company' => $employeeDatas->companyInfo->name,
                                'type' => 1,
                            );
                        }
                    }
                }
            }
        }else{
            $company = Company::where('id',Session::get('company_id'))->first();

            $docketRecepients[] = array(
                'id' => $company->userInfo->id,
                'name' => $company->userInfo->first_name . ' ' . $company->userInfo->last_name,
                'company' => $company->name,
                'type' => 1,
            );
            foreach($company->employees as $companys){
                if ($companys->userInfo->isActive == 1) {
                    $docketRecepients[] = array(
                        'id' => $companys->userInfo->id,
                        'name' => $companys->userInfo->first_name . ' ' . $companys->userInfo->last_name,
                        'company' => $companys->companyInfo->name,
                        'type' => 1,
                    );
                }
            }

        }




        $emailRecepients = array();
        $emailClient          =   Email_Client::where("company_id",Session::get('company_id'))->get();
        foreach ($emailClient as $emailClients ){
            $emailRecepients[] = array(
                'id'=>$emailClients->emailUser->id,
                'name'=>$emailClients->emailUser->email,
                'company' => 'Email Client',
                'type'=>2,
            );
        }



        $receiverDetail = array();
        foreach ($docketRecepients as $datas){
            $receiverDetail[$datas['company']][]= array(
                'id'=>$datas['id'],
                'name'=>$datas['name'],
                'type'=>$datas['type'],
            ) ;

        }

        $emailRecepientsDetail = array();
        foreach ($emailRecepients as $datas){
            $emailRecepientsDetail[$datas['company']][]= array(
                'id'=>$datas['id'],
                'name'=>$datas['name'],
                'type'=>$datas['type'],
            ) ;

        }



        return view('dashboard.company.docketManager.designDocket', compact('totalAssign','tempDocket','tempDocketFields', 'docketUsedByAdmin','docketUsedByEmployee', 'employeeData', 'companyAdminData', 'employees','docketSetting','docketFields','docketDocument','attachedDocument','docketPrefillerValue', 'themes','receiverDetail','emailRecepientsDetail','finalPrefillerView','isDeletedShow'));
    }

    //public

    public function designMobileViewDocket($id){
        $tempDocketFields=  DocketField::where('docket_id',$id)->orderBy('order','asc')->get();
        return view('dashboard.company.docketManager.mobileView', compact('tempDocketFields'));

    }

    public function docketInvoiceableUpdate(Request $request){
        $this->validate($request,['invoiceable'   => 'required|Int','docketId'   => 'required']);

        $docketInfo         =   Docket::where('id',$request->docketId)->firstOrFail();
        if($docketInfo->company_id == Session::get('company_id')) {
            $docketInfo->invoiceable   =    $request->invoiceable;
            $docketInfo->save();
            echo($docketInfo->invoiceable);
        }else{
            echo('Invalid attempt!');
        }
    }


    public function docketTimerAttachedUpdate(Request $request){
        $this->validate($request,['timer_attachement'   => 'required|Int','docketId'   => 'required']);
        $docketInfo         =   Docket::where('id',$request->docketId)->firstOrFail();
        if($docketInfo->company_id == Session::get('company_id')) {
            $docketInfo->timer_attachement   =    $request->timer_attachement;
            $docketInfo->save();
            echo($docketInfo->timer_attachement);
        }else{
            echo('Invalid attempt!');
        }
    }

    public function docketInvoiceFiled(Request $request){
        $this->validate($request,['data'   => 'required|Int','docketFieldId'   => 'required']);

        $docketFieldQuery         =   DocketField::where('id',$request->docketFieldId)->withTrashed();
        if($docketFieldQuery->count()!=0){
            $docketFieldInfo    =   $docketFieldQuery->firstOrFail();
            if($docketFieldInfo->docketInfo->company_id == Session::get('company_id')) {
                if($docketFieldInfo->docketInfo->invoiceable==1){
                    if($request->data==1){
                        if(DocketInvoiceField::where('docket_field_id',$request->docketFieldId)->count()==0){
                            $docketInvoiceFiled     =    new DocketInvoiceField();
                            $docketInvoiceFiled->docket_field_id    =   $request->docketFieldId;
                            $docketInvoiceFiled->docket_id   =  $docketFieldInfo->docketInfo->id;
                            $docketInvoiceFiled->save();
                        }
                    }else{
                        DocketInvoiceField::where('docket_field_id',$request->docketFieldId)->delete();
                    }
                }else{
                    echo('Invalid attempt!');
                }
            }else{
                echo('Invalid attempt!');
            }
        }else{
            echo('Invalid attempt!');
        }
    }



    public function docketPreviewFiled(Request $request){
        $this->validate($request,['data'   => 'required|Int','docketFieldId'   => 'required','order'   => 'required']);

        $docketFieldQuery         =   DocketField::where('id',$request->docketFieldId)->withTrashed();
        if($docketFieldQuery->count()!=0){
            $docketFieldInfo    =   $docketFieldQuery->firstOrFail();
            if($docketFieldInfo->docketInfo->company_id == Session::get('company_id')) {
                if($request->data==1){
                    if(DocketPreviewField::where('docket_field_id',$request->docketFieldId)->count()==0){
                        $docketPreviewFiled     =    new DocketPreviewField();
                        $docketPreviewFiled->docket_field_id    =   $request->docketFieldId;
                        $docketPreviewFiled->order    =   $docketFieldInfo->order;
                        $docketPreviewFiled->docket_id   =  $docketFieldInfo->docketInfo->id;
                        $docketPreviewFiled->save();
                    }
                }else{
                    DocketPreviewField::where('docket_field_id',$request->docketFieldId)->delete();
                }
            } else{
                echo('Invalid attempt!');
            }
        }else{
            echo('Invalid attempt!');
        }
    }

    public function docketRequiredField(Request $request){
        $this->validate($request,['data'   => 'required|Int','requiredDocketFieldId'   => 'required']);
        $docketField = DocketField::where('id',$request->requiredDocketFieldId)->withTrashed()->firstOrFail();
        $docketField->required = $request->data;
        $docketField->save();

    }


    public function docketSendCopy(Request $request){
        $this->validate($request,['data'   => 'required|Int','requiredDocketFieldId'   => 'required']);
        $docketField = DocketField::where('id',$request->requiredDocketFieldId)->withTrashed()->firstOrFail();
        $docketField->send_copy_docket = $request->data;
        $docketField->save();
    }



    public function expnanationTypeFieldId(Request $request){
        $this->validate($request,['data'   => 'required|Int','expnanationTypeFieldId'   => 'required']);
        $docketField = DocketManualTimerBreak::where('id',$request->expnanationTypeFieldId)->firstOrFail();
        $docketField->explanation = $request->data;
        $docketField->save();
    }

    public function docketFieldUpdatePosition(Request $request, $tempDocketId){
        $this->validate($request,['param'   => 'required']);
        $tempDocket     =   Docket::where('id',$tempDocketId)->firstOrFail();

        if(Company::where('id',$tempDocket->company_id)->first()->user_id==Auth::user()->id || Employee::where('company_id',$tempDocket->company_id)->where('user_id',Auth::user()-id)->count()>0){
            for($i=0;$i<count($request->param);$i++):
                DocketField::where('id',$request->param[$i])->withTrashed()->update(['order'=>$i+1]);
            endfor;
        }
        else {
            echo "Unauthorized access!";
        }
    }

    public function docketFieldLabelUpdate(Request $request){
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        $tempDocketId   =   DocketField::where('id',$request->pk)->withTrashed()->firstOrFail();

        $tempDocket     =   Docket::where('id',$tempDocketId->docket_id)->firstOrFail();

        if($tempDocket->company_id==Session::get('company_id')){
            DocketField::where('id',$request->pk)->withTrashed()->update(['label'  => $request->value]);
            Docket::where('id',$tempDocketId->docket_id)->update(['updated_at'=>Carbon::now()]);
        }else{
            echo "<script>alert('Invalid attempt!')</script>";
        }
    }

    public function docketFieldUnitFieldLabelUpdate(Request $request){
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        $tempDocketUnitRate   =   DocketUnitRate::where('id',$request->pk)->firstOrFail();

        $tempDocket     =   Docket::where('id',$tempDocketUnitRate->docketFieldInfo->docket_id)->firstOrFail();

        if($tempDocket->company_id==Session::get('company_id')){
            DocketUnitRate::where('id',$request->pk)->update(['label'  => $request->value]);
        }else{
            echo "<script>alert('Invalid attempt!')</script>";
        }
    }

    public function docketFieldManualTimerLabelUpdate(Request $request){
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        $tempDocketUnitRate   =   DocketManualTimer::where('id',$request->pk)->firstOrFail();

        $tempDocket     =   Docket::where('id',$tempDocketUnitRate->docketFieldInfo->docket_id)->firstOrFail();

        if($tempDocket->company_id==Session::get('company_id')){
            DocketManualTimer::where('id',$request->pk)->update(['label'  => $request->value]);
        }else{
            echo "<script>alert('Invalid attempt!')</script>";
        }
    }

    public function docketFieldManualTimerBreakLabelUpdate(Request $request){
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        $tempDocketUnitRate   =   DocketManualTimerBreak::where('id',$request->pk)->firstOrFail();

        $tempDocket     =   Docket::where('id',$tempDocketUnitRate->docketFieldInfo->docket_id)->firstOrFail();

        if($tempDocket->company_id==Session::get('company_id')){
            DocketManualTimerBreak::where('id',$request->pk)->update(['label'  => $request->value]);
        }else{
            echo "<script>alert('Invalid attempt!')</script>";
        }
    }


    public function docketYesNoFieldLabelUpdate(Request $request){
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        $tempDocketYesNoFields   =   YesNoFields::where('id',$request->pk)->firstOrFail();

        $tempDocket     =   Docket::where('id',$tempDocketYesNoFields->docketFieldInfo->docket_id)->firstOrFail();

        if($tempDocket->company_id==Session::get('company_id')){
            YesNoFields::where('id',$request->pk)->update(['label'  => $request->value]);
        }else{
            echo "<script>alert('Invalid attempt!')</script>";
        }
    }

    public function addDocketField(Request $request, $tempDocketId){
        $this->validate($request,['fieldType'   => 'required']);
        $tempDocket     =   Docket::where('id',$tempDocketId)->firstOrFail();
        if($tempDocket->company_id==Session::get('company_id')) {
            $order  =   DocketField::where('docket_id',$tempDocketId)->withTrashed()->count();

            $fieldDetails   =   DocketFiledCategory::where('id',$request->fieldType)->firstOrFail();
            if (DocketField::where('docket_id',$tempDocketId)->where('docket_field_category_id',13)->count()==1 && $request->fieldType==13):
                echo "Invalid attempt! Only one 'Footer field' can be added per template";
            elseif(DocketField::where('docket_id',$tempDocketId)->where('docket_field_category_id',28)->count()==1 && $request->fieldType==28):
                echo "Invalid attempt! Only one 'Folder field' can be added per template";
            else:
            $newField               =   new DocketField();
            $newField->docket_id    =   $tempDocketId;
            $newField->docket_field_category_id =   $request->fieldType;
            $newField->required =   1;
            $newField->order                    =   $order+1;
            $newField->label                    =   $fieldDetails->title;
            if ($newField->save()){
                $tempDocket     =   Docket::where('id',$tempDocketId)->update(['updated_at'=>Carbon::now()]);
            }



            //check unit rate field
            if($newField->docket_field_category_id == 7){
                DocketUnitRate::insert([
                    ['docket_field_id'  =>  $newField->id, 'type'  =>  1,  'label'  =>  'Per Unit Rate'],
                    ['docket_field_id'  =>  $newField->id, 'type'  =>  2, 'label'  =>  'Total Unit']]);
            }
            if($newField->docket_field_category_id == 18){
                    YesNoFields::insert([
                        ['docket_field_id'  =>  $newField->id, 'type'  =>  0, 'label'  =>  'No','colour'=>'#dd0006','icon_image'=>'assets/yesnonaimage/close.png' ,'label_type'=>'0'],
                        ['docket_field_id'  =>  $newField->id, 'type'  =>  1, 'label'  =>  'Yes','colour'=>'#009688','icon_image'=>'assets/yesnonaimage/check.png','label_type'=>'0'],
                        ['docket_field_id'  =>  $newField->id, 'type'  =>  2, 'label'  =>  'N/a','colour'=>'#dd0006','icon_image'=>'assets/yesnonaimage/na.png','label_type'=>'0']
                    ]);
                }
            if ($newField->docket_field_category_id == 20){
                    DocketManualTimer::insert([
                        ['docket_field_id'  =>  $newField->id, 'type'  =>  1,  'label'  =>  'Form'],
                        ['docket_field_id'  =>  $newField->id, 'type'  =>  2, 'label'  =>  'To']]);

                    DocketManualTimerBreak::insert([
                        ['docket_field_id'  =>  $newField->id,  'label'  =>  'Total Break','explanation'=>1,'type' =>'3']]);

            }

            if ($newField->docket_field_category_id == 3){
                DocketFieldNumber::insert([
                    ['docket_field_id'  =>  $newField->id],

                ]);

            }

            return $this->defaultDocketElementTemplate($newField->id, $tempDocketId);
            endif;
        }else{
            echo "<script>alert('Invalid attempt!')</script>";
        }
    }

    public function deleteDocketField(Request $request, $tempDocketId){

        $this->validate($request,['fieldId'   => 'required']);
        $tempDocket     =   Docket::where('id',$tempDocketId)->firstOrFail();

        if($tempDocket->company_id==Session::get('company_id')) {
            $docketFieldQuery = DocketField::where('id',$request->fieldId)->where('docket_id',$tempDocketId);
            //dd($docketFieldQuery->first());
            if($docketFieldQuery->count()==1){
                if(EmailSentDocketValue::where('docket_field_id',$request->fieldId)->count()==0 && SentDocketsValue::where('docket_field_id',$request->fieldId)->count()==0){
                    if (DocketTimesheet::where('docket_id',$tempDocketId)->where('docket_field_id',$request->fieldId)->count() == 0){
                        DocketUnitRate::where('docket_field_id',$docketFieldQuery->first()->id)->delete();
                        DocketTallyableUnitRate::where('docket_field_id',$docketFieldQuery->first()->id)->delete();

                        $subdocket=YesNoFields::where('docket_field_id',$docketFieldQuery->first()->id)->get();
                        $deleteYesNoDocketField=array();
                        foreach ($subdocket as $row){
                            $deleteYesNoDocketField[] = $row->id;
                        }

                        DocketManualTimerBreak::where('docket_field_id',$docketFieldQuery->first()->id)->delete();
                        DocketManualTimer::where('docket_field_id',$docketFieldQuery->first()->id)->delete();
                        YesNoDocketsField::whereIn('yes_no_field_id',$deleteYesNoDocketField)->delete();
                        YesNoFields::where('docket_field_id',$docketFieldQuery->first()->id)->delete();
                        DocketFieldDateOption::where('docket_field_id',$request->fieldId)->delete();
                        DocketFieldSignatureOption::where('docket_field_id',$request->fieldId)->delete();
                        DocketFieldFooter::where('field_id',$request->fieldId)->where('docket_id',$tempDocketId)->delete();
                        DocketAttachments::where('docket_field_id',$request->fieldId)->delete();
                        DocketFieldNumber::where('docket_field_id',$request->fieldId)->delete();
                        DocketFiledPreFiller::where('docket_field_id',$request->fieldId)->delete();
                        DocketPreviewField::where('docket_field_id',$request->fieldId)->delete();
                        ExportMapping::where('docket_field_id',$request->fieldId)->delete();
                        DocketConstantField::where('docket_field_id',$request->fieldId)->delete();
                        if($docketFieldQuery->first()->docket_field_category_id == 22){
                            $docketGridField = DocketFieldGrid::where('docket_field_id', $request->fieldId)->get();
                            foreach ($docketGridField as $docketGridFields){
                                GridFieldFormula::where('docket_field_grid_id',$docketGridFields->id)->delete();
                            }
                            foreach ($docketGridField as $docketGridFields){
                                DocketGridPrefiller::where('docket_field_grid_id',$docketGridFields->id)->delete();
                            }
                            DocketFieldGrid::where('docket_field_id', $request->fieldId)->delete();
                            DocketField::where('id',$request->fieldId)->where('docket_id',$tempDocketId)->delete();
                        }

                        DocketField::where('id',$request->fieldId)->where('docket_id',$tempDocketId)->delete();
                        Docket::where('id',$tempDocketId)->update(['updated_at'=>Carbon::now()]);

                    }else{
                        echo "Invalid attempt! This docket field is already used in TimeSheet. You can not delete it. ";
                    }



                }else{

                     DocketField::destroy($request->fieldId);
//                    echo "Invalid attempt! This docket field is already used in some dockets. You can not delete it. ";


                }
            }else{
                echo "Invalid attempt!";
            }
        }else{
            echo "Invalid attempt!";
        }
    }



//    public function saveDocket($key){
//        $tempDocket   =   TempDocket::where('id',$key)->firstOrFail();
//
//        if($tempDocket->company_id==Session::get('company_id')){
//            // save temp docket to docket table
//            $tempDocket     =   TempDocket::where('id',$key)->firstOrFail();
//            $docket     =   new Docket();
//            $docket->title  =    $tempDocket->title;
//            $docket->company_id =   $tempDocket->company_id;
//            $docket->user_id    =   $tempDocket->user_id;
//            $docket->save();
//
//            $temDocketField =  TempDocketField::where('docket_id',$key)->delete();
//            $tem
//            return redirect()->route('companyDocketBookManager');
//        } else {
//            echo "<script>alert('Invalid attempt!')</script>";
//            return redirect()->back();
//        }
//    }

    public function defaultDocketElementTemplate($fieldType,$tempDocketId){
        $item   =   DocketField::where('id',$fieldType)->withTrashed()->firstOrFail();
        $tempDocket =   Docket::where('id',$tempDocketId)->firstOrFail();
        $tempDocketFields=  DocketField::where('docket_id',$tempDocketId)->withTrashed()->orderBy('id','asc')->get();
        $docketSetting =   DocketFooter::where('company_id',Session::get('company_id'))->orderby ('id','desc')->get();
        $docketFields= DocketField::orderby ('id','desc')->withTrashed()->first();
        $docketDocument=DocketDocument::where('company_id',Session::get('company_id'))->orderby ('id','desc')->get();
        $attachedDocument=DocketAttachments::orderby ('id','desc')->get();
        if($docketFields->docket_field_category_id==13) {
            return view('dashboard.company.docketManager.footerElementTemplate', compact('item', 'tempDocket', 'tempDocketFields', 'docketSetting', 'docketFields','docketDocument','attachedDocument'));
        }else{
                return view('dashboard.company.docketManager.elementTemplate', compact('item', 'tempDocket', 'tempDocketFields', 'docketSetting', 'docketFields','docketDocument','attachedDocument'));
            }
        }


    public function insertDefaultDocketTemplate($tempDocketId){
        $tempDocketFields   =   DocketField::insert([
//            ['docket_id'    =>  $tempDocketId,
//                'docket_field_category_id' =>  '1',
//                'order' =>  1,
//                'label' => 'Short Text'],
//            ['docket_id'    =>  $tempDocketId,
//                'docket_field_category_id' =>  '2',
//                'order' =>  2,
//                'label' => 'Long Text'],
//            ['docket_id'    =>  $tempDocketId,
//                'docket_field_category_id' =>  '3',
//                'order' =>  3,
//                'label' => 'Number'],
//            ['docket_id'    =>  $tempDocketId,
//                'docket_field_category_id' =>  '4',
//                'order' =>  4,
//                'label' => 'Location'],
//            ['docket_id'    =>  $tempDocketId,
//                'docket_field_category_id' =>  '5',
//                'order' =>  5,
//                'label' => 'Images'],
            ['docket_id'    =>  $tempDocketId,
                'docket_field_category_id' =>  '6',
                'order' =>  1,
                'required'=> 1,
                'label' => 'Date']
//            ['docket_id'    =>  $tempDocketId,
//                'docket_field_category_id' =>  '7',
//                'order' =>  7,
//                'label' => 'Unit Rate'],
//            ['docket_id'    =>  $tempDocketId,
//                'docket_field_category_id' =>  '8',
//                'order'                     =>  8,
//                'label'                     => 'Check Box'],
//            ['docket_id'                =>  $tempDocketId,
//                'docket_field_category_id'  =>  '9',
//                'order'                     =>  9,
//                'label'                     =>  'Signature']
        ]);

//        $rateField  =    DocketField::where('docket_id',$tempDocketId)->where('docket_field_category_id',7)->first();

//        DocketUnitRate::insert([
//            ['docket_field_id'  =>  $rateField->id, 'type'  =>  1, 'label'  =>  'Per Unit Rate'],
//            ['docket_field_id'  =>  $rateField->id, 'type'  =>  2, 'label'  =>  'Total Unit']]);
        return $tempDocketFields;
    }



    public function insertDefaultTimesheetDocketTemplate($tempDocketId){
        $tempDocketFields   =   DocketField::insert([
            ['docket_id'    =>  $tempDocketId,
                'docket_field_category_id' =>  '6',
                'order' =>  1,
                'required'=> 1,
                'label' => 'Date'],
            ['docket_id'    =>  $tempDocketId,
                'docket_field_category_id' =>  '20',
                'order' =>  2,
                'required'=> 1,
                'label' => 'Manual Timer'],


        ]);
        $manualTimerField  =    DocketField::where('docket_id',$tempDocketId)->where('docket_field_category_id',20)->first();

        DocketManualTimer::insert([
            ['docket_field_id'  =>  $manualTimerField->id, 'type'  =>  1,  'label'  =>  'From'],
            ['docket_field_id'  =>  $manualTimerField->id, 'type'  =>  2, 'label'  =>  'To']]);

        DocketManualTimerBreak::insert([
            ['docket_field_id'  =>  $manualTimerField->id,  'label'  =>  'Total Break','explanation'=>1,'type' =>'3']]);

        //        $rateField  =    DocketField::where('docket_id',$tempDocketId)->where('docket_field_category_id',7)->first();

//        DocketUnitRate::insert([
//            ['docket_field_id'  =>  $rateField->id, 'type'  =>  1, 'label'  =>  'Per Unit Rate'],
//            ['docket_field_id'  =>  $rateField->id, 'type'  =>  2, 'label'  =>  'Total Unit']]);
        return $tempDocketFields;
    }



    //assign docket to employee
    public function  companyAssignDockets(){

        $employeesQuery   =   Employee::where('company_id',Session::get('company_id'))->get();
        $companyAdmin   =    Company::where('id',Session::get('company_id'))->first();
        $employees[]  = array('id'    =>  $companyAdmin->user_id, 'name'  =>  $companyAdmin->userInfo->first_name. " ".$companyAdmin->userInfo->last_name);
        foreach ($employeesQuery as $row) {
            if(@$row->userInfo->isActive == 1) {
                $employees[] = array( 'id' => $row->user_id, 'name' => $row->userInfo->first_name . " " . $row->userInfo->last_name);
            }
        }

        $templates = Docket::where("company_id", Session::get('company_id'))->where('is_archive',0)->orderBy('title', 'asc')->get();

        $employeesID = Employee::where('company_id', Session::get('company_id'))->pluck('user_id');
        $employeesID->push($companyAdmin->user_id);

        $assignedTemplate = AssignedDocket::whereIn('user_id', $employeesID)->orWhere('user_id', $companyAdmin->user_id)->with('userInfo','docketInfo','assignedBy')->orderBY('created_at')->paginate(10);

        return view('dashboard.company.docketManager.assignDocket.index', compact('employees', 'templates', 'assignedTemplate'));
    }


    public function  companyAssignTask(){

        $employeesQuery   =   Employee::where('company_id',Session::get('company_id'))->get();
        $companyAdmin   =    Company::where('id',Session::get('company_id'))->first();
        $employees[]  = array('id'    =>  $companyAdmin->user_id, 'name'  =>  $companyAdmin->userInfo->first_name. " ".$companyAdmin->userInfo->last_name);
        foreach ($employeesQuery as $row) {
            if(@$row->userInfo->isActive == 1) {
                $employees[] = array( 'id' => $row->user_id, 'name' => $row->userInfo->first_name . " " . $row->userInfo->last_name, 'image' => $row->userInfo->image);
            }
        }
        $templates = Docket::where("company_id", Session::get('company_id'))->where('is_archive',0)->select('id','title')->orderBy('title', 'asc')->get();

        $employeesID = Employee::where('company_id', Session::get('company_id'))->pluck('user_id');
        $employeesID->push($companyAdmin->user_id);

        $machines = Machine::where([['company_id',auth()->user()->companyInfo->id]])->get();

        $assignDocketUser = AssignDocketUser::whereIn('assigned_by',$employeesID)->with('assignDocketUserConnection.user','assignDocketUserConnection.machine')->get();
        $calender_data = collect();
        foreach($assignDocketUser as $value){
            $temp = [];
            $temp['id'] = $value->id;
            $temp['calendarId'] = '1';
            $temp['title'] = $value->name;
            $temp['category'] = 'time';
            $temp['start'] = $value->from_date;
            $temp['end'] = $value->to_date;
            $temp['bgColor'] = $value->bgcolor;
            $temp['body'] = 'body';
            $temp['state'] = $value->status;
            $machineDetail = [];
            $userDetail = [];
            foreach($value->assignDocketUserConnection as $dataValue){
                if($dataValue->machine){
                    $tempMachine['name'] =  $dataValue->machine->name;
                    $tempMachine['image'] =  $dataValue->machine->image;
                    array_push($machineDetail,$tempMachine);
                }
                if($dataValue->user){
                    $tempUser['name'] =  $dataValue->user->first_name . ' ' . $dataValue->user->last_name;
                    $tempUser['image'] =  $dataValue->user->image;
                    array_push($userDetail,$tempUser);
                }
            }
            $machineList = $value->assignDocketUserConnection->groupBy('machine_id')->keys()->filter(function ($value, $key) {
                if($value){
                    return $value;
                }
            })->toArray();
            
            $employeeList = $value->assignDocketUserConnection->groupBy('user_id')->keys()->filter(function ($value, $key) {
                if($value){
                    return $value;
                }
            })->toArray();
            $docketTemplate = $value->assignDocketUserConnection->groupBy('docket_id')->keys()->filter(function ($value, $key) {
                if($value){
                    return $value;
                }
            })->toArray();
            $temp['raw'] = [
                'comment' => $value->comment,
                'machineList' => array_values($machineList),
                'employeeList' => array_values($employeeList),
                'docketTemplate' => array_values($docketTemplate),
                'machineDetail' => array_map("unserialize", array_unique(array_map("serialize", $machineDetail))),
                'userDetail' => array_map("unserialize", array_unique(array_map("serialize", $userDetail)))
            ];
            $calender_data->push($temp);
        }
        return view('dashboard.company.docketManager.assignDocket.assign', compact('employees', 'templates','machines','calender_data'));
    }


    public function storeAssignDocket(Request $request){
        $this->validate($request,['employeeId'   => 'required','templateId'   => 'required']);
        $docketInfo         =   Docket::where('id',$request->templateId)->firstOrFail();
        if($docketInfo->company_id == Session::get('company_id')){
            if(count($request->employeeId)>0) {
                foreach ($request->employeeId as $key => $assignDockets) {
                    if (AssignedDocket::where('user_id', $assignDockets)->where('docket_id', $request->templateId)->count() == 0) {
                        $assignDocket = new AssignedDocket();
                        $assignDocket->user_id = $assignDockets;
                        $assignDocket->assigned_by = Auth::user()->id;
                        $assignDocket->docket_id = $request->templateId;
                        $assignDocket->assign_type = $request->assignType[$key];
                        $assignDocket->date_range =  ($request->assignType[$key] == 1) ? $request->daterange[$key] : null;
                        $assignDocket->save();
                    }
                }
                flash('Docket template assigned successfully.', 'success');
                return redirect()->route('companyAssignDockets');
            }
        } else {
            flash('Invalid attempt!','waring');
            return redirect()->route('companyAssignDockets');
        }

    }

    public function viewAssignDocket($id){
        $assignDocket = AssignedDocket::where('id',$id)->firstOrFail();
        return response()->json(['status'=>true,'assignDocket'=>$assignDocket]);
    }

    public function searchAssignDocket(Request $request){
        $employeesQuery   =   Employee::where('company_id',Session::get('company_id'))->get();
        $companyAdmin   =    Company::where('id',Session::get('company_id'))->first();
        $employees[]  = array('id'    =>  $companyAdmin->user_id, 'name'  =>  $companyAdmin->userInfo->first_name. " ".$companyAdmin->userInfo->last_name);
        foreach ($employeesQuery as $row) {
            if(@$row->userInfo->isActive == 1) {
                $employees[] = array( 'id' => $row->user_id, 'name' => $row->userInfo->first_name . " " . $row->userInfo->last_name);
            }
        }

        $templates = Docket::where("company_id", Session::get('company_id'))->where('is_archive',0)->orderBy('title', 'asc')->get();

        $employeesID = Employee::where('company_id', Session::get('company_id'))->pluck('user_id');

        $assignedTemplate = AssignedDocket::whereIn('assigned_dockets.user_id', $employeesID)
                                            ->join('dockets','dockets.id','assigned_dockets.docket_id')
                                            ->join('users','users.id','assigned_dockets.user_id')
                                            ->select('assigned_dockets.id','assigned_dockets.user_id','assigned_dockets.docket_id',
                                            'assigned_dockets.assign_type','assigned_dockets.date_range','assigned_dockets.assigned_by',
                                            'assigned_dockets.created_at','assigned_dockets.updated_at')
                                            ->where(DB::raw("CONCAT(dockets.title, ' ', users.first_name,' ', users.last_name)"), 'LIKE', "%".$request->docket_name."%")
                                            ->with('userInfo','docketInfo','assignedBy')
                                            ->orderBY('assigned_dockets.created_at')
                                            ->paginate($request->count);

        $count = $request->count;
        $docket_name = $request->docket_name;
        return view('dashboard.company.docketManager.assignDocket.index', compact('employees', 'templates', 'assignedTemplate','count','docket_name'));
    }

    public function updateAssignDocket(Request $request){
        try{
            $this->validate($request,['employeeId'   => 'required','templateId'   => 'required']);
            if(count($request->employeeId)>0) {
                foreach ($request->employeeId as $key => $assignDockets) {
                    $assignDocket = AssignedDocket::find($request->id);
                    $assignDocket->user_id = $assignDockets;
                    $assignDocket->assigned_by = Auth::user()->id;
                    $assignDocket->docket_id = $request->templateId;
                    $assignDocket->assign_type = $request->assignType[$key];
                    $assignDocket->date_range =  ($request->assignType[$key] == 1) ? $request->daterange[$key] : null;
                    $assignDocket->save();
                }
                flash('Docket template updated successfully.', 'success');
                return redirect()->route('companyAssignDockets');
            }
            flash('Invalid attempt!','waring');
            return redirect()->route('companyAssignDockets');
        }catch(\Exception $ex){
            flash('Invalid attempt!','waring');
            return redirect()->route('companyAssignDockets');
        }
    }

    public function deleteAssignDocket(Request $request){
//        $ownershipStatus    =    false;
        $assignDocket   =    AssignedDocket::where('id',$request->id)->firstOrFail();
        $company = Company::where('id',Session::get('company_id'))->pluck('user_id')->toArray();
        $employee = Employee::where('company_id',Session::get('company_id'))->pluck('user_id')->toArray();
        $totalUser = array_merge($company,$employee);

        if (in_array($assignDocket->assigned_by,$totalUser) && in_array($assignDocket->user_id,$totalUser)){
            AssignedDocket::where('id',$request->id)->delete();
            flash('Docket Template access removed successfully.','success');
            return redirect()->route('companyAssignDockets');
        }else{
            flash('Invalid Action','warning');
            return redirect()->route('companyAssignDockets');
        }

//        $companyDetailsByAssignerQuery   =       Company::where('user_id',$assignDocket->assigned_by);
//        if($companyDetailsByAssignerQuery->count()>0){
//            if(Session::get('company_id') == $companyDetailsByAssignerQuery->first()->id){
//                $ownershipStatus    =    true;
//            }
//        }else{
//            $companyDetailsByEmployeeQuery  =    Employee::where('user_id',$assignDocket->assigned_by);
//            if($companyDetailsByEmployeeQuery->count()>0){
//                if(Session::get('company_id') == $companyDetailsByEmployeeQuery->first()->id){
//                    $ownershipStatus    =    true;
//                }
//            }
//        }

        //check ownership condition
//
//        if($ownershipStatus){
//            AssignedDocket::where('id',$request->id)->delete();
//            flash('Docket Template access removed successfully.','success');
//            return redirect()->route('companyAssignDockets');
//        }else{
//            flash('Invalid Action','warning');
//            return redirect()->route('companyAssignDockets');
//        }
    }


    //***************************Docket Invoice Section************************************//
    public function viewEmailedInvoice($id){
        $sentInvoice =   EmailSentInvoice::where('id',$id)->first();
        if ($sentInvoice->theme_document_id == 0){
            $data= array();
            $data["full_name"]= $sentInvoice->receiverInfo->email;
            $data["company_name"]= $sentInvoice->receiver_company_name;
            $data["address"]= $sentInvoice->receiver_company_address;
            $sentInvoiceValueQuery    =    EmailSentInvoiceValue::where('email_sent_invoice_id',$id)->get();
            $sentInvoiceValue    = array();
            foreach ($sentInvoiceValueQuery as $row){
                $subFiled   =   [];
                $sentInvoiceValue[]    =     array('id' => $row->id,
                    'invoice_field_category_id'  =>  $row->invoiceFieldInfo->invoice_field_category_id,
                    'invoice_field_category' =>  $row->label,
                    'label' => $row->label,
                    'value' => $row->value,
                    'subFiled' => $subFiled);
            }

            $invoice     =     EmailSentInvoice::where('id',$id)->first();

            $companyDetails =   Company::where('id',$invoice->company_id)->first();


            $invoiceDescription     =    EmailSentInvoiceDescription::where('email_sent_invoice_id',$invoice->id)->get();

            $invoiceSetting =   array();
            //check invoice payment info
            if(EmailSentInvoicePaymentDetail::where('email_sent_invoice_id',$id)->count()==1){
                $invoiceSetting =   EmailSentInvoicePaymentDetail::where('email_sent_invoice_id',$id)->first();
            }

            return view('dashboard.company.invoiceManager.invoices.viewEmailedInvoice',compact('sentInvoiceValue','companyDetails','invoice','invoiceDescription','invoiceSetting','sentInvoice','data'));
        }else{
            $data= array();
            $data["full_name"]= $sentInvoice->receiverInfo->email;
            $data["company_name"]= $sentInvoice->receiver_company_name;
            $data["address"]= $sentInvoice->receiver_company_address;
            $theme = DocumentTheme::where('id', $sentInvoice->theme_document_id)->first();
            $sentInvoiceValueQuery    =    EmailSentInvoiceValue::where('email_sent_invoice_id',$id)->get();
            $sentInvoiceValue    = array();
            foreach ($sentInvoiceValueQuery as $row){
                $subFiled   =   [];
                $sentInvoiceValue[]    =     array('id' => $row->id,
                    'invoice_field_category_id'  =>  $row->invoiceFieldInfo->invoice_field_category_id,
                    'invoice_field_category' =>  $row->label,
                    'label' => $row->label,
                    'value' => $row->value,
                    'subFiled' => $subFiled);
            }
            $invoice     =     EmailSentInvoice::where('id',$id)->first();
            $companyDetails =   Company::where('id',$invoice->company_id)->first();
            $invoiceDescription     =    EmailSentInvoiceDescription::where('email_sent_invoice_id',$invoice->id)->get();
            $invoiceSetting =   array();
            //check invoice payment info
            if(EmailSentInvoicePaymentDetail::where('email_sent_invoice_id',$id)->count()==1){
                $invoiceSetting =   EmailSentInvoicePaymentDetail::where('email_sent_invoice_id',$id)->first();
            }
            return view('dashboard/company/themes/'.$theme->slug.'/index',compact('sentInvoiceValue','companyDetails','invoice','invoiceDescription','invoiceSetting','sentInvoice','data'));
        }

    }
    public function companyInvoiceView($id){
        $sentInvoice     =   SentInvoice::findOrFail($id);
        if ($sentInvoice->theme_document_id == 0){
            //check is employee super admin or not
            $data= array();
            $data["full_name"]= $sentInvoice->receiverUserInfo->first_name." ".$sentInvoice->receiverUserInfo->last_name;
            $data["company_name"]= $sentInvoice->receiverCompanyInfo->name;
            $data["address"]= $sentInvoice->receiverCompanyInfo->address;

            if(Employee::where('user_id',$sentInvoice->user_id)->count()>0)
                $senderCompanyId   =   Employee::where('user_id',$sentInvoice->user_id)->first()->company_id;
            else
                $senderCompanyId    =   Company::where('user_id',$sentInvoice->user_id)->first()->id;

            if($sentInvoice->company_id==Session::get('company_id') || $sentInvoice->receiver_company_id == Session::get('company_id')){
                $invoiceDescription     =    SentInvoiceDescription::where('sent_invoice_id',$sentInvoice->id)->get();
                $sentInvoiceValueQuery    =    SentInvoiceValue::where('sent_invoice_id',$id)->get();
                $sentInvoiceValue    = array();
                foreach ($sentInvoiceValueQuery as $row){
                    $subFiled   =   [];
                    $sentInvoiceValue[]    =     array('id' => $row->id,
                        'invoice_field_category_id'  =>  $row->invoiceFieldInfo->invoice_field_category_id,
                        'invoice_field_category' =>  $row->label,
                        'label' => $row->label,
                        'value' => $row->value,
                        'subFiled' => $subFiled);
                }

                $invoiceSetting =   array();
                //check invoice payment info
                if(SentInvoicePaymentDetail::where('sent_invoice_id',$id)->count()==1){
                    $invoiceSetting =   SentInvoicePaymentDetail::where('sent_invoice_id',$id)->first();
                }
                $invoices   =   Invoice::where('company_id',Session::get('company_id'))->orderBy('id','desc')->get();
                return view('dashboard.company.invoiceManager.invoices.view',compact('invoiceSetting','sentInvoice', 'invoiceDescription', 'sentInvoiceValue','invoices','data'));
            }else {
                flash('Invalid attempt ! Please try with valid action.','warning');
                return redirect()->back();
            }
        }else{
            $data= array();
            $data["full_name"]= $sentInvoice->receiverUserInfo->first_name." ".$sentInvoice->receiverUserInfo->last_name;
            $data["company_name"]= $sentInvoice->receiverCompanyInfo->name;
            $data["address"]= $sentInvoice->receiverCompanyInfo->address;
            $theme = DocumentTheme::where('id', $sentInvoice->theme_document_id)->first();
            //check is employee super admin or not
            if(Employee::where('user_id',$sentInvoice->user_id)->count()>0)
                $senderCompanyId   =   Employee::where('user_id',$sentInvoice->user_id)->first()->company_id;
            else
                $senderCompanyId    =   Company::where('user_id',$sentInvoice->user_id)->first()->id;

            if($sentInvoice->company_id==Session::get('company_id') || $sentInvoice->receiver_company_id == Session::get('company_id')){
                $invoiceDescription     =    SentInvoiceDescription::where('sent_invoice_id',$sentInvoice->id)->get();
                $sentInvoiceValueQuery    =    SentInvoiceValue::where('sent_invoice_id',$id)->get();
                $sentInvoiceValue    = array();
                foreach ($sentInvoiceValueQuery as $row){
                    $subFiled   =   [];
                    $sentInvoiceValue[]    =     array('id' => $row->id,
                        'invoice_field_category_id'  =>  $row->invoiceFieldInfo->invoice_field_category_id,
                        'invoice_field_category' =>  $row->label,
                        'label' => $row->label,
                        'value' => $row->value,
                        'subFiled' => $subFiled);
                }

                $invoiceSetting =   array();
                //check invoice payment info
                if(SentInvoicePaymentDetail::where('sent_invoice_id',$id)->count()==1){
                    $invoiceSetting =   SentInvoicePaymentDetail::where('sent_invoice_id',$id)->first();
                }
                $invoices   =   Invoice::where('company_id',Session::get('company_id'))->orderBy('id','desc')->get();
                return view('dashboard/company/themes/'.$theme->slug.'/index' ,compact('invoiceSetting','sentInvoice', 'invoiceDescription', 'sentInvoiceValue','invoices','data'));
            }else {
                flash('Invalid attempt ! Please try with valid action.','warning');
                return redirect()->back();
            }

        }




    }

    public function companyInvoiceFilter(Request $request){
        $clients = Client::where('company_id', Session::get('company_id'))->orWhere('requested_company_id', Session::get('company_id'))->get();
        $invoice = Invoice::where('company_id', Session::get('company_id'))->orderBy('id', 'desc')->get();
        $totalCompany = Company::where('id', '!=', Session::get('company_id'))->get();
        $sentInvoiceQuery = SentInvoice::query();

        if ($request->date) {
            if ($request->date == 1) {
                if ($request->from)
                    $sentInvoiceQuery->whereDate('created_at', '>=', Carbon::parse($request->from)->format('Y-m-d'));

                if ($request->to)
                    $sentInvoiceQuery->whereDate('created_at', '<=', Carbon::parse($request->to)->format('Y-m-d'));
            }
        }

        if ($request->invoiceTemplateId) {
        $sentInvoiceQuery->where('invoice_id', $request->invoiceTemplateId);
      }
        if($request->invoiceId) {
            $sentInvoiceQuery->where('formatted_id','like', '%' . $request->docketId . '%');
        }

        if($request->type=="sent"){
            if($request->company){
                $sentInvoiceQuery->where('receiver_company_id',$request->company);

                if($request->empolyees){
                    $sentInvoiceQuery->where('receiver_user_id',$request->empolyees);
                }
            }
            $sentInvoiceQuery->where('company_id',Session::get('company_id'))->orderBy('created_at','desc');
        }elseif($request->type=="received"){
            if($request->company){
                $sentInvoiceQuery->where('company_id',$request->company);
                if($request->empolyees){
                    $sentInvoiceQuery->where('user_id',$request->empolyees);
                }
            }
         $sentInvoiceQuery->where('receiver_company_id',Session::get('company_id'))->orderBy('created_at','desc');
        }elseif($request->type=="all"){

            if($request->company){
                $sentInvoiceQuery->where(function($query) use($request){
                    return $query->where('company_id',$request->company)->where('receiver_company_id',Session::get('company_id'));
                })->orWhere(function($query) use($request) {
                    return $query->where('company_id',Session::get('company_id'))->where('receiver_company_id',$request->company);
                });


                if($request->empolyees){
                    $sentInvoiceQuery->where('receiver_user_id',$request->empolyees)->orWhere('user_id',$request->empolyees);
                }
            }else{
                $sentInvoiceQuery->where(function($query) use($request){
                    return $query->where('company_id',Session::get('company_id'))->orWhere('receiver_company_id',Session::get('company_id'));
                });
            }

        }

//        $sentInvoiceQuery->where(function($query) use ($request){
//            return $query->where('company_id',Session::get('company_id'))->orWhere('receiver_company_id',Session::get('company_id'));
//        });

        $sentInvoice     =   $sentInvoiceQuery->get();

        $invoices   =   Invoice::where('company_id',Session::get('company_id'))->orderBy('id','desc')->get();
        return view('dashboard.company.invoiceManager.invoices.invoiceFilter',compact('sentInvoice','invoices','request','clients','totalCompany'));
    }

    //========================================invoice template======================================//
    public function companyInvoiceManager(){
        $invoice    =   Invoice::where('company_id',Session::get('company_id'))->orderBy('id','desc')->get();

        $folderData= Folder::where('company_id',Session::get('company_id'))->get();
        $treeArray = array();
        foreach ($folderData as $test) {
            $treeArray[] = array(
                'id' => $test->id,
                'parent_id' => $test->root_id,
                'name' => $test->name,
                'slug' => $test->slug,
            );
        }
        $txtTree[0]="";
        foreach($treeArray as $branch){
            if(isset($txtTree[$branch['parent_id']])) {
                $txtTree[$branch['id']] = $txtTree[$branch['parent_id']] . $branch['name'] . "/";
            }
        }

        $datas = array();
        if(@$txtTree){
            foreach ($txtTree as $key => $value){
                if($key != 0) {
                    $datas[] = array(
                        "id"=> $key,
                        "value"=>rtrim($value,'/'),
                        "space" =>str_repeat('&nbsp;', (count(explode('/',$value))-2)*3),
                        'name'=> array_slice(explode('/',$value), -2, 1)
                    );


                }
            }
        }
        $data= (new Collection($datas))->sortBy('value');
        return view('dashboard.company.invoiceManager.index',compact('invoice','data'));


    }

    public function invoiceDesignXeroSetting(){
        $invoice    =   Invoice::where('company_id',Session::get('company_id'))->orderBy('id','desc')->get();
        $xeroField = XeroField::get();

        try {
            $company = CompanyXero::where('company_id', Session::get('company_id'))->where('status',1)->first();
            $config = [
                'oauth' => [
                    'callback'         => 'https://recordtime.dev/dashboard/company/xero/taxRate',
                    'consumer_key'     =>  $company->consumer_key,
                    'consumer_secret'  =>  $company->consumer_secret,
                    'rsa_private_key'  =>  'file://'.$company->rsa_private_key,
                ],
            ];
            $config1 = [
                'oauth' => [
                    'callback'         => 'https://recordtime.dev/dashboard/company/xero/account',
                    'consumer_key'     =>  $company->consumer_key,
                    'consumer_secret'  =>  $company->consumer_secret,
                    'rsa_private_key'  =>  'file://'.$company->rsa_private_key,
                ],
            ];
            $xero = new PrivateApplication($config);
            $taxRates = $xero->load(TaxRate::class)->where('
			    Status=="' . \XeroPHP\Models\Accounting\TaxRate::TAX_STATUS_ACTIVE . '" 
			')->execute();
            $xero1 = new PrivateApplication($config1);
            $account = $xero1->load(Account::class)->where('
			    Status=="' . \XeroPHP\Models\Accounting\Account::ACCOUNT_STATUS_ACTIVE . '" 
			')->execute();
            return view('dashboard.company.invoiceManager.xero.invoiceDesignXeroSetting',compact('invoice','xeroField','taxRates','account'));
        }
        catch (\Exception $e){
            return view('dashboard.company.invoiceManager.xero.failedXeroButton');
        }
    }


    public function designInvoice($id){
        $invoice =   Invoice::where('id',$id)->firstOrFail();
        $invoiceFields  =  InvoiceField::where('invoice_id',$id)->orderBy('order','asc')->get();
        $purchased_theme_ids = ThemePurchase::where('company_id', Session::get('company_id'))->pluck('theme_id');
        $themes = DocumentTheme::where('is_active', 1)->where('paid_free', 0)->orWhereIn('id', $purchased_theme_ids)->get();;
        $companyDetails     =    Company::find(Session::get('company_id'));
        $employeesQuery   =   Employee::where('company_id',Session::get('company_id'))->get();
        $companyAdmin   =    Company::where('id',Session::get('company_id'))->first();
        $employees[]  =   array('id'    =>  $companyAdmin->user_id, 'name'  =>  $companyAdmin->userInfo->first_name. " ".$companyAdmin->userInfo->last_name);
        foreach ($employeesQuery as $row){
            $employees[]    =    array('id'    =>  @$row->user_id, 'name'  =>  @$row->userInfo->first_name. " ".@$row->userInfo->last_name);
        }
        return view('dashboard.company.invoiceManager.designInvoice', compact('invoice','invoiceFields', 'companyDetails', 'employees','themes'));
    }
    public function saveInvoiceTemplate(Request $request){
        $this->validate($request,['invoiceTitle'   => 'required']);
        if(Invoice::where('company_id',Session::get('company_id'))->where('title',$request->invoiceTitle)->count()!=0){
            flash('The title "'.$request->invoiceTitle.'" has already been taken.','warning');
            return redirect('dashboard/company/invoiceManager');
        }else {
            $tempInvoice = new Invoice();
            $tempInvoice->title = $request->invoiceTitle;
            $tempInvoice->subTitle = "";
            $tempInvoice->gst = 1;
            $tempInvoice->gst_label = "GST";
            $tempInvoice->gst_value = 10;
            $tempInvoice->user_id = Auth::user()->id;
            $tempInvoice->company_id = Session::get('company_id');
            // $tempInvoice->syn_xero = $request->syn_xero;
            if ($tempInvoice->save()){
                if ($request->syn_xero==1) {
                    $invoiceXeroSetting = new InvoiceXeroSetting();
                    $invoiceXeroSetting->invoice_id = $tempInvoice->id;
                    $invoiceXeroSetting->company_xero_id = CompanyXero::where('company_id', Session::get('company_id'))->where('status', 1)->first()->id;
                    $invoiceXeroSetting->xero_syn_invoice = $request->xero_syn_invoice;
                if ($invoiceXeroSetting->save()) {
                    if ($request->syn_xero == 1) {
                        $xeroField = XeroField::get();
                        foreach ($xeroField as $items) {
                            if ($items->id == 2) {
                                $xeroInvoiceValue = new XeroInvoiceValue();
                                $xeroInvoiceValue->xero_field_id = $items->id;
                                $xeroInvoiceValue->invoice_xero_setting_id = $invoiceXeroSetting->id;
                                $xeroInvoiceValue->value = $request->input('2');
                                $xeroInvoiceValue->save();
                            }
                            if ($items->id == 3) {
                                $xeroInvoiceValue = new XeroInvoiceValue();
                                $xeroInvoiceValue->xero_field_id = $items->id;
                                $xeroInvoiceValue->invoice_xero_setting_id = $invoiceXeroSetting->id;
                                $xeroInvoiceValue->value = $request->input('3');
                                $xeroInvoiceValue->save();
                            }
                            if ($items->id == 4) {
                                $xeroInvoiceValue = new XeroInvoiceValue();
                                $xeroInvoiceValue->xero_field_id = $items->id;
                                $xeroInvoiceValue->invoice_xero_setting_id = $invoiceXeroSetting->id;
                                $xeroInvoiceValue->value = $request->input('4');
                                $xeroInvoiceValue->save();
                            }
                            if ($items->id == 5) {
                                $xeroInvoiceValue = new XeroInvoiceValue();
                                $xeroInvoiceValue->xero_field_id = $items->id;
                                $xeroInvoiceValue->invoice_xero_setting_id = $invoiceXeroSetting->id;
                                $xeroInvoiceValue->value = $request->input('5');
                                if ($xeroInvoiceValue->save()) {
                                    $test = explode('-', $request->input('5'));
                                    Invoice::where('id', $tempInvoice->id)->update(['gst_value' => $test[1], 'gst_label' => $test[2]]);
                                }
                            }
                            if ($items->id == 6) {
                                $xeroInvoiceValue = new XeroInvoiceValue();
                                $xeroInvoiceValue->xero_field_id = $items->id;
                                $xeroInvoiceValue->invoice_xero_setting_id = $invoiceXeroSetting->id;
                                $xeroInvoiceValue->value = $request->input('6');

                                $xeroInvoiceValue->save();
                            }

                        }
                    }
                }
                }
            }




            $helpFlaginvoice =  $request->helpFlaginvoice;
            return redirect('dashboard/company/invoiceManager/designInvoice/' . $tempInvoice->id)->with(['helpFlaginvoice' => $helpFlaginvoice]);
        }
    }

    public function XeroInvoiceUpdate(Request $request){

        if(CompanyXero::where('company_id',Session::get('company_id'))->where('status',1)->count()>0){

            $xeroCompany= CompanyXero::where('company_id',Session::get('company_id'))->where('status',1)->first();
            if(InvoiceXeroSetting::where('invoice_id',$request->invoice_id)->where('company_xero_id',$xeroCompany->id)->count()>0){
                InvoiceXeroSetting::where('invoice_id',$request->invoice_id)->where('company_xero_id',$xeroCompany->id)->update(['xero_syn_invoice'=>$request->xero_syn_invoice]);

                $xeroField = XeroInvoiceValue::where('invoice_xero_setting_id',InvoiceXeroSetting::where('invoice_id',$request->invoice_id)->where('company_xero_id',$xeroCompany->id)->first()->id)->get();
                foreach ($xeroField as $items){
                    if ($items->xero_field_id == 2){
                        $xerpvalueUpdate = XeroInvoiceValue::where('invoice_xero_setting_id',InvoiceXeroSetting::where('invoice_id',$request->invoice_id)->where('company_xero_id',$xeroCompany->id)->first()->id)->findOrFail($items->id);
                        $xerpvalueUpdate->value = $request->input('2');
                        $xerpvalueUpdate->save();
                    }
                    if ($items->xero_field_id == 3){
                        $xerpvalueUpdate = XeroInvoiceValue::where('invoice_xero_setting_id',InvoiceXeroSetting::where('invoice_id',$request->invoice_id)->where('company_xero_id',$xeroCompany->id)->first()->id)->findOrFail($items->id);
                        $xerpvalueUpdate->value = $request->input('3');
                        $xerpvalueUpdate->save();
                    }
                    if ($items->xero_field_id == 4){
                        $xerpvalueUpdate = XeroInvoiceValue::where('invoice_xero_setting_id',InvoiceXeroSetting::where('invoice_id',$request->invoice_id)->where('company_xero_id',$xeroCompany->id)->first()->id)->findOrFail($items->id);
                        $xerpvalueUpdate->value = $request->input('4');
                        $xerpvalueUpdate->save();
                    }
                    if ($items->xero_field_id == 5){
                        $xerpvalueUpdate = XeroInvoiceValue::where('invoice_xero_setting_id',InvoiceXeroSetting::where('invoice_id',$request->invoice_id)->where('company_xero_id',$xeroCompany->id)->first()->id)->findOrFail($items->id);
                        $xerpvalueUpdate->value = $request->input('5');
                        if ($xerpvalueUpdate->save()){
                            $test=explode( '-', $request->input('5'));
                            Invoice::where('id',$request->invoice_id)->update(['gst_value'=>$test[1],'gst_label'=>$test[2]]);
                        }
                    }
                    if ($items->xero_field_id == 6){
                        $xerpvalueUpdate = XeroInvoiceValue::where('invoice_xero_setting_id',InvoiceXeroSetting::where('invoice_id',$request->invoice_id)->where('company_xero_id',$xeroCompany->id)->first()->id)->findOrFail($items->id);
                        $xerpvalueUpdate->value = $request->input('6');
                        $xerpvalueUpdate->save();
                    }


                }
            }else{

                if ($request->syn_xero==1) {
                    $invoiceXeroSetting = new InvoiceXeroSetting();
                    $invoiceXeroSetting->invoice_id = $request->invoice_id;
                    $invoiceXeroSetting->company_xero_id = CompanyXero::where('company_id', Session::get('company_id'))->where('status', 1)->first()->id;
                    $invoiceXeroSetting->syn_xero = $request->syn_xero;
                    $invoiceXeroSetting->xero_syn_invoice = $request->xero_syn_invoice;
                    if ($invoiceXeroSetting->save()) {
                        if ($request->syn_xero == 1) {
                            $xeroField = XeroField::get();
                            foreach ($xeroField as $items) {
                                if ($items->id == 2) {
                                    $xeroInvoiceValue = new XeroInvoiceValue();
                                    $xeroInvoiceValue->xero_field_id = $items->id;
                                    $xeroInvoiceValue->invoice_xero_setting_id = $invoiceXeroSetting->id;
                                    $xeroInvoiceValue->value = $request->input('2');
                                    $xeroInvoiceValue->save();
                                }
                                if ($items->id == 3) {
                                    $xeroInvoiceValue = new XeroInvoiceValue();
                                    $xeroInvoiceValue->xero_field_id = $items->id;
                                    $xeroInvoiceValue->invoice_xero_setting_id = $invoiceXeroSetting->id;
                                    $xeroInvoiceValue->value = $request->input('3');
                                    $xeroInvoiceValue->save();
                                }
                                if ($items->id == 4) {
                                    $xeroInvoiceValue = new XeroInvoiceValue();
                                    $xeroInvoiceValue->xero_field_id = $items->id;
                                    $xeroInvoiceValue->invoice_xero_setting_id = $invoiceXeroSetting->id;
                                    $xeroInvoiceValue->value = $request->input('4');
                                    $xeroInvoiceValue->save();
                                }
                                if ($items->id == 5) {
                                    $xeroInvoiceValue = new XeroInvoiceValue();
                                    $xeroInvoiceValue->xero_field_id = $items->id;
                                    $xeroInvoiceValue->invoice_xero_setting_id = $invoiceXeroSetting->id;
                                    $xeroInvoiceValue->value = $request->input('5');
                                    if ($xeroInvoiceValue->save()) {
                                        $test = explode('-', $request->input('5'));
                                        Invoice::where('id', $request->invoice_id)->update(['gst_value' => $test[1], 'gst_label' => $test[2]]);
                                    }
                                }
                                if ($items->id == 6) {
                                    $xeroInvoiceValue = new XeroInvoiceValue();
                                    $xeroInvoiceValue->xero_field_id = $items->id;
                                    $xeroInvoiceValue->invoice_xero_setting_id = $invoiceXeroSetting->id;
                                    $xeroInvoiceValue->value = $request->input('6');

                                    $xeroInvoiceValue->save();
                                }

                            }
                        }
                    }
                }

            }
            flash('Update Xero Detail successfully.','success');
            return redirect()->back();
        }



    }

    public function cancelInvoice(Request $request){
        $invoiceTemplate   =   Invoice::where('id',$request->id)->firstOrFail();

        if($invoiceTemplate->company_id == Session::get('company_id')){
            if(SentInvoice::where('invoice_id',$request->id)->count()>0 || AssignedInvoice::where('invoice_id',$request->id)->count()>0){
                flash("Invalid action! This template is already assigned to a user. Please unassign it and try deleting again.",'warning');
                return redirect()->route('companyInvoiceManager');
            }else{
                InvoiceField::where('invoice_id',$request->id)->delete();
                Invoice::where('id',$request->id)->delete();
                flash('Invoice Template deleted successfully.','warning');
                return redirect()->route('companyInvoiceManager');
            }

        } else {
            echo "<script>alert('Invalid attempt!')</script>";
            return redirect()->back();
        }
    }

    public function gstUpdate(Request $request){
        $this->validate($request,['gst'   => 'required|Int','invoiceId'   => 'required']);

        $invoiceInfo         =   Invoice::where('id',$request->invoiceId)->firstOrFail();
        if($invoiceInfo->company_id == Session::get('company_id')) {
            $invoiceInfo->gst   =    $request->gst;
            $invoiceInfo->save();
            echo("true");
        }else{
            echo('Invalid attempt!');
        }
    }

    public function gstUpdateValue(Request $request, $key){
         $this->validate($request,['pk'   => 'required|Int','value'   => 'required']);
        $invoiceInfo         =   Invoice::where('id',$request->pk)->firstOrFail();
        if($invoiceInfo->company_id == Session::get('company_id')) {
            switch ($key){
                case 1:
                    $invoiceInfo->gst_label   =    $request->value;
                    break;

                case 2:
                    $invoiceInfo->gst_value   =    $request->value;
                    break;

                default:
                    break;
            }
            $invoiceInfo->save();
        }else{
            echo('Invalid attempt!');
        }
//        endif;
    }

    public function  companyAssignInvoice(){
        $employeesQuery   =   Employee::where('company_id',Session::get('company_id'))->get();
        $companyAdmin   =    Company::where('id',Session::get('company_id'))->first();
        $employees[]  =   array('id'    =>  $companyAdmin->user_id, 'name'  =>  $companyAdmin->userInfo->first_name. " ".$companyAdmin->userInfo->last_name);
        foreach ($employeesQuery as $row){
            $employees[]    =    array('id'    =>  $row->user_id, 'name'  =>  $row->userInfo->first_name. " ".$row->userInfo->last_name);
        }

        $templates  =   Invoice::where("company_id", Session::get('company_id'))->orderBy('title','asc')->get();

        $employeesID    =   Employee::where('company_id',Session::get('company_id'))->pluck('user_id');

        $assignedTemplate   =   AssignedInvoice::whereIn('user_id',$employeesID)->orWhere('user_id',$companyAdmin->user_id)->get();

        return view('dashboard.company.invoiceManager.assignInvoice.index', compact('employees', 'templates','assignedTemplate'));
    }

    public function storeAssignInvoice(Request $request){

        $this->validate($request,['employeeId'   => 'required','templateId'   => 'required']);
        $invoiceInfo         =   Invoice::where('id',$request->templateId)->firstOrFail();
        if($invoiceInfo->company_id == Session::get('company_id')){
            if(count($request->employeeId)>0) {
                foreach ($request->employeeId as $assignInvoices) {
                    if(AssignedInvoice::where('user_id', $assignInvoices)->where('invoice_id',$request->templateId)->count()==0) {
                        $assignInvoice = new AssignedInvoice();
                        $assignInvoice->user_id = $assignInvoices;
                        $assignInvoice->assigned_by = Auth::user()->id;
                        $assignInvoice->invoice_id = $request->templateId;
                        $assignInvoice->save();
                    }
                }
                flash('Invoice template assignment updated successfully!','warning');
                return redirect()->back();
            }
        } else {
            flash('Invalid attempt!','warning');
            return redirect()->back();
        }
    }


    public function  cancelAssignInvoice(Request $request){
        $assignedInvoice   =   AssignedInvoice::where('id',$request->id)->firstOrFail();

        if($assignedInvoice->invoiceInfo->company_id==Session::get('company_id')){
                AssignedInvoice::where('id',$request->id)->delete();
                flash('Invoice Template access removed successfully.','success');
                return redirect()->route('companyAssignInvoice');
        } else {
            echo "<script>alert('Invalid attempt!')</script>";
            return redirect()->back();
        }
    }

    public function deleteInvoiceField(Request $request, $invoiceId){
        $this->validate($request,['fieldId'   => 'required']);
        $invoice     =   Invoice::where('id',$invoiceId)->firstOrFail();

        if($invoice->company_id==Session::get('company_id')) {

            $invoiceFieldQuery = InvoiceField::where('id',$request->fieldId)->where('invoice_id',$invoiceId);
            if($invoiceFieldQuery->count()==1){

                if(SentInvoiceValue::where('invoice_field_id',$request->fieldId)->count()==0){
                    InvoiceField::where('id',$request->fieldId)->where('invoice_id',$invoiceId)->delete();
                }else{
                    echo "Invalid attempt! This invoice field already used in some invoice. You can't delete this invoice field.";
                }
            }else{
                echo "Invalid attempt!";
            }
        }else{
            echo "Invalid attempt!";
        }
    }

    public function invoiceFieldUpdatePosition(Request $request, $invoiceId){
        $this->validate($request,['param'   => 'required']);
        $invoice     =   Invoice::where('id',$invoiceId)->firstOrFail();

        if(Company::where('id',$invoice->company_id)->first()->user_id==Auth::user()->id || Employee::where('company_id',$invoice->company_id)->where('user_id',Auth::user()-id)->count()>0){
            for($i=0;$i<count($request->param);$i++):
                InvoiceField::where('id',$request->param[$i])->update(['order'=>$i+1]);
            endfor;
        }
        else {
            echo "Unauthorized access!";
        }
    }

    public function addInvoiceField(Request $request, $key){
        $this->validate($request,['fieldType'   => 'required']);

        $invoice     =   Invoice::where('id',$key)->firstOrFail();

        if($invoice->company_id==Session::get('company_id')) {
            $order  =   InvoiceField::where('invoice_id',$key)->count();

            $fieldDetails   =   InvoiceFieldCategory::where('id',$request->fieldType)->firstOrFail();

            $newField                   =   new InvoiceField();
            $newField->invoice_id       =   $key;
            $newField->invoice_field_category_id =   $request->fieldType;
            $newField->order                    =   $order+1;
            $newField->label                    =   $fieldDetails->title;
            $newField->save();

            return $this->defaultInvoiceElementTemplate($newField->id);
        }else{
            echo "<script>alert('Invalid attempt!')</script>";
        }
    }

    public function invoiceFieldLabelUpdate(Request $request){
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        $tempInvoiceId   =   InvoiceField::where('id',$request->pk)->firstOrFail();

        $tempInvoice     =   Invoice::where('id',$tempInvoiceId->invoice_id)->firstOrFail();

        if($tempInvoice->company_id==Session::get('company_id')){
            InvoiceField::where('id',$request->pk)->update(['label'  => $request->value]);
        }else{
            echo "<script>alert('Invalid attempt!')</script>";
        }
    }

    public function defaultInvoiceElementTemplate($fieldType){
        $item   =   InvoiceField::where('id',$fieldType)->firstOrFail();
        if($item->invoice_field_category_id==9){
            return view('dashboard.company.invoiceManager.signatureElementTemplate',compact('item'));
        }elseif($item->invoice_field_category_id==12 ){
            return view('dashboard.company.invoiceManager.headerImageElementTemplate',compact('item'));
        }elseif($item->invoice_field_category_id==5 ){
            return view('dashboard.company.invoiceManager.headerImageElementTemplate',compact('item'));

        }else{
            return view('dashboard.company.invoiceManager.elementTemplate',compact('item'));

        }

    }
    public function checkTrialPeriod(){
        $company    =   Company::where('id',Session::get('company_id'))->first();
        if(PaymentLog::where('company_id',Session::get('company_id'))->count()>0){
            if($company->trial_period==0) {
                $company->trial_period = 2;
                $company->save();
            }
            return false;
        }else {
            if ($company->trial_period == 0) {
                $expiryDate =   Carbon::parse($company->expiry_date);
                $now        =   Carbon::now();
                if($now->lt($expiryDate)){
                    $expiryText     =    $expiryDate->diffInDays($now);

                    if($expiryText==0){
                        $expiryText =   $expiryDate->diffInHours($now)." hours";
                    }else{
                        $expiryText   =  $expiryText." days";
                    }
                    flash("Your trial period expire in ". $expiryText.". Please upgrade your plan on account section.","warning");
                    return false;
                }else{
                    $company->trial_period = 1;
                    $company->save();
                    flash("Your trial period has been expired. Please upgrade your plan.","danger");
                }
            } else if ($company->trial_period == 1) {
                flash("Your trial period has been expired. Please upgrade your plan.","danger");
            }
        }
        return true;
    }

    function sendiOSNotification($deviceID, $titles, $message){
        $ch = curl_init("https://fcm.googleapis.com/fcm/send");
        //The device token.
        $token = $deviceID; //token here
        //Title of the Notification.
        $title = $titles;
        //Body of the Notification.
        $body = $message;
        //Creating the notification array.
        $notification = array('title' =>$title , 'text' => $body, 'sound'=>'default', "content_available"=>true);
        //This array contains, the token and the notification. The 'to' attribute stores the token.
        $arrayToSend = array('to' => $token, 'notification' => $notification,'priority'=>'high');
        //Generating JSON encoded string form the above array.
        $json = json_encode($arrayToSend);
        //Setup headers:
        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: key= AIzaSyBvGkKWzgG0Ah-dw5EDlszZfX6Tiby67po'; // key here
        //Setup curl, add headers and post parameters.
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
        curl_setopt($ch, CURLOPT_HTTPHEADER,$headers);
        curl_setopt($ch,CURLOPT_RETURNTRANSFER, true);
        //Send the request
        $response = curl_exec($ch);
        //Close request
        curl_close($ch);
    }

    function sendAndroidNotification($deviceId, $titles, $message){
        $registrationIds = array( $deviceId );
        $msg = array
        (
            'message'   => $message,
            'title'     =>$titles,
            'vibrate'   => 1,
            'sound'     => 1
        );
        $fields = array
        (
            'registration_ids'  => $registrationIds,
            'data'          => $msg
        );

        $headers = array
        (
            'Authorization: key= AAAAYXeBuFI:APA91bFidufG2_gC3OOZWz7y37FWQ0B-tIA1OdAa8lu4HYN4wfX8HbNZXa8Wxg76iWgD_VU4kmvAYu71aCeRPmn99jCsMP2f-BVgVhjRcLVypMFSVB5gKXcQS0Prk5088MIDSJ_mrs-E' ,
            'Content-Type: application/json'
        );

        $ch = curl_init();
        curl_setopt( $ch,CURLOPT_URL, 'https://android.googleapis.com/gcm/send' );
        curl_setopt( $ch,CURLOPT_POST, true );
        curl_setopt( $ch,CURLOPT_HTTPHEADER, $headers );
        curl_setopt( $ch,CURLOPT_RETURNTRANSFER, true );
        curl_setopt( $ch,CURLOPT_SSL_VERIFYPEER, false );
        curl_setopt($ch,CURLOPT_RETURNTRANSFER, true);
        curl_setopt( $ch,CURLOPT_POSTFIELDS, json_encode( $fields ) );
        $result = curl_exec($ch );
        curl_close( $ch );
        // echo $result;
    }

    public function companyDocketLabel(){

        $docketlabel=DocketLabel::where('company_id',Session::get('company_id'))->orderby ('id','desc')->get();
        return view('dashboard.company.docketManager.docketlabel', compact('docketlabel'));
    }
    public function saveDocketlabel(Request $request){
        $this->validate($request,['title'   => 'required','color'=>'required','icon'=>'mimes:jpeg,jpg,png']);
        if(DocketLabel::where('company_id',Session::get('company_id'))->where('title',$request->title)->count()!=0){
            flash('The title "'.$request->title.'" has already been taken.','warning');
            return redirect('dashboard/company/docketBookManager/docket/docketLabel');
        }else{
            $labelDocket             =    new DocketLabel();
            $labelDocket->title      =   $request->title;
            $labelDocket->color      =   $request->color;
            $icon              =   Input::file('icon');


            if($request->hasFile('icon') == "") {
                 $labelDocket->icon = "";

            }else{
                if ($icon->isValid()) {
                    // $ext = $icon->getClientOriginalExtension();
                    // $filename = basename($request->file('icon')->getClientOriginalName(), '.' . $request->file('icon')->getClientOriginalExtension()). $ext;
                    $dest = 'files/icon';
                    // $icon->move($dest, $filename);
                    // $labelDocket->icon = $dest . '/' . $filename;
                    $labelDocket->icon = FunctionUtils::imageUpload($dest,$icon);
            }

        }
            $labelDocket->company_id =   Session::get('company_id');
            $labelDocket->save();
            flash('Docket label created successfully','success');
            return redirect('dashboard/company/docketBookManager/docket/docketLabel');
        }
    }
    public function updateDocketlabel(Request $request){
        $this->validate($request,['icon'=>'mimes:jpeg,jpg,png']);
        $updateDocketLabel              =  DocketLabel::findOrFail($request->id);
        $updateDocketLabel->title      =   $request->title;
        $updateDocketLabel->color      =   $request->color;
        $icon              =   Input::file('icon');
        if($request->hasFile('icon')) {
            if ($icon->isValid()) {
                // $ext = $icon->getClientOriginalExtension();
                // $filename = basename($request->file('icon')->getClientOriginalName(), '.' . $request->file('icon')->getClientOriginalExtension()). $ext;
                $dest = 'files/icon';
                // $icon->move($dest, $filename);
                // $updateDocketLabel->icon = $dest . '/' . $filename;
                $updateDocketLabel->icon = FunctionUtils::imageUpload($dest,$icon);
            }
        }
        $updateDocketLabel->company_id =   Session::get('company_id');
        $updateDocketLabel->save();
        flash('Update docket label successfully','success');
        return redirect('dashboard/company/docketBookManager/docket/docketLabel');

    }

    public function  savemultipleDocketlabel(Request $request){
        if(SentDockets::where('id',$request->id)->count()!=0){
            flash('The title "'.$request->id.'" has already been taken.','warning');
            return redirect('dashboard/company/docketBookManager/docket');
        }else{


            $sent_docket_id = $request['sent_docket_id'];
            foreach ($request->docket_label_id as $assigndocketlabel) {
                if(SentDocketLabel::where('sent_docket_id',$sent_docket_id)->where('docket_label_id',$assigndocketlabel)->count()!=1){
                    $sentDocketLabel             =    new SentDocketLabel ();
                    $sentDocketLabel->sent_docket_id  = $sent_docket_id;
                    $sentDocketLabel->docket_label_id    = $assigndocketlabel ;
                    $sentDocketLabel->save();
                }
            }
            flash('Docket label attached successfully','success');
            return redirect('dashboard/company/docketBookManager/docket');


        }
    }
    public  function deletdocketLabel(Request $request){
        if(SentDocketLabel::where('docket_label_id',$request->id )->count()!=0){
            flash('Invalid attempt! This docket label is already in use. You can’t delete it.','warning');
            return redirect('dashboard/company/docketBookManager/docket/docketLabel');
        } elseif (SentEmailDocketLabel::where('docket_label_id',$request->id )->count()!=0){
            flash('Invalid attempt! This docket label is already in use. You can’t delete it.','warning');
            return redirect('dashboard/company/docketBookManager/docket/docketLabel');
        }
        else {
            $docketlabel   =    DocketLabel::where('id',$request->id)->firstOrFail();
            $docketlabel->delete();
            flash('Docket label deleted successfully.','success');
            return redirect('dashboard/company/docketBookManager/docket/docketLabel');

        }


    }
   public  function deleteAssignLabel(Request $request){
        $deleteAssignLabel =SentDocketLabel::where('id',$request->id)->firstOrFail();
        $deleteAssignLabel->delete();
        flash('Assigned label deleted successfully.','success');
       return redirect('dashboard/company/docketBookManager/docket');
   }

    public function companyInvoiceLabel(){
        $invoicelabel = Invoice_Label::where('company_id',Session::get('company_id'))->orderby ('id','desc')->get();
        return view('dashboard.company.invoiceManager.invoicelabel', compact('invoicelabel'));
    }
    public function companyInvoiceLabelData(){
        $invoicelabel = Invoice_Label::where('company_id',Session::get('company_id'))->orderby ('id','desc')->get();
        $data =array();
        foreach ($invoicelabel as $invoicelabels){
            $data[] = array(
                'id'=>$invoicelabels->id,
                'title'=>$invoicelabels->title,
                'color'=>$invoicelabels->color,
                'icon'=> AmazoneBucket::url() . $invoicelabels->icon,

            );
        }
        return response()->json(array('data'=>$data));
    }

    public function saveInvoicelabel(Request $request){
        $this->validate($request,['title'   => 'required','color'=>'required','icon'=>'mimes:jpeg,jpg,png']);
        if(Invoice_Label::where('company_id',Session::get('company_id'))->where('title',$request->title)->count()!=0){
            flash('The title "'.$request->title.'" has already been taken.','warning');
            return redirect('dashboard/company/invoiceManager/invoices/invoiceLabel');
        }else{
            $labelInvoice             =    new Invoice_Label();
            $labelInvoice->title      =   $request->title;
            $labelInvoice->color      =   $request->color;
            $icon              =   Input::file('icon');


            if($request->hasFile('icon') == "") {
                $labelInvoice->icon = "";

            }else{
                if ($icon->isValid()) {
                    // $ext = $icon->getClientOriginalExtension();
                    // $filename = basename($request->file('icon')->getClientOriginalName(), '.' . $request->file('icon')->getClientOriginalExtension()). $ext;
                    $dest = 'files/icon';
                    // $icon->move($dest, $filename);
                    // $labelInvoice->icon = $dest . '/' . $filename;
                    $labelInvoice->icon = FunctionUtils::imageUpload($dest,$icon);
                }

            }
            $labelInvoice->company_id =   Session::get('company_id');
            $labelInvoice->save();
            flash('Invoice label created successfully.','success');
            return response()->json();
        }
    }
    public function updateInvoicelabel(Request $request){


        $updateinvoiceLabel              =  Invoice_Label::findOrFail($request->id);
        $updateinvoiceLabel->title      =   $request->title;
        $updateinvoiceLabel->color      =   $request->color;

        $icon              =   Input::file('icon');
        if($request->hasFile('icon')) {
            if ($icon->isValid()) {
                // $ext = $icon->getClientOriginalExtension();
                // $filename = basename($request->file('icon')->getClientOriginalName(), '.' . $request->file('icon')->getClientOriginalExtension()). $ext;
                $dest = 'files/icon';
                // $icon->move($dest, $filename);
                // $updateinvoiceLabel->icon = $dest . '/' . $filename;
                $updateinvoiceLabel->icon = FunctionUtils::imageUpload($dest,$icon);
            }
        }

        $updateinvoiceLabel->company_id =   Session::get('company_id');
        $updateinvoiceLabel->save();
        return response()->json();



    }
    public  function deleteInvoiceLabel($id){
        if(SentInvoiceLabel::where('invoice_label_id',$id )->count()!=0){
            return response()->json(array('message'=>"Invalid attempt! This invoice label is already in use. You can’t delete it."));
        } else {
            $invoicelabel   =    Invoice_Label::where('id',$id)->firstOrFail();
          $invoicelabel->delete();
            return response()->json();



        }


    }

    public function  savemultipleInvoicelabel(Request $request){
        if(SentInvoice::where('id',$request->id)->count()!=0){
            flash('The title "'.$request->id.'" has already been taken.','warning');
            return redirect('dashboard/company/invoiceManager/invoices');
        }else{


            $sent_invoice_id = $request['sent_invoice_id'];
            foreach ($request->invoice_label_id as $assignInvoicelabel) {
                if(SentInvoiceLabel::where('sent_invoice_id',$sent_invoice_id)->where('invoice_label_id',$assignInvoicelabel)->count()!=1){
                    $sentinvoiceLabel             =    new SentInvoiceLabel();
                    $sentinvoiceLabel->sent_invoice_id  = $sent_invoice_id;
                    $sentinvoiceLabel->invoice_label_id    = $assignInvoicelabel ;
                    $sentinvoiceLabel->save();
                }
            }
            flash('Invoice label attached successfully','success');
            return redirect('dashboard/company/invoiceManager/invoices');


        }
    }
    public  function deleteinvoiceAssignLabel(Request $request){
        $deleteinvoiceAssignLabels =SentInvoiceLabel::where('id',$request->id)->firstOrFail();
        $deleteinvoiceAssignLabels->delete();
        flash('Assigned label deleted successfully.','success');
        return redirect('dashboard/company/invoiceManager/invoices');
    }

    public function  savemultipleReceivedDocketlabel(Request $request){

        if(SentDockets::where('id',$request->id)->count()!=0){
            flash('The title "'.$request->id.'" has already been taken.','warning');
            return redirect('dashboard/company/docketBookManager/docket/received');
        }else{
            $sent_docket_id = $request['sent_docket_id'];
            foreach ($request->docket_label_id as $assigndocketlabel) {
                if(SentDocketLabel::where('sent_docket_id',$sent_docket_id)->where('docket_label_id',$assigndocketlabel)->count()!=1){
                    $sentDocketLabel             =    new SentDocketLabel ();
                    $sentDocketLabel->sent_docket_id  = $sent_docket_id;
                    $sentDocketLabel->docket_label_id    = $assigndocketlabel ;
                    $sentDocketLabel->save();
                }
            }
            flash('Docket label attached successfully','success');
            return redirect()->back();


        }
    }
    public  function deleteReceivedAssignLabel(Request $request){
        $deleteAssignLabel   =    SentDocketLabel::where('id',$request->id)->firstOrFail();
        $deleteAssignLabel->delete();
        flash('Assigned label deleted successfully.','success');
        return redirect()->back();
    }
    public function  savemultipleReceivedInvoicelabel(Request $request){
        if(SentInvoice::where('id',$request->id)->count()!=0){
            flash('The title "'.$request->id.'" has already been taken.','warning');
            return redirect('dashboard/company/invoiceManager/receivedInvoices');
        }else{
            $sent_invoice_id = $request['sent_invoice_id'];
            foreach ($request->invoice_label_id as $assignInvoicelabel) {
                if(SentInvoiceLabel::where('sent_invoice_id',$sent_invoice_id)->where('invoice_label_id',$assignInvoicelabel)->count()!=1){
                    $sentinvoiceLabel             =    new SentInvoiceLabel();
                    $sentinvoiceLabel->sent_invoice_id  = $sent_invoice_id;
                    $sentinvoiceLabel->invoice_label_id    = $assignInvoicelabel ;
                    $sentinvoiceLabel->save();
                }
            }
            flash('Invoice label attached successfully','success');
            return redirect()->back();


        }
    }
    public  function deleteReceivedInvoiceAssignLabel(Request $request){
        $deleteinvoiceAssignLabels =SentInvoiceLabel::where('id',$request->id)->firstOrFail();
        $deleteinvoiceAssignLabels->delete();
        flash('Assigned label deleted successfully.','success');
        return redirect()->back();
    }
    public function savemultipleEmailDocketlabel(Request $request){
        if(EmailSentDocket::where('id',$request->id)->count()!=0){
            flash('The title "'.$request->id.'" has already been taken.','warning');
            return redirect('dashboard/company/docketBookManager/docket/emailed');
        }else{

            $email_sent_docket_id = $request['email_sent_docket_id'];
            foreach ($request->docket_label_id as $assigndocketlabel) {
                if(SentEmailDocketLabel::where('email_sent_docket_id',$email_sent_docket_id)->where('docket_label_id',$assigndocketlabel)->count()!=1){
                    $sentDocketLabel             =    new SentEmailDocketLabel ();
                    $sentDocketLabel->email_sent_docket_id  = $email_sent_docket_id;
                    $sentDocketLabel->docket_label_id    = $assigndocketlabel ;
                    $sentDocketLabel->save();
                }
            }
            flash('Docket label attached successfully','success');
            return redirect('dashboard/company/docketBookManager/docket/emailed');


        }

    }
    public  function deleteEmailAssignLabel(Request $request){
        $deleteAssignLabel =SentEmailDocketLabel::findOrFail($request->id);
        $deleteAssignLabel->delete();
        flash('Assigned label deleted successfully.','success');
        return redirect('dashboard/company/docketBookManager/docket/emailed');
    }

    public function  savemultipleEmailedInvoicelabel(Request $request){


        $email_sent_id = $request['email_sent_id'];
        foreach ($request->invoice_label_id as $assignInvoicelabel) {
            if(EmailSentInvoiceLabel::where('email_sent_id',$email_sent_id)->where('invoice_label_id',$assignInvoicelabel)->count()!=1){
                $EmailSentInvoiceLabel             =    new EmailSentInvoiceLabel();
                $EmailSentInvoiceLabel->email_sent_id  = $email_sent_id;
                $EmailSentInvoiceLabel->invoice_label_id    = $assignInvoicelabel ;
                $EmailSentInvoiceLabel->save();
            }
        }
        flash('Email Sent Invoice label attached successfully','success');
        return redirect()->back();
    }

    public  function deleteEmailedInvoiceAssignLabel(Request $request){
        $deleteinvoiceAssignLabels =EmailSentInvoiceLabel::where('id',$request->id)->firstOrFail();
        $deleteinvoiceAssignLabels->delete();
        flash('Assigned label deleted successfully.','success');
        return redirect()->back();
    }
//
//    private $folders;
//    private $folderLabel;
//
//    public function getFolderChild($folderId){
//
//        $parentFolder   =   Folder::find($folderId);
//
//        $this->folderLabel = "";
//
//        $this->folders[] =   array("id" => $parentFolder->id, "label" => $parentFolder->name, "parent" => ($parentFolder->root_id==0)?"":Folder::find($parentFolder->root_id)->name);
//
//        if(Folder::where('root_id',$folderId)->count()>0){
//            foreach(Folder::where('root_id',$folderId)->get() as $folder){
//
//               $this->getFolderChild($folder->id);
//            }
//        }
//    }
//
//    public function getFolderRootsLabel($folderId){
//        $folder     =    Folder::find($folderId);
//
//    }

        public function checkEmptyFolder(){
            if(Folder::where('company_id',Session::get('company_id'))->where('root_id',0)->count()==0){
                $company   =   Company::where('id',Session::get('company_id'))->first();
                $newFolder = new Folder() ;
                $newFolder->name = $company->name;
                $newFolder->slug = str_slug($company->name);
                $newFolder->user_id = Auth::user()->id;
                $newFolder->company_id =Session::get('company_id');
                $newFolder->status = 0;
                $newFolder->root_id = 0;
                $newFolder->save();
            }
        }

//
//    function buildTree(array &$data, $parentId = 44) {
//        $branch = array();
//        foreach ($data as $key => $element) {
//            if ($element['root_id'] == $parentId) {
//                $children = $this->buildTree($data, $key);
//                if ($children) {
//                    $element['child'] = $children;
//                }
//                $branch[$key] = $element;
//                unset($data[$key]);
//            }
//        }
//        return $branch;
//    }


    public function downloadJSONFile(Request $request){
        $docket  =   Docket::where('id',$request->docket_id)->select('title','invoiceable','docketApprovalType','timer_attachement','theme_document_id','xero_timesheet')->get()->toArray();
        $docketfield = DocketField::where('docket_id',$request->docket_id)->select('id','docket_field_category_id','order','label','required')->orderBy('order', 'asc')->get();
//        $docketunitrate = DocketUnitRate::where('docket_field_id',$docketfield)->select('type','label')->get();
        $docketFields= array();
        $sn = 1;
        foreach ($docketfield as $row){
            $docketunitrate  =   array();
            $docketFooter=array();
            if($row->docket_field_category_id == 7){
                $docketunitrate    =    DocketUnitRate::select('type','label')->where("docket_field_id",$row->id)->orderBy('type','asc')->get();
                $docketFields[] =   array(
                    'docket_field_category_id'  =>  $row->docket_field_category_id,
                    'label'     =>  $row->label,
                    'order'     =>  $sn,
                    'required'     =>  $row->required,
                    'subField'  =>  $docketunitrate);

            }elseif ($row->docket_field_category_id == 13){
                $docketFooter   =    DocketFieldFooter::select('value')->where("field_id",$row->id)->get();
                $docketFields[] =   array(
                    'docket_field_category_id'  =>  $row->docket_field_category_id,
                    'label'     =>  $row->label,
                    'order'     => $sn,
                    'required'     =>  $row->required,
                    'subField'  =>  $docketFooter);
            }elseif ($row->docket_field_category_id==20) {
                $subFieldTimer = DocketManualTimer::select('id', 'type', 'label')->where("docket_field_id", $row->id)->orderBy('type', 'asc')->get();
                $breakSubField = DocketManualTimerBreak::select('id','type', 'label','explanation')->where("docket_field_id", $row->id)->orderBy('type', 'asc')->get();
                $docketFields[] = array('id' => $row->id,
                    'docket_field_category_id' => $row->docket_field_category_id,
                    'docket_field_category' => $row->fieldCategoryInfo->title,
                    'label' => $row->label,
                    'order' => $sn,
                    'required'=>$row->required,
                    'subField' => $subFieldTimer,
                    'subFieldBreak'=>$breakSubField);

            }elseif($row->docket_field_category_id == 24){
                $subField = DocketTallyableUnitRate::select('id', 'type', 'label')->where("docket_field_id", $row->id)->orderBy('type', 'asc')->get();
                $docketFields[] =   array(
                    'docket_field_category_id'  =>  $row->docket_field_category_id,
                    'label'     =>  $row->label,
                    'order'     =>  $sn,
                    'required'     =>  $row->required,
                    'subField'  =>  $subField);

            }elseif ($row->docket_field_category_id == 22){
                $subField  = array();
                foreach ($row->girdFields as $gridField)
                {
                    $data['id'] = $gridField->id;
                    $data['docket_field_id'] = $gridField->docket_field_id;
                    $data['docket_field_category_id'] = $gridField->docketFieldCategory->id;
                    $data['docket_field_category_label'] = $gridField->docketFieldCategory->title;
                    $data['label'] = $gridField->label;
                    $data['order'] = $gridField->order;
                    $data['required'] = 0;
                    array_push($subField, $data);
                }

                $docketFields[] = array('id' => $row->id,
                    'docket_field_category_id' => $row->docket_field_category_id,
                    'docket_field_category' => $row->fieldCategoryInfo->title,
                    'label' => $row->label,
                    'order' => $row->order,
                    'required'=>$row->required,
                    'subField'  => $subField);
            }elseif ($row->docket_field_category_id == 15){
                $docketAttachement   =    DocketAttachments::select('url','name')->where("docket_field_id",$row->id)->get();
                $docketFields[] =   array(
                    'docket_field_category_id'  =>  $row->docket_field_category_id,
                    'label'     =>  $row->label,
                    'order'     =>  $sn,
                    'required'     =>  $row->required,
                    'subField'  =>  $docketAttachement);
            }elseif($row->docket_field_category_id == 30){
                $subField = DocketConstantField::select('label', 'csv_header', 'is_show','export_mapping_field_category_id')->where("docket_field_id", $row->id)->get();
                $exportMappingArray = array();
                $exportMapping =   ExportMapping::where('docket_field_id', $row->id)->get()->first();
                if($exportMapping != null ){
                    if($subField[0]['export_mapping_field_category_id'] == 11){
                        $data = unserialize($exportMapping->value)[0];
                        $exportMappingArray = array(
                            'csvHeader' =>$data['csvHeader'],
                            'label' => $data['label'],
                            'id'=>$data['id'],
                            'isShow'=>$data['isShow'],
                        );
                    }
                }
                $docketFields[] =   array(
                    'docket_field_category_id'  =>  $row->docket_field_category_id,
                    'label'     =>  $row->label,
                    'order'     =>  $sn,
                    'required'     =>  $row->required,
                    'subField'  =>  $subField,
                    'exportMapping'=> $exportMappingArray );

            }
            elseif($row->docket_field_category_id == 18){
                $subFields = array();
                foreach ($row->yesNoField as $subRow):
                    $subDocket = array();
                    foreach ($subRow->yesNoDocketsField as $subRowDocket):
                        $subDocket[] = array(
                            'id' => $subRowDocket->id,
                            'docket_field_category_id' => $subRowDocket->docket_field_category_id,
                            'order' => $subRowDocket->order,
                            'required' => $subRowDocket->required,
                            'label' => $subRowDocket->label,
                        );
                    endforeach;
                    $subFields[] = array(
                        'id' => $subRow->id,
                        'label' => $subRow->label,
                        'type' => $subRow->type,
                        'colour' => $subRow->colour,
                        'explanation' => $subRow->explanation,
                        'docket_field_id' => $subRow->docket_field_id,
                        'label_icon' => $subRow->icon_image,
                        'label_type' => $subRow->label_type,
                        'subDocket' => $subDocket,
                    );
                endforeach;
                $docketFields[] = array(
                    'docket_field_category_id' => $row->docket_field_category_id,
                    'label' => $row->label,
                    'order' => $sn,
                    'required' => $row->required,
                    'subField' => $subFields);

            }
            else{
                $docketFields[] =   array(
                    'docket_field_category_id'  =>  $row->docket_field_category_id,
                    'label'     =>  $row->label,
                    'order'     => $sn,
                    'required'     =>  $row->required,
                    'subField'  =>  array(),

                );
            }
            $sn++;

        }
        $exportDocket = array_merge($docket,[$docketFields]);
        $exportDockets["docket"]    =    $docket;
        $exportDockets["docket_field"]    =    $docketFields;
        $data = json_encode($exportDockets);
        $fileName = "recorttime".time().".txt";
        File::put(public_path('docket/'.$fileName),$data);
        return Response::download(public_path('docket/'.$fileName));

    }

    public function uploadJSONFile(Request $request){
        $this->validate($request, ['docket_title' => 'required', 'files' => 'required|mimes:txt']);
        if (Docket::where('company_id', Session::get('company_id'))->where('title', $request->docket_title)->count() != 0) {
            flash('The Docket name "' . $request->docket_title . '" has already been taken.', 'warning');
            return redirect()->back();
        } else {
            $json = Input::file('files');
            $json_data = json_decode(file_get_contents($json, FILE_USE_INCLUDE_PATH), true);
            $array1 = (array)$json_data;
            $rules = [
                'docket' => 'required',
                'docket_field'=>'required',
            ];
            $validator = Validator::make($array1,$rules);
            if ($validator->passes()) {
                foreach ($array1['docket'] as $docketObject) {
                    $docket = new Docket();
                    $docket->title = $request->docket_title;
                    $docket->subTitle = '';
                    $docket->user_id = Auth::user()->id;
                    $docket->company_id = Session::get('company_id');
                    $docket->invoiceable = $docketObject["invoiceable"];
                    $docket->docketApprovalType = $docketObject["docketApprovalType"];
                    $docket->timer_attachement = $docketObject["timer_attachement"];
                    $docket->theme_document_id = $docketObject["theme_document_id"];
                    $docket->xero_timesheet  =   (array_key_exists("xero_timesheet",$docketObject))?$docketObject["xero_timesheet"]:0;
                    if ($docket->save()) {
                        foreach ($array1['docket_field'] as $docketfieldObject) {
                            if (DocketFiledCategory::where('id',$docketfieldObject["docket_field_category_id"])->count()) {
                                $docketfield = new DocketField();
                                $docketfield->docket_id = $docket->id;
                                $docketfield->docket_field_category_id = $docketfieldObject["docket_field_category_id"];
                                $docketfield->order = $docketfieldObject["order"];
                                $docketfield->label = $docketfieldObject["label"];
                                $docketfield->required = ($docketfieldObject["required"] == 1) ? 1 : 0;
                                if($docketfield->save()) {

                                    if ($docketfield->docket_field_category_id == 7){
                                        if (DocketUnitRate::where('docket_field_id', $docketfield->id)->count()){
                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                                $docketunitrate = new DocketUnitRate();
                                                $docketunitrate->docket_field_id = $docketfield->id;
                                                $docketunitrate->type = $subFieldObject["type"];
                                                $docketunitrate->label = $subFieldObject["label"];
                                                $docketunitrate->save();
                                            }
                                        }else {
                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                                $docketunitrate = new DocketUnitRate();
                                                $docketunitrate->docket_field_id = $docketfield->id;
                                                $docketunitrate->type = $subFieldObject["type"];
                                                $docketunitrate->label = $subFieldObject["label"];
                                                $docketunitrate->save();
                                            }
                                        }

                                    }elseif ($docketfield->docket_field_category_id == 13){
                                        if (DocketFieldFooter::where('field_id', $docketfield->id)->count()){
                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                                $docketFieldFooter = new DocketFieldFooter();
                                                $docketFieldFooter->field_id = $docketfield->id;
                                                $docketFieldFooter->docket_id = $docket->id;
                                                $docketFieldFooter->value = $subFieldObject["value"];
                                                $docketFieldFooter->save();
                                            }
                                        }else {
                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                                $docketFieldFooter = new DocketFieldFooter();
                                                $docketFieldFooter->field_id = $docketfield->id;
                                                $docketFieldFooter->docket_id = $docket->id;
                                                $docketFieldFooter->value = $subFieldObject["value"];
                                                $docketFieldFooter->save();
                                            }
                                        }

                                    }elseif($docketfield->docket_field_category_id == 20){
                                        if (DocketManualTimer::where('docket_field_id', $docketfield->id)->count()){
                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                                $docketManualTimer = new DocketManualTimer();
                                                $docketManualTimer->docket_field_id = $docketfield->id;
                                                $docketManualTimer->type = $subFieldObject["type"];
                                                $docketManualTimer->label = $subFieldObject["label"];
                                                $docketManualTimer->save();
                                            }
                                            foreach ($docketfieldObject['subFieldBreak'] as $subFieldObjects) {
                                                $docketManualTimerBreak = new DocketManualTimerBreak();
                                                $docketManualTimerBreak->docket_field_id = $docketfield->id;
                                                $docketManualTimerBreak->type = $subFieldObjects["type"];
                                                $docketManualTimerBreak->label = $subFieldObjects["label"];
                                                $docketManualTimerBreak->explanation = $subFieldObjects["explanation"];
                                                $docketManualTimerBreak->save();
                                            }

                                        }else{
                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                                $docketManualTimer = new DocketManualTimer();
                                                $docketManualTimer->docket_field_id = $docketfield->id;
                                                $docketManualTimer->type = $subFieldObject["type"];
                                                $docketManualTimer->label = $subFieldObject["label"];
                                                $docketManualTimer->save();
                                            }
                                            foreach ($docketfieldObject['subFieldBreak'] as $subFieldObjects) {
                                                $docketManualTimerBreak = new DocketManualTimerBreak();
                                                $docketManualTimerBreak->docket_field_id = $docketfield->id;
                                                $docketManualTimerBreak->type = $subFieldObjects["type"];
                                                $docketManualTimerBreak->label = $subFieldObjects["label"];
                                                $docketManualTimerBreak->explanation = $subFieldObjects["explanation"];
                                                $docketManualTimerBreak->save();
                                            }
                                        }
                                    }elseif ($docketfield->docket_field_category_id == 15){
                                        if (DocketAttachments::where('docket_field_id', $docketfield->id)->count()){
                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                                $docketAttachment = new DocketAttachments();
                                                $docketAttachment->docket_field_id = $docketfield->id;
                                                $docketAttachment->url = $subFieldObject["url"];
                                                $docketAttachment->name = $subFieldObject["name"];
                                                $docketAttachment->save();
                                            }
                                        }else {
                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                                $docketAttachment = new DocketAttachments();
                                                $docketAttachment->docket_field_id = $docketfield->id;
                                                $docketAttachment->url = $subFieldObject["url"];
                                                $docketAttachment->name = $subFieldObject["name"];
                                                $docketAttachment->save();
                                            }
                                        }

                                    }

                                    elseif ($docketfield->docket_field_category_id == 24){
                                        if (DocketTallyableUnitRate::where('docket_field_id', $docketfield->id)->count()){
                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                                $docketunitrate = new DocketTallyableUnitRate();
                                                $docketunitrate->docket_field_id = $docketfield->id;
                                                $docketunitrate->type = $subFieldObject["type"];
                                                $docketunitrate->label = $subFieldObject["label"];
                                                $docketunitrate->save();
                                            }
                                        }else {
                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                                $docketunitrate = new DocketTallyableUnitRate();
                                                $docketunitrate->docket_field_id = $docketfield->id;
                                                $docketunitrate->type = $subFieldObject["type"];
                                                $docketunitrate->label = $subFieldObject["label"];
                                                $docketunitrate->save();
                                            }
                                        }

                                    }else if($docketfield->docket_field_category_id == 30){
                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                            $docket_grid_field = new DocketConstantField();
                                            $docket_grid_field->label = $subFieldObject['label'];
                                            $docket_grid_field->csv_header = $subFieldObject['csv_header'];
                                            $docket_grid_field->is_show = $subFieldObject['is_show'];
                                            $docket_grid_field->docket_field_id = $docketfield->id;
                                            $docket_grid_field->export_mapping_field_category_id = $subFieldObject['export_mapping_field_category_id'];
                                            if($docket_grid_field->save()){
                                                $values = array();
                                                if($subFieldObject['export_mapping_field_category_id'] == 11){
                                                    $values[] = array(
                                                        'csvHeader' =>$docketfieldObject['exportMapping']['csvHeader'],
                                                        'label' => $docketfieldObject['exportMapping']['label'],
                                                        'id'=>$docketfieldObject['exportMapping']['id'],
                                                        'isShow'=>$docketfieldObject['exportMapping']['isShow'],
                                                    );
                                                    $newExportMapping = new ExportMapping();
                                                    $newExportMapping->docket_field_id = $docketfield->id;
                                                    $newExportMapping->value = serialize($values);
                                                    $newExportMapping->save();

                                                }else{
                                                    $newExportMapping = new ExportMapping();
                                                    $newExportMapping->docket_field_id =  $docketfield->id;
                                                    $newExportMapping->value = serialize($values);
                                                    $newExportMapping->save();
                                                }





                                            }
                                        }

                                    }
                                    elseif($docketfield->docket_field_category_id == 22){
                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                            $docket_grid_field = new DocketFieldGrid();
                                            $docket_grid_field->docket_field_id = $docketfield['id'];
                                            $docket_grid_field->docket_field_category_id = $subFieldObject['docket_field_category_id'];
                                            $docket_grid_field->order = $subFieldObject['order'];
                                            $docket_grid_field->label = $subFieldObject['label'];
                                            $docket_grid_field->save();

                                        }

                                    }
                                    elseif ($docketfield->docket_field_category_id == 18){
                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                            $yesnofield = new YesNoFields();
                                            $yesnofield->docket_field_id = $docketfield->id;
                                            $yesnofield->label = $subFieldObject["label"];
                                            $yesnofield->type = $subFieldObject["type"];
                                            $yesnofield->colour = $subFieldObject["colour"];
                                            $yesnofield->explanation = $subFieldObject["explanation"];
                                            $yesnofield->icon_image = $subFieldObject["label_icon"];
                                            $yesnofield->label_type = $subFieldObject["label_type"];
                                            if($yesnofield->save()){
                                                foreach ($subFieldObject["subDocket"] as $subDocket){
                                                    $yesnoSubdocket = new YesNoDocketsField();
                                                    $yesnoSubdocket->yes_no_field_id = $yesnofield->id;
                                                    $yesnoSubdocket->docket_field_category_id = $subDocket["docket_field_category_id"];
                                                    $yesnoSubdocket->order = $subDocket["order"];
                                                    $yesnoSubdocket->required = $subDocket["required"];
                                                    $yesnoSubdocket->label = $subDocket["label"];
                                                    $yesnoSubdocket->save();
                                                }


                                            }

                                        }



                                    }



                                }

                            }else{
                                flash('Invalid file format', 'warning');
                                return redirect()->back();
                            }
                        }
                        flash('Docket Template Imported successfully', 'success');
                        return redirect()->back();
                    }

                }
            } else {

                flash('Invalid file format: The file type must be ".txt"', 'danger');
                return redirect()->back();
            }
        }
    }

   public  function  errorpage(){
        return view('dashboard/errorpage');
   }


   public function updateInvoiceDocket(Request $request){
       $this->validate($request,['invoiceId' => 'required','invoiceName'   => 'required']);

       $invoiceInfo     =    Invoice::where('id',$request->invoiceId)->firstOrFail();
       if($invoiceInfo->company_id==Session::get('company_id')){
           $invoiceInfo->title  =    $request->invoiceName;
           $invoiceInfo->save();
           flash('Invoice updated successfully.','success');
           return redirect()->back();
       }else {
           flash('Invalid action ! Please try with valid action.','warning');
           return redirect()->back();
       }

   }


    public function docketSetting(Request $request)
    {
        if(!checkProfileComplete()){
            return redirect()->route('companyProfile');
        }
        $userProfile    =    User::find(Auth::user()->id);
        $companyProfile =   Company::find(Session::get('company_id'));
        $docketSetting =   DocketFooter::where('company_id',Session::get('company_id'))->orderby ('id','desc')->get();
        return view('dashboard.company.profile.docketSetting', compact('userProfile','companyProfile','docketSetting'));
    }

    public function saveDocketSetting(Request $request){
        $this->validate($request, ['title'=>'required','term_condition' => 'required']);
        if (DocketFooter::where('company_id', Session::get('company_id'))->where('title', $request->title)->count() != 0) {
            flash('The Docket setting "' . $request->title . '" has already been taken.', 'warning');
            return redirect()->back();
        } else {
            $docketSetting = new DocketFooter;
            $docketSetting->term_condition = $request->term_condition;
            $docketSetting->title = $request->title;
            $docketSetting->user_id = Auth::user()->id;
            $docketSetting->company_id = Session::get('company_id');
            $docketSetting->save();
            flash('Terms And Conditions added successfully', 'success');
            return redirect()->back();
        }
    }

    public  function  deleteDocketSetting(Request $request){
//            if(DocketFieldFooter::where('field_id',$request->id )->where('docket_id',$request->id)->count()!=0){
//                flash('Invalid attempt! This category is already in use. You can’t delete it.','warning');
//                return redirect('dashboard/defaultTemplate/category');
//            }
//            else {
                $docketSetting   =    DocketFooter::where('id',$request->id)->firstOrFail();
                $docketSetting->delete();
                flash('Docket Setting deleted successfully.','success');
                return redirect()->back();

//            }

    }

    public  function  updateDocketSetting(Request $request){
        $this->validate($request, ['title'=>'required','term_condition' => 'required']);
//        if (DocketFooter::where('company_id', Session::get('company_id'))->where('title', $request->title)->count() != 0) {
//            flash('The Docket setting "' . $request->title . '" has already been taken.', 'warning');
//            return redirect()->back();
//        } else {
            $updateDocketSetting = DocketFooter::findOrFail($request->id);
            $updateDocketSetting->term_condition = $request->term_condition;
            $updateDocketSetting->title = $request->title;
            $updateDocketSetting->save();
            flash('Terms And Conditions Update successfully', 'success');
            return redirect()->back();
//        }
    }

    public function saveDocketFieldFooter(Request $request){
        $validator  =   Validator::make(Input::all(),['value'=>'required']);
        if ($validator->fails()):
            foreach ($validator->messages()->getMessages() as $field_name => $messages){ $errors[]=$messages[0]; }
            return response()->json(array('status' => false,'message' => $errors));
        else:
        if ($request->value == "Terms and Conditions Dropdown Box"){
            flash('Please Select Terms and Conditions form Dropdown Box','warning');
            return redirect()->back();
        }else{
            if (DocketFieldFooter::where('docket_id',$request->docket_id)->where('field_id',$request->field_id)->count() == 0):
                $saveDocketFieldFooter =new  DocketFieldFooter;
                $saveDocketFieldFooter->field_id = $request->field_id;
                $saveDocketFieldFooter->docket_id = $request->docket_id;
                $saveDocketFieldFooter->value = $request->value;
                $saveDocketFieldFooter-> save();
                flash('Docket footer added successfully','success');
                return redirect()->back();
            else:
                $saveDocketFieldFooter = DocketFieldFooter::where('docket_id',$request->docket_id)->where('field_id',$request->field_id)->first();
                $saveDocketFieldFooter->value = $request->value;
                $saveDocketFieldFooter-> save();
                flash('Docket footer updated successfully','success');
                return redirect()->back();

            endif;

        }
        endif;



    }


    public function companyDocumentManager(Request $request){
        if(Input::get('data')){
            $searchKey = Input::get('search');
            $possibleSentDocketsID=DocketDocument::where('company_id',Session::get('company_id'))->orderby ('id','desc')->pluck('id')->toArray();
            $docketDocument    =   DocketDocument::whereIn('id',$possibleSentDocketsID)->orderBy('created_at','desc')->paginate(10);
            if($request->ajax()) {
                return view('dashboard.company.docketManager.documentManager.searchDocumentManager',compact('docketDocument','searchKey'));
            }else{
                return view('dashboard.company.docketManager.documentManager.index',compact('docketDocument','searchKey'));
            }
        }

        if(Input::get('search')) {
            $searchKey = Input::get('search');
            $possibleSentDocketsID     =    DocketDocument::where('company_id',Session::get('company_id'))->orderby ('id','desc')->pluck('id')->toArray();
            $filteredSentDockets = array();


            $matchedIDArray = array();

            //check docket id
            $matchedIDArray = DocketDocument::where('id', 'like', '%' . $searchKey . '%')->whereIn('id', $possibleSentDocketsID)->pluck('id')->toArray();
            if (count($matchedIDArray) > 0) {
                $possibleSentDocketsID = array_merge(array_diff($possibleSentDocketsID, $matchedIDArray), array_diff($matchedIDArray, $possibleSentDocketsID));
            }

            //check docket info(sender name, sender company name , receiver name, company name //
            $sentDocumentQuery = DocketDocument::whereIn('id', $possibleSentDocketsID)->get();

            foreach ($sentDocumentQuery as $row){

                $userName =   $row->userInfo->first_name." ".$row->userInfo->last_name;
                if(preg_match("/".$searchKey."/i",$userName)){
                    $matchedIDArray[]   =   $row->id;
                    continue;
                }



                if(preg_match("/".$searchKey."/i",$row->name)){
                    $matchedIDArray[]   =   $row->id;
                    continue;
                }

                if(preg_match("/".$searchKey."/i",Carbon::parse($row->created_at)->format('d-M-Y'))) {
                    $matchedIDArray[]   =   $row->id;
                    continue;
                }
            }

            $docketDocument    =   DocketDocument::whereIn('id',$matchedIDArray)->orderBy('created_at','desc')->paginate(10);

            if($request->ajax()) {
                return view('dashboard.company.docketManager.documentManager.searchDocumentManager',compact('docketDocument','searchKey'));
            }else{
                return view('dashboard.company.docketManager.documentManager.index',compact('docketDocument','searchKey'));
            }
        }



        $docketDocument=DocketDocument::where('company_id',Session::get('company_id'))->orderby ('id','desc')->paginate(10);
        return view('dashboard.company.docketManager.documentManager.index',compact('docketDocument'));
    }

    public function addCompanyDocumentManager(Request $request){
        //dd('123');
        $this->validate($request, ['name' => 'required','files'=>'required|max:32000']);
        if (DocketDocument::where('company_id', Session::get('company_id'))->where('name', $request->name)->count() != 0) {
            flash('The Document Manager "' . $request->name . '" has already been taken.', 'warning');
            return redirect()->back();
        } else {
            $files = Input::file('files');
            $ext = $files->getClientOriginalExtension();
            if($ext == 'pdf') {
                $docketDocument = new DocketDocument;
                $docketDocument->name = $request->name;
                $docketDocument->user_id = Auth::user()->id;
                $docketDocument->company_id = Session::get('company_id');
//                $files = Input::file('files');
                if ($request->hasFile('files')) {
                    if ($files->isValid()) {
                        // $filename = preg_replace('/\s+/', '', basename($request->file('files')->getClientOriginalName(), '.' . $request->file('files')->getClientOriginalExtension()) . '-' . time() . "." . $ext);
                        $dest = 'files/pdf';
                        // $files->move($dest, $filename);
                        // $docketDocument->files = $dest . '/' . $filename;
                        $docketDocument->files = FunctionUtils::imageUpload($dest,$files);
                    }
                }
                $docketDocument->save();
                flash('Document added successfully', 'success');
                return redirect()->back();
            }else{
                flash('Only .pdf file type are accepted', 'error');
                return redirect()->back();
            }

        }

    }

    public function updateCompanyDocumentManager(Request $request){
        $updateDocketDocument             =  DocketDocument::findOrFail($request->id);
        $updateDocketDocument->name = $request->name;
        $files              =   Input::file('files');
        if($request->hasFile('files')) {
            if ($files->isValid()) {
                // $ext = $files->getClientOriginalExtension();
                // $filename = basename($request->file('files')->getClientOriginalName(), '.' . $request->file('files')->getClientOriginalExtension()) . time() . "." . $ext;
                $dest = 'files/pdf';
                // $files->move($dest, $filename);
                // $updateDocketDocument->files = $dest . '/' . $filename;
                $updateDocketDocument->files = FunctionUtils::imageUpload($dest,$files);
            }
        }
        $updateDocketDocument->save();
        flash('Update Document  successfully','success');
        return redirect()->back();

    }

    public function deleteCompanyDocumentManager(Request $request){
        $deleteDocketDocument   =    DocketDocument::where('id',$request->id)->firstOrFail();
        $deleteDocketDocument->delete();
        flash('Document deleted successfully.','success');
        return redirect()->back();
    }

    public function addDocument(Request $request){
        $docketDocument     =   DocketDocument::find($request->dataId);
        $this->validate($request, ['fieldId' => 'required','dataId'=>'required']);
        if (DocketAttachments::where('docket_field_id', $request->fieldId)->where('name',$docketDocument->name)->count() != 0) {
            echo "Invalid attempt! Already Added";
        } else {
            $docketAttachement= new DocketAttachments;
            $docketAttachement->docket_field_id = $request->fieldId;
            $docketAttachement->name= $docketDocument->name;
            $docketAttachement->url = $docketDocument->files;
            $docketAttachement->save();
        }

    }

    //===========================================Prefiller Manager =======================================/
//    public function companyPrefillerManager(Request $request){
//        $this->updateDefaultPrefiller();
//        $docketPrefiller=DocketPrefiller::where('company_id',Session::get('company_id'))->orderby ('id','asc')->get();
//        $prefillerLabel = DocketPrefillerValue::orderby ('id','asc')->get();
//        return view('dashboard.company.docketManager.prefillerManager.index',compact('docketPrefiller','prefillerLabel'));
//    }

    public function updateDefaultPrefiller(){
        $employeeListQuery  =    DocketPrefiller::where('company_id',Session::get('company_id'))->where('type',1);
        $clientListQuery    =    DocketPrefiller::where('company_id',Session::get('company_id'))->where('type',2);

        $employeeQuery      =    Employee::where('company_id',Session::get('company_id'))->get();
        $employeeListArray   =   array();
        foreach ($employeeQuery as $row){
            if(@$row->userInfo->isActive==1)
                $employeeListArray[]   =    @$row->userInfo->first_name." ".@$row->userInfo->last_name;
        }
         $clientQuery        =   Client::where('company_id',Session::get('company_id'))->orWhere('requested_company_id',Session::get('company_id'))->get();
         $emailClientQuery = Email_Client::where('company_id',Session::get('company_id'))->Where('company_name', '!=' ,"")->get();
        $clientListArray    =   array();
        $emailClientArray = array();
        foreach ($clientQuery as $client){
            if ($client->company_id == Session::get('company_id')){
                $clientListArray[] = $client->requestedCompanyInfo->name;
            }
            if($client->requested_company_id == Session::get('company_id')){
                $clientListArray[] = $client->companyInfo->name;
            }
        }
        foreach ($emailClientQuery as $email){
                    $emailClientArray[]= $email->company_name;

        }
      $totalClient= array_merge($clientListArray,$emailClientArray);



        if($employeeListQuery->count()>0){
            $oldPrefillerData   =   $employeeListQuery->first();
            if(count($oldPrefillerData->docketPrefillerValue)>0){
                foreach($oldPrefillerData->docketPrefillerValue as $oldData){
                    if(!in_array($oldData->label,$employeeListArray)){
                        $oldData->delete();
                    }else{
                        $this->deleteElement($oldData->label,$employeeListArray);
                    }
                }
            }
        }else{
            $employeeDocketPrefiller                =   new DocketPrefiller();
            $employeeDocketPrefiller->title         =   "Employee List";
            $employeeDocketPrefiller->company_id    =   Session::get('company_id');
            $employeeDocketPrefiller->type          =   1;
            $employeeDocketPrefiller->user_id       =   Auth::user()->id;
            $employeeDocketPrefiller->save();
            $oldPrefillerData   =   $employeeDocketPrefiller;
        }

        foreach ($employeeListArray as $employee){
            $prefillerValue                         =   new DocketPrefillerValue();
            $prefillerValue->docket_prefiller_id    =   $oldPrefillerData->id;
            $prefillerValue->label                  =   $employee;
            $prefillerValue->save();
        }

        if($clientListQuery->count()>0){
            $oldPrefillerData   =   $clientListQuery->first();
            if(count($oldPrefillerData->docketPrefillerValue)>0){
                foreach($oldPrefillerData->docketPrefillerValue as $oldData){
                    if(!in_array($oldData->label,$totalClient)){
                        $oldData->delete();
                    }else{
                        $this->deleteElement($oldData->label,$totalClient);
                    }
                }
            }

        }else{
            $clientDocketPrefiller                  =   new DocketPrefiller();
            $clientDocketPrefiller->title           =   "Client List";
            $clientDocketPrefiller->company_id      =   Session::get('company_id');
            $clientDocketPrefiller->type            =   2;
            $clientDocketPrefiller->user_id         =   Auth::user()->id;
            $clientDocketPrefiller->save();
            $oldPrefillerData   =   $clientDocketPrefiller;
        }
        foreach ($totalClient as $clients){
            $prefillerValue                         =   new DocketPrefillerValue();
            $prefillerValue->docket_prefiller_id    =   $oldPrefillerData->id;
            $prefillerValue->label                  =   $clients;
            $prefillerValue->save();
        }
    }

    function deleteElement($element, &$array){
        $index = array_search($element, $array);
        if($index !== false){
            unset($array[$index]);
        }
    }

    public function addPrefillerManager(Request $request){

        $this->validate($request, ['title' => 'required']);
        if (DocketPrefiller::where('title',$request->title)->where('company_id',Session::get('company_id'))->count()!=0 ){
            $message= 'The title "'.$request->title.'" has already been taken.';
            return response()->json(['status' => false, 'message' => $message]);
        }else{
            $addprefillerCategory = new DocketPrefiller;
            $addprefillerCategory->title = $request->title;
            $addprefillerCategory->user_id = Auth::user()->id;
            $addprefillerCategory->company_id = Session::get('company_id');
            $addprefillerCategory->is_integer = $request->is_integer;
            $addprefillerCategory->type = 0;
            $addprefillerCategory->save();
            return response()->json(['status' => true,'prefillerManagerId'=>$addprefillerCategory->id,'isInteger'=>$addprefillerCategory->is_integer]);
        }
    }



//    public function addPrefillerManager(Request $request){
//
//        $this->validate($request, ['title' => 'required','label' => 'required|array']);
//        if (DocketPrefiller::where('title',$request->title)->where('company_id',Session::get('company_id'))->count()!=0 ){
//            $message= 'The title "'.$request->title.'" has already been taken.';
//            return response()->json(['status' => false, 'message' => $message]);
//        }else{
//                $addprefillerCategory = new DocketPrefiller;
//                $addprefillerCategory->title = $request->title;
//                $addprefillerCategory->user_id = Auth::user()->id;
//                $addprefillerCategory->company_id = Session::get('company_id');
//                $addprefillerCategory->is_integer = $request->is_integer;
//                if ($addprefillerCategory->save()) {
//                    foreach (array_filter($request->label) as $item) {
//                        $saveDocketPrefillerValue = new DocketPrefillerValue;
//                        $saveDocketPrefillerValue->docket_prefiller_id = $addprefillerCategory->id;
//                        $saveDocketPrefillerValue->label = $item;
//                        $saveDocketPrefillerValue->save();
//                    }
//                    $url='prefillerManager/success';
//                    return response()->json(['status' => true, 'url' => $url]);
//                }
//            }
//
//    }
    public function addPrefillerManagerSuccess(){
        flash('Prefiller added successfully','success');
        return redirect('dashboard/company/docketManager/prefillerManager');

    }

    public function updatePrefillerManager(Request $request){
        $updatePrefillerCategory             =  DocketPrefiller::findOrFail($request->id);
        $updatePrefillerCategory->title = $request->title;
        $updatePrefillerCategory->save();
        flash('Update Prefiller successfully','success');
        return redirect()->back();
    }

    public function savePrefillerLabel(Request $request){

        $saveprefillerlabel = new DocketPrefillerValue;
        $saveprefillerlabel->label = $request->label;
        $saveprefillerlabel->docket_prefiller_id = $request->docket_prefiller_id;
        $saveprefillerlabel->save();
//        flash('Prefiller label added successfully','success');
//        return redirect()->back();
        $label  =    '<div class="prefillercontent" id="divResult" style="background: #0000000a;">
                        <a style="margin-left: 12px; font-size: 12px;" href="#" id="shortText" class="editabledocketprefiller editable" data-type="text" data-pk="'.$saveprefillerlabel->id.'" data-url="'.url('dashboard/company/docketManager/prefillerManager/editPrefillerLabel').'" data-title="Enter Label Text">'.$saveprefillerlabel->label.'</a>
                        <a  data-toggle="modal" data-target="#deletePrefillerLabel" data-id="'.$saveprefillerlabel->id.'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style=" font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 10px 4px;background: #4395bb;position: absolute;box-shadow: none;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>
                      </div>';
        $message= 'Prefiller label added successfully';
        return response()->json(['status' => true, 'message' => $message, 'label' => $label]);

    }
    public function editPrefillerLabel(Request $request){
        $editPrefillerLabel             =  DocketPrefillerValue::findOrFail($request->pk);
        $editPrefillerLabel->label = $request->value;
        $editPrefillerLabel->save();
    }
    public function deletePrefillerLabel(Request $request){
        $deletePrefillerLabel   =    DocketPrefillerValue::where('id',$request->id)->firstOrFail();
        $deletePrefillerLabel->delete();
        flash('Prefiller label deleted successfully.','success');
        return redirect()->back();
    }

//    function buildTreeArray(array $prefiller, $parentId = 0) {
//        $branch = array();
//        foreach ($prefiller as $prefillers) {
//            if ($prefillers['root_id'] == $parentId) {
//                $children = $this->buildTreeArray($prefiller, $prefillers['id']);
//                if ($children) {
//                    $prefillers['prefiller'] = $children;
//                }
//                $branch[] = $prefillers;
//            }
//        }
//        return $branch;
//    }
//
//    function recursive($array, $level = 0)
//    {
//        $test = array();
//        foreach($array as $node)
//        {
//            echo str_repeat("&emsp;", $level), "[".$node['value']."]", '';
//            if(isset($node['children'])) {
//                echo '<br/>';
//                $this->recursive($node['children'], $level + 1);
//                echo str_repeat("&emsp;", $level);
//            }
//             echo "[/".$node['value']."]" , '<br>';
//
//
//        }
//
//    }

//$tree_2 = recursive($tree_1);







    public function docketSavePreFiller(Request $request)
    {
        $tempDocketId = $request->docket_id;
        $checkCategoryField = DocketField::where('id',$request->docket_field_id)->where('docket_id',$tempDocketId)->first();
         if ($checkCategoryField->docket_field_category_id == 3){
             $docketFieldCategory = 1;
         }else{
             $docketFieldCategory = 0;
         }
            $index = DocketFiledPreFiller::where('docket_field_id',$request->docket_field_id)->pluck('index')->toArray();
                if (count($index)!=0){
                    $maxIndex = max($index);
                }else{
                    $maxIndex = 0;
                }
            if ($request->value != null){
                $docketFiledPreFiller = new DocketFiledPreFiller();
                $docketFiledPreFiller->value = $request->value;
                $docketFiledPreFiller->root_id = $request->parent_id;
                $docketFiledPreFiller->docket_field_id = $request->docket_field_id;
                $docketFiledPreFiller->index = $request->index + 1;
                if ($docketFiledPreFiller->save()){
                    if ($maxIndex < $docketFiledPreFiller->index ){
                       DocketField::where('id',$request->docket_field_id)->where('docket_id',$tempDocketId)->update(['default_prefiller_id'=> null]);
                    }
                }
            }else{
                $docket_prefiller=DocketPrefiller::where('id',$request->value_category_id)->firstOrFail();
                foreach($docket_prefiller->docketPrefillerValue as $row){
                    $docketFiledPreFiller = new DocketFiledPreFiller;
                    $docketFiledPreFiller->value = $row->label;
                    $docketFiledPreFiller->root_id = $request->parent_id;
                    $docketFiledPreFiller->docket_field_id = $request->docket_field_id;
                    $docketFiledPreFiller->index = $request->index + 1;
                    if ($docketFiledPreFiller->save()){
                        if ($maxIndex < $docketFiledPreFiller->index ){
                            DocketField::where('id',$request->docket_field_id)->where('docket_id',$tempDocketId)->update(['default_prefiller_id'=> null]);
                        }
                    }
                }
            }

            $prefiller = array();
            $docketPreFiller = DocketFiledPreFiller::where('docket_field_id',$request->docket_field_id)->get();

                foreach($docketPreFiller as $subRow):
                    $prefiller[]   =  array(
                        'id'=> $subRow->id,
                        'value'=> $subRow->value,
                        'root_id'=> $subRow->root_id,
                        'index'=> $subRow->index,
                        'docket_field_id'=> $subRow->docket_field_id,
                        'docket_field_name'=>$subRow->docketField->label,
                    );
                endforeach;

            $urlUpdatePreFiller = url('dashboard/company/docketBookManager/designDocket/updatePreFiller');
            $datas = $this->buildTreeArray($prefiller);
            $finalPrefillerView = array();



            foreach ((new Collection($datas))->sortBy('value') as $row){
                $prefillerForMaxIndex = DocketFiledPreFiller::where('docket_field_id',$row['docket_field_id'])->pluck('index')->toArray();
                $finalPrefillerMaxIndex =max($prefillerForMaxIndex);
                $docketField = DocketField::where('id',$row['docket_field_id'])->where('docket_id',$tempDocketId)->first();
                $defaultPrefillerId =unserialize($docketField->default_prefiller_id);
                $final = "";
                $this->prefillerFirstRow    =   true;
                $final .= '<tr><td>';
                if ($finalPrefillerMaxIndex == $row['index']) {
                    if ($defaultPrefillerId != null) {
                        if (in_array($row['id'], $defaultPrefillerId)) {
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" value="' . $row['id'] . '" items="' . $row["docket_field_id"] . '"  checked  ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="' . $row['id'] . '" data-docketfieldid ="' . $request->docket_field_id . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -11px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid ="' . $request->docket_field_id . '" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none; top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>';
                        }else{
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" value="' . $row['id'] . '" items="' . $row["docket_field_id"] . '"    ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="' . $row['id'] . '" data-docketfieldid ="' . $request->docket_field_id . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -11px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid ="' . $request->docket_field_id . '" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none; top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
                        }
                    }else{
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" value="' . $row['id'] . '" items="' . $row["docket_field_id"] . '"    ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="' . $row['id'] . '" data-docketfieldid ="' . $request->docket_field_id . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -11px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid ="' . $request->docket_field_id . '" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none; top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
                    }
                }else{
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" disabled  ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="' . $row['id'] . '" data-docketfieldid ="' . $request->docket_field_id . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -11px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid ="' . $request->docket_field_id . '" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none; top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
                }
                if(count($row["prefiller"])>0){
                    $final .=  $this->getPrefillerChild($row["prefiller"],$finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory);
                }

                $finalPrefillerView[] = array(
                    'id'=>$row['docket_field_id'],
                    'final'=>$final
                );
            }



            $message = 'Filler Added successfully.';
            return response()->json(['status' => true, 'message' => $message, 'finalPrefillerView' => $finalPrefillerView]);


    }

    public function updatePreFiller(Request $request){
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        $docketupdatePreFiller   =   DocketFiledPreFiller::where('id',$request->pk)->firstOrFail();
        $docketupdatePreFiller->value =$request->value;
        $docketupdatePreFiller->save();


    }


    public function getChildPrefillerId($root_id){
        $prefillerId  =   array();
        $prefillerId[]    =   intval($root_id);
        $query= DocketFiledPreFiller::where('root_id',$root_id);
        if ($query->count()>0){
            foreach ($query->get() as $items){
                $prefillerId[]    =   $items->id;
                if(DocketFiledPreFiller::where('root_id',$items->id)->count()>0) {
                    $prefillerId = array_merge($prefillerId, $this->getChildPrefillerId($items->id));
                }
            }
        }else{
            $prefillerId[]    =     $root_id;
        }
        return $prefillerId;

    }

    public  function deletePreFiller(Request $request){
        $tempDocketId = $request->docket_id;
        $root_id= $request->prefiller_id;



        $checkCategoryField = DocketField::where('id',$request->docket_field_id)->where('docket_id',$tempDocketId)->first();
        if ($checkCategoryField->docket_field_category_id == 3){
            $docketFieldCategory = 1;
        }else{
            $docketFieldCategory = 0;
        }

        $prefillerId=$this->getChildPrefillerId($root_id);
        DocketFiledPreFiller::whereIn('id',array_unique($prefillerId))->delete();


        if ($deleteDocketFieldPrefiller = DocketField::where('id',$request->docket_field_id)->where('docket_id',$tempDocketId)->first()->default_prefiller_id != null){
            $deleteDocketFieldPrefiller = DocketField::where('id',$request->docket_field_id)->where('docket_id',$tempDocketId)->first();
            $prefillerSeralize = unserialize($deleteDocketFieldPrefiller->default_prefiller_id);
            $docketarrayPrefilller[] = $request->prefiller_id;
            $finalUpdateValue = array_diff($prefillerSeralize,$docketarrayPrefilller);
            if (count($finalUpdateValue)==0){
                DocketField::where('id',$request->docket_field_id)->where('docket_id',$tempDocketId)->update(['default_prefiller_id'=> null]);
            }else{
                DocketField::where('id',$request->docket_field_id)->where('docket_id',$tempDocketId)->update(['default_prefiller_id'=> serialize($finalUpdateValue)]);
            }
        }

        $prefiller = array();
        $docketPreFiller = DocketFiledPreFiller::where('docket_field_id',$request->docket_field_id)->get();
        foreach($docketPreFiller as $subRow):
            $prefiller[]   =  array(
                'id'=> $subRow->id,
                'value'=> $subRow->value,
                'root_id'=> $subRow->root_id,
                'index'=> $subRow->index,
                'docket_field_id'=> $subRow->docket_field_id,
                'docket_field_name'=>$subRow->docketField->label,
            );
        endforeach;


        $urlUpdatePreFiller = url('dashboard/company/docketBookManager/designDocket/updatePreFiller');
        $datas = $this->buildTreeArray($prefiller);
        $finalPrefillerView = array();
        foreach ($datas as $row){

            $prefillerForMaxIndex = DocketFiledPreFiller::where('docket_field_id',$row['docket_field_id'])->pluck('index')->toArray();
            $finalPrefillerMaxIndex =max($prefillerForMaxIndex);

            $docketField = DocketField::where('id',$row['docket_field_id'])->where('docket_id',$tempDocketId)->first();
            $defaultPrefillerId =unserialize($docketField->default_prefiller_id);

            $final = "";
            $this->prefillerFirstRow    =   true;
            $final .= '<tr><td>';
            if ($finalPrefillerMaxIndex == $row['index']){
                if ($defaultPrefillerId != null) {
                    if (in_array($row['id'], $defaultPrefillerId)) {
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark"  value="' . $row['id'] . '" items="' . $row["docket_field_id"] . '" checked ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="'.$row['id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -11px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'"  data-labels="'.$row['docket_field_name'].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none; top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>' ;
                    }else{
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark"  value="' . $row['id'] . '" items="' . $row["docket_field_id"] . '" ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="'.$row['id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -11px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row['docket_field_name'].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none; top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>' ;
                    }
                }else{
                    $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark"  value="' . $row['id'] . '" items="' . $row["docket_field_id"] . '"  ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="'.$row['id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -11px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row['docket_field_name'].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none; top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>' ;
                }
            }else{
                $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" disabled  ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="'.$row['id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -11px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row['docket_field_name'].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none; top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>' ;
            }
            if(count($row["prefiller"])>0){
                $final .=  $this->getPrefillerChild($row["prefiller"], $finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory);
            }
            $finalPrefillerView[] = array(
                'id'=>$row['docket_field_id'],
                'final'=>$final
            );
        }



        $message = 'Filler Added successfully.';
        return response()->json(['status' => true, 'message' => $message, 'finalPrefillerView' => $finalPrefillerView]);

    }

    public function deleteAllPreFiller($id){

        $docket_filld_prefillers =  DocketFiledPreFiller::where('docket_field_id', $id)->get();
        foreach($docket_filld_prefillers as $row){

            $row->delete();
        }
        DocketField::where('id',$id)->update(['default_prefiller_id'=> null]);
        flash('Docket prefillers deleted successfully.','success');
        return redirect()->back();

    }

    public function saveLinkPrefiller(Request $request){
        if ($request->docket_prefiller_id=="demo"){
            flash('Please select Prefiller.','danger');
            return redirect()->back();
        }else{
            $docket_prefiller=DocketPrefiller::where('id',$request->docket_prefiller_id)->firstOrFail();
            foreach($docket_prefiller->docketPrefillerValue as $row){
                $saveprefilier = new DocketFiledPreFiller;
                $saveprefilier->value = $row->label;
                $saveprefilier->docket_field_id = $request->dockets_field_id;
                $saveprefilier->save();
            }
            flash('demo  successfully.','success');
            return redirect()->back();
        }


     }



    public function deleteDesigneDocumentAttached(Request $request){
        $deleteDesigneDocumentAttached   =    DocketAttachments::where('id',$request->fieldId)->firstOrFail();
        $deleteDesigneDocumentAttached->delete();

    }

    public function downloadViewDocket($id){
        ini_set('max_execution_time', 300);
        $sentDocket     =   SentDockets::findOrFail($id);
        $approval_type = array();
        foreach ($sentDocket->sentDocketRecipientApproval as $items){
            $approval_type[] = array(
                'id' => $items->id,
                'status' =>$items->status,
                'full_name' => $items->userInfo->first_name." ".$items->userInfo->last_name,
                'approval_time' =>$items->approval_time,
                'name'=>$items->name,
                'signature'=>AmazoneBucket::url() . $items->signature
            );
        }

        $sentDocketRecepients = array();
        foreach ($sentDocket->recipientInfo as $sentDocketRecepient){
            $companyNameRecipent = "";
            if ($sentDocketRecepient->userInfo->employeeInfo){
                $companyNameRecipent = $sentDocketRecepient->userInfo->employeeInfo->companyInfo->name;
            }else if ($sentDocketRecepient->userInfo->companyInfo){
                $companyNameRecipent = $sentDocketRecepient->userInfo->companyInfo->name;
            }
            $sentDocketRecepients[]=array(
                'name'=>$sentDocketRecepient->userInfo->first_name." ".$sentDocketRecepient->userInfo->last_name,
                'company_name'=> $companyNameRecipent,
            );
        }
        $data= (new Collection($sentDocketRecepients))->sortBy('company_name');
        $receiverDetail = array();
        foreach ($data as $datas){
            $receiverDetail[$datas['company_name']][]= $datas['name'];

        }
        $recipientIds   =   $sentDocket->recipientInfo->pluck('user_id');
        $companyEmployeeQuery   =    Employee::whereIn('user_id',$recipientIds)->pluck('company_id');
        $empCompany    =    Company::whereIn('id',$companyEmployeeQuery)->pluck('id')->toArray();
        $adminCompanyQuery   =    Company::whereIn('user_id',$recipientIds)->pluck('id')->toArray();
        $company    =   Company::whereIn('id',array_unique(array_merge($empCompany,$adminCompanyQuery)))->get();
        $docketFields   =   SentDocketsValue::where('sent_docket_id',$sentDocket->id)->get();
        $docketTimer = SentDcoketTimerAttachment::where('sent_docket_id',$id)->where('type',1)->get();
        // return view('pdfTemplate.docketForward',compact('sentDocket','company','docketFields','docketTimer','approval_type','receiverDetail'));
        $pdf = PDF::loadView('pdfTemplate.docketForward',compact('sentDocket','company','docketFields','docketTimer','approval_type','receiverDetail'))->setPaper('a4','landscape')->setOptions(['dpi'=> 150,'isRemoteEnabled'=>true]);
        $pdf->setOptions(['dpi' => 150, 'defaultFont' => 'sans-serif', 'isRemoteEnabled' => true]);
        $fileName=preg_replace('/\s+/', '', $sentDocket->docketInfo->title."".$sentDocket->id);

        if(Session::get('company_id') == 1){
            $gridValuefirstRow = array();
            if($sentDocket->sentDocketValue){
                foreach($sentDocket->sentDocketValue as $key=>$sentDocketValue){
                    if($sentDocketValue->docketFieldInfo->docket_field_category_id == 22){
                        $docketGridField = DocketFieldGrid::where('docket_field_id',$sentDocketValue->docket_field_id)->get();
                        foreach($docketGridField as $docketGridFields){
                            $sentDocketGridValue  = DocketFieldGridValue::where('docket_field_grid_id',$docketGridFields->id)->where('docket_id',$sentDocket->id)->where('is_email_docket',0)->first();
                            if (@$docketGridFields->preview_value == 1){
                                $gridValuefirstRow[] = $sentDocketGridValue->value;
                            }
                        }

                    }
                }
            }
            if(count($gridValuefirstRow) != 0){
                return $pdf->download(implode('',$gridValuefirstRow).$fileName.'.pdf');
            }else{
                return $pdf->download($fileName.'.pdf');
            }
        }else{
            return $pdf->download($fileName.'.pdf');
        }

    }


    public function allDockets(Request $request)
    {

        $employeeIds = Employee::where('company_id', Session::get('company_id'))->pluck('user_id');
        $employeeIds[] = Company::find(Session::get('company_id'))->user_id;
        $receivedSentDocket = SentDocketRecipient::whereIn('user_id', $employeeIds)->distinct('sent_docket_id')->pluck('sent_docket_id')->toArray();
        $sentDockets = SentDockets::where('sender_company_id', Session::get('company_id'))->select('id', 'created_at')->take(2)->get();

        $dockets = EmailSentDocket::where('company_id', Session::get('company_id'))->select('id', 'created_at')->take(2)->get();

        //$sentDockets    =   SentDockets::whereIn('id',array_unique(array_merge($receivedSentDocket,$sentDocket)))->orderBy('created_at','desc')->get();
        $data = array();

        foreach ($sentDockets as $sentDocket) {

            $data[] = array('id' => $sentDocket->id, 'type' => 1, 'created_at' => $sentDocket->created_at);

        }

        foreach ($dockets as $docket) {

            $data[] = array('id' => $docket->id, 'type' => 2, 'created_at' => $docket->created_at);

        }

        $size = count($data);
        for ($i = 0; $i < $size; $i++) {
            for ($j = 0; $j < $size - 1 - $i; $j++) {
                if (strtotime($data[$j + 1]["created_at"]) > strtotime($data[$j]["created_at"])) {
                    $tempArray = $data[$j + 1];
                    $data[$j + 1] = $data[$j];
                    $data[$j] = $tempArray;
                }
            }
        }

        $currentPage = LengthAwarePaginator::resolveCurrentPage();

        $itemCollection = collect($data);

        $perPage = 2;

        $currentPageItems = $itemCollection->slice(($currentPage * $perPage) - $perPage, $perPage)->all();

        $paginatedItems = new LengthAwarePaginator($currentPageItems, count($itemCollection), $perPage);

        $paginatedItems->setPath($request->url());

    }


    public function exportDocket(Request $request){


           //        $sentDockets    =   SentDockets::where('company_id',Session::get('company_id'))->get();
           $date=Carbon::now()->format('d-M-Y');
           $selectDocketIds = $request->docketId;

           $checkDocketId = array();
           foreach ($selectDocketIds as $selectDocketId) {
               $id_get = SentDockets::where('id', $selectDocketId)->pluck('id');
               $checkDocketId[] = $id_get;
           }

           $sentDockets = SentDockets::whereIn('id', array_unique($checkDocketId))->get();

           $data = array();
           //  $csv = Writer::createFromFileObject('');
           $csv = Writer::createFromString('');
           $csv->setNewline("\r\n");
           $newline = $csv->getNewline();
           foreach ($sentDockets as $sentDocket) {
               $sent_dockets_value = SentDocketsValue::where('sent_docket_id', $sentDocket->id)->orderBy('created_at', 'asc')->get();

               $data['template_name'] = $sentDocket->docketInfo->title;
               $data['docket_id'] = $sentDocket->id;
               $data['from'] = $sentDocket->senderUserInfo->first_name . ' ' . $sentDocket->senderUserInfo->last_name . $newline . $sentDocket->senderCompanyInfo->name . $newline . $sentDocket->senderCompanyInfo->address . $newline . 'ABN: ' . $sentDocket->senderCompanyInfo->abn;

               $sentDocketValues = array();
               $sentDocketHeader = array();

               array_push($sentDocketHeader, 'Docket Id');
               array_push($sentDocketValues, $data['docket_id']);
               array_push($sentDocketHeader, 'From');
               array_push($sentDocketValues, $data['from']);

               $recipientInfos = $sentDocket->recipientInfo;
               $toArray = array();
               foreach ($recipientInfos as $recipientInfo) {
                   if(Employee::where('user_id', $recipientInfo->userInfo->id)->count()!=0):
                       $companyId = Employee::where('user_id', $recipientInfo->userInfo->id)->first()->company_id;
                   else :
                       $companyId   =   Company::where('user_id', $recipientInfo->userInfo->id)->first()->id;
                   endif;
                   $companyName = Company::where('id',$companyId)->first()->name;

                   $toArray[] =array(
                       "name"=> @$recipientInfo->userInfo->first_name. ' ' . @$recipientInfo->userInfo->last_name,
                       "company_name" =>$companyName,
                   );
               }
               $toname = array();
               foreach ($toArray as $toArrays){
                   $toname[]= '<b>Name:</b> '.$toArrays['name']."\r\n" .'Company Name: '.$toArrays['company_name']."\r\n";
               }

               $finalName =implode("\r\n",$toname);




               array_push($sentDocketHeader, 'To');
               array_push($sentDocketValues,$finalName);


               # code...
               foreach ($sent_dockets_value as $value) {

                   if ($value->docketFieldInfo->docket_field_category_id == 5 || $value->docketFieldInfo->docket_field_category_id == 9 || $value->docketFieldInfo->docket_field_category_id == 14) {

                       $imageValue = implode(" ", $value->sentDocketImageValue->pluck("value")->toArray());
                       if($imageValue==""){
                           array_push($sentDocketValues, "");
                       }else{
                           array_push($sentDocketValues, AmazoneBucket::url() . $imageValue);

                       }
                       array_push($sentDocketHeader, $value->label);

                   }
                   elseif ($value->docketFieldInfo->docket_field_category_id == 8) {

                       if ($value == '1') {

                           array_push($sentDocketValues, 'Yes');
                           array_push($sentDocketHeader, $value->label);

                       } else {

                           array_push($sentDocketValues, 'No');
                           array_push($sentDocketHeader, $value->label);
                       }

                   }
                   elseif ($value->docketFieldInfo->docket_field_category_id == 15) {

                       $documentValue = implode(" ", $value->sentDocketAttachment->pluck("url")->toArray());
                       if($documentValue==""){

                           array_push($sentDocketValues, "");
                       }else{
                           array_push($sentDocketValues, AmazoneBucket::url() . $documentValue);

                       }

                       array_push($sentDocketHeader, $value->label);

                   }
                   elseif ($value->docketFieldInfo->docket_field_category_id == 7) {
                       array_push($sentDocketHeader, "Unit Rate");
                       array_push($sentDocketValues, @$value->sentDocketUnitRateValue->first()->docketUnitRateInfo->label.": ".@$value->sentDocketUnitRateValue->first()->value.$newline.@$value->sentDocketUnitRateValue->last()->docketUnitRateInfo->label.": ".@$value->sentDocketUnitRateValue->last()->value.$newline."Total".": ".@$value->sentDocketUnitRateValue->last()->value * @$value->sentDocketUnitRateValue->first()->value);


                   }
                   elseif ($value->docketFieldInfo->docket_field_category_id == 20){
                       array_push($sentDocketHeader, $value->label);
                       $sentDocketValuess= array();

                       foreach($value->sentDocketManualTimer as $rows){
                           $sentDocketValuess[]=array(
                               'type'=>1,
                               'label'=>$rows->label,
                               'value'=>$rows->value,
                               'reason_for_break'=>''
                           );
                       }
                       foreach($value->sentDocketManualTimerBreak as $items){
                           $sentDocketValuess[]=array(
                               'type'=>2,
                               'label'=>$items->label,
                               'value'=>$items->value,
                               'reason_for_break'=>$items->reason
                           );
                       }

                       $r= array();
                       foreach($sentDocketValuess as $item){
                           $r[]= $item['label'].": ".$item['value'];


                       }
                       $s= array();
                       foreach($sentDocketValuess as $rowdata){
                           if ($rowdata['type']==2){
                               $s[]= $rowdata['reason_for_break'];
                           }

                       }

                       array_push($sentDocketValues, $r[0] .$newline. $r[1] . $newline. $r[2] .$newline. 'Reason for break: '.$s[0] .$newline.'Total Time: '.$value->value );

                   }
                   elseif ($value->docketFieldInfo->docket_field_category_id == 18){
                       $yesno = unserialize($value->label);
                       array_push($sentDocketHeader, @$yesno['title']);
                       if(@$yesno['label_value'][$value->value]['label_type']==1){
                           $yesNoValue = AmazoneBucket::url() . @$yesno['label_value'][$value->value]['label'];
                       }else{
                           $yesNoValue = @$yesno['label_value'][$value->value]['label'];

                       }
                       $yesnoNa = array();
                       if(count($value->SentDocValYesNoValueInfo)!=0){

                           foreach($value->SentDocValYesNoValueInfo as $rowData){
                               if($rowData->YesNoDocketsField->docket_field_category_id==5){
                                   $imageData=unserialize($rowData->value);
                                   $yesnoNa[]=array(

                                       'label'=>$rowData->label,
                                       'value'=>implode("\r\n",$imageData)

                                   );
                               }
                               if($rowData->YesNoDocketsField->docket_field_category_id==1){
                                   $yesnoNa[]=array(

                                       'label'=>$rowData->label,
                                       'value'=>$rowData->value,

                                   );
                               }
                           }

                       }
                       $rt= array();
                       foreach($yesnoNa as $itemss){
                           $rt[]= $itemss['label'].': ' .$itemss['value']."\r\n\r\n";

                       }
                       $test =implode("\n",$rt);


                       array_push($sentDocketValues,$yesNoValue.$newline.$newline."Explanation".$newline.$test);





                   }else {
                       array_push($sentDocketValues, $value->value);
                       array_push($sentDocketHeader, $value->label);
                   }

               }


               $csv->insertOne(array($data['template_name']));

               //insert the header
               $csv->insertOne($sentDocketHeader);

               //insert all the records
               $csv->insertAll(array($sentDocketValues));

               $csv->insertOne(array(""));

               //die;

           }
//           return $csv->output('Export-Docket-'.$date.'.csv');
           $csv->output('Export-Docket-'.$date.'.csv');



        //            }else{
        //                echo "please Select Docket";
        //            }


    }

    public function groupByTempletId($newDockeArray){
        $result = array();
        foreach ($newDockeArray as $data) {
            $id = $data['docketId'];
            if (isset($result[$id])) {
                $result[$id][] = $data;
            } else {
                $result[$id] = array($data);
            }
        }

        return $result;
    }
    public  function checkFieldOrder($docketFieldData,$sendDocketFileds){

        if($docketFieldData->docket_field_category_id == 30){
            return $docketFieldData;
        }
        foreach ($sendDocketFileds as $sendDocketFiled){
            if($sendDocketFiled->docket_field_id == $docketFieldData->id){
                return $docketFieldData;
            }
        }

    }


    public function checkGridValue($sentDocketValues){

        $value = array();
        //  foreach($sentDocketValue as $sentDocketValues){

        if($sentDocketValues['isEmail'] == true){

            $sendDocVal = EmailSentDocket::where('docket_id',$sentDocketValues['docketId'])->where('id',$sentDocketValues['sendDocketId'])->get()->first();
            foreach ($sendDocVal->sentDocketValue as $sendDocketFiled){
                if($sendDocketFiled->docketFieldInfo->docket_field_category_id == 22){
                    if($sendDocketFiled->emailSentDocketFieldGridValues){
                        if($sendDocketFiled->emailSentDocketFieldGridValues->count()>0)
                            $value[] = max(@$sendDocketFiled->emailSentDocketFieldGridValues->pluck('index')->toArray());
                    }
                }
            }
        }
        if($sentDocketValues['isEmail'] == false){
            $sendDocVal = SentDockets::where('docket_id',$sentDocketValues['docketId'])->where('id',$sentDocketValues['sendDocketId'])->get()->first();
            foreach ($sendDocVal->sentDocketValue as $sendDocketFiled){
                if($sendDocketFiled->docketFieldInfo->docket_field_category_id == 22){
                    if($sendDocketFiled->sentDocketFieldGridValues){
                        if(count($sendDocketFiled->sentDocketFieldGridValues->pluck('index')->toArray()) != 0){
                            $value[] = max(@$sendDocketFiled->sentDocketFieldGridValues->pluck('index')->toArray());

                        }
                    }

                }
            }
        }
        //  }
        return $value;
    }

//    public  function exportAllDocket(Request $request){
//
//        $sentDocketId = $request->d;
//        $sentEmailDocketId = $request->ed;
//        $alldockets = array([
//            'sent_docket'=>$sentDocketId,
//            'sent_email_docket'=>$sentEmailDocketId
//        ]);
//        $newDockeArray = array();
//        foreach($alldockets as $alldocket){
//            if ($alldocket['sent_email_docket'] != null) {
//                $checkSendDocketId = EmailSentDocket::whereIn('id', $alldocket['sent_email_docket'])->get();
//                foreach($checkSendDocketId as $checkSendDocketIds){
//                    $newDockeArray[] = array(
//                        'sendDocketId' => $checkSendDocketIds->id,
//                        'docketId' => $checkSendDocketIds->docket_id,
//                        'isEmail'=> true
//                    );
//                }
//            }
//
//            if ($alldocket['sent_docket'] != null) {
//                $checkSendDocketId = SentDockets::whereIn('id', $alldocket['sent_docket'])->get();
//                foreach($checkSendDocketId as $checkSendDocketIds){
//                    $newDockeArray[] = array(
//                        'sendDocketId' => $checkSendDocketIds->id,
//                        'docketId' => $checkSendDocketIds->docket_id,
//                        'isEmail'=> false
//                    );
//                }
//            }
//        }
//
//        $docketGroupData = $this->groupByTempletId($newDockeArray);
//        $data = array();
//        $csv = Writer::createFromString('');
//        $csv->setNewline("\r\n");
//        $date=Carbon::now()->format('d-M-Y');
//        $newline = $csv->getNewline();
//        foreach($docketGroupData as $key=>$docketGroupDatas ){
//            $sentDocketValues = array();
//            $sentDocketHeader = array();
//            $docket = Docket::where('id',$key)->get()->first();
//
//            // $docketFieldOrder = (new Collection(@$docket->docketField))->sortBy('order');
//            $docketFieldOrder =  DocketField::where('docket_id',$docket->id)->withTrashed()->orderBy('order','asc')->get();
//            if(ExportMapping::whereIn('docket_field_id',$docketFieldOrder->pluck('id')->toArray())->count()==0){
//
//                //HeaderValue
//                array_push($sentDocketHeader, "Docket Id");
//                array_push($sentDocketHeader, "From User");
//                array_push($sentDocketHeader, "To User");
//                array_push($sentDocketHeader, "From Company");
//                array_push($sentDocketHeader, "To Company");
//                array_push($sentDocketHeader, "Sender Address");
//                array_push($sentDocketHeader, "Recipient Address");
//                array_push($sentDocketHeader, "Sender Abn");
//                foreach($docketFieldOrder as $docketFieldOrders){
//                    if($docketFieldOrders->docket_field_category_id == 1 || $docketFieldOrders->docket_field_category_id == 2 || $docketFieldOrders->docket_field_category_id ==  3|| $docketFieldOrders->docket_field_category_id == 4 || $docketFieldOrders->docket_field_category_id == 6 || $docketFieldOrders->docket_field_category_id == 16 || $docketFieldOrders->docket_field_category_id == 12|| $docketFieldOrders->docket_field_category_id == 15 || $docketFieldOrders->docket_field_category_id == 26 || $docketFieldOrders->docket_field_category_id == 25 || $docketFieldOrders->docket_field_category_id == 13|| $docketFieldOrders->docket_field_category_id == 27){
//                        array_push($sentDocketHeader, $docketFieldOrders->label);
//                    }elseif($docketFieldOrders->docket_field_category_id == 20){
//                        foreach ($docketFieldOrders->docketManualTimer as $docketManualTimers){
//                            array_push($sentDocketHeader, $docketManualTimers->label);
//                        }
//                        foreach ($docketFieldOrders->docketManualTimerBreak as $docketManualTimerBreaks){
//                            array_push($sentDocketHeader, $docketManualTimerBreaks->label);
//                        }
//                        array_push($sentDocketHeader, "Explanation");
//                        array_push($sentDocketHeader, "Total Hours");
//
//                    }elseif($docketFieldOrders->docket_field_category_id == 18){
//                        array_push($sentDocketHeader, $docketFieldOrders->label);
//                        foreach ( $docketFieldOrders->yesNoField as $yesNoField){
//                            if($yesNoField->explanation == 1){
//                                array_push($sentDocketHeader, $yesNoField->label);
//                                foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                    if($yesNoDocketsField->docket_field_category_id == 5){
//                                        array_push($sentDocketHeader, $yesNoField->label.": ".$yesNoDocketsField->label);
//                                    }else{
//                                        array_push($sentDocketHeader, $yesNoField->label.": ".$yesNoDocketsField->label);
//                                    }
//                                }
//                            }else{
//                                array_push($sentDocketHeader, $yesNoField->label);
//                            }
//                        }
//
//
//                    }elseif($docketFieldOrders->docket_field_category_id == 5 || $docketFieldOrders->docket_field_category_id == 9 || $docketFieldOrders->docket_field_category_id == 14 ){
//                        array_push($sentDocketHeader, $docketFieldOrders->label);
//                    }elseif($docketFieldOrders->docket_field_category_id == 7){
//                        foreach ($docketFieldOrders->unitRate as $docketUnitRate){
//                            array_push($sentDocketHeader, $docketUnitRate->label);
//                        }
//                    }elseif($docketFieldOrders->docket_field_category_id == 24){
//                        foreach ($docketFieldOrders->tallyUnitRate as $docketTallyableUnitRate){
//                            array_push($sentDocketHeader, $docketTallyableUnitRate->label);
//                        }
//                    }elseif($docketFieldOrders->docket_field_category_id == 8){
//                        array_push($sentDocketHeader, $docketFieldOrders->label);
//                    }elseif($docketFieldOrders->docket_field_category_id == 22){
//
//                        foreach($docketFieldOrders->girdFields as $girdFields ){
//                            if($girdFields->docket_field_category_id == 20 ){
//                                array_push($sentDocketHeader, "Form");
//                                array_push($sentDocketHeader, "To");
//                                array_push($sentDocketHeader, "Total Break");
//                                array_push($sentDocketHeader, "Explanation");
//                                array_push($sentDocketHeader, "Total Hours");
//                            }elseif($girdFields->docket_field_category_id == 8){
//                                array_push($sentDocketHeader, $docketFieldOrders->label);
//                            }else{
//                                array_push($sentDocketHeader, $girdFields->label);
//                            }
//                        }
//
//                    }
//                }
//
//                //value
//                // $checkGridValue = $this->checkGridValue( $docketGroupDatas);
//                $allGridValue = array();
//                foreach($docketGroupDatas as $singleData){
//                    $checkGridValue = $this->checkGridValue( $singleData);
//
//                    $gridRow = array();
//                    if($singleData['isEmail'] == true){
//                        $sendDocVal = @EmailSentDocket::where('docket_id',$singleData['docketId'])->where('id',$singleData['sendDocketId'])->get()->first();
//                        if(count($checkGridValue) != 0){
//
//                            $maxValue = max($checkGridValue);
//                            for ($i = 0; $i <= $maxValue; $i++) {
//                                //Docket Id
//                                $gridRow[$i][] = $sendDocVal->formatted_id;
//
//                                //From User
//                                $gridRow[$i][] = $sendDocVal->sender_name;
//                                //To User
//                                $recipientInfos = $sendDocVal->recipientInfo;
//                                $toArray = array();
//                                $companyToArray =  array();
//                                $companyAddressToArray = array();
//                                foreach ($recipientInfos as $recipientInfo) {
//                                    $toArray[] = @$recipientInfo->emailUserInfo->email;
//                                    $companyToArray[] = $recipientInfo->receiver_company_name;
//                                    $companyAddressToArray[] = $recipientInfo->receiver_company_address;
//                                }
//                                $gridRow[$i][] = implode("; ",$toArray);
//
//                                //From Company
//                                $gridRow[$i][] = $sendDocVal->company_name;
//                                // To Company
//                                $gridRow[$i][] = implode("; ",$companyToArray);
//
//                                //Sender Address
//                                $gridRow[$i][] = $sendDocVal->company_address ;
//
//                                //Recipient Address
//                                $gridRow[$i][] = implode("; ",$companyAddressToArray);
//                                //Sender Abn
//                                $gridRow[$i][] = $sendDocVal->abn;
//                                foreach($docketFieldOrder as $docketFieldData){
//                                    if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
//                                        $valueData = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value;
//                                        if($valueData){
//                                            $gridRow[$i][] = $valueData;
//                                        }else{
//                                            $gridRow[$i][] = "";
//
//                                        }
//                                    }elseif($docketFieldData->docket_field_category_id == 20){
//
//                                        $sentDocketManualTimer = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimer;
//                                        if($sentDocketManualTimer){
//                                            foreach ($sentDocketManualTimer as $sentDocketManualTimers){
//                                                if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
//                                                    $gridRow[$i][] = Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A');
//                                                }else{
//                                                    $gridRow[$i][] =$sentDocketManualTimers->value;
//                                                }
//
//                                            }
//                                        }else{
//                                            foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
//                                                $gridRow[$i][] = "";
//                                            }
//                                        }
//
//                                        $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
//                                        if($sentDocketManualTimerBreak){
//                                            foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                                $gridRow[$i][] = $sentDocketManualTimerBreaks->value;
//                                            }
//                                        }else{
//                                            foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
//                                                $gridRow[$i][] = "";
//                                            }
//                                        }
//
//                                        $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
//                                        if($sentDocketManualTimerBreak){
//                                            foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                                if($sentDocketManualTimerBreaks->reason == "n/a"){
//                                                    $gridRow[$i][] = $sentDocketManualTimerBreaks->reason;
//                                                }else{
//                                                    $gridRow[$i][] = " ";
//                                                }
//                                            }
//                                        }else{
//                                            $gridRow[$i][] = " ";
//                                        }
//                                        if($docketFieldData->time_format == "Hours&Minutes"){
//                                            $gridRow[$i][] = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value;
//
//                                        }else{
//                                            $decimal = str_replace("Total: ","", @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value);
//                                            $hours = explode(" ",$decimal)[0];
//                                            $minutes = explode(" ",$decimal)[2] * (1/60);
//                                            $gridRow[$i][] = $hours+$minutes;
//
//                                        }
//                                    }elseif($docketFieldData->docket_field_category_id == 18){
//
//                                        $gridRow[$i][] = $docketFieldData->label;
//                                        foreach ( $docketFieldData->yesNoField as $yesNoField){
//                                            if($yesNoField->explanation == 1){
//                                                $gridRow[$i][]= $yesNoField->label;
//                                                $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->SentEmailDocValYesNoValueInfo;
//                                                if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
//                                                    if(count($SentDocValYesNoValueInfo)!=0){
//                                                        foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){
//                                                            if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
//                                                                $imageValue = unserialize($SentDocValYesNoValueInfos->value);
//
//                                                                $toArray = array();
//                                                                foreach ($imageValue as $imageValues) {
//                                                                    $toArray[] = asset($imageValues);
//                                                                }
//                                                                $gridRow[$i][] = implode(";",$toArray);
//
//                                                            }else{
//                                                                $gridRow[$i][]= $SentDocValYesNoValueInfos->value;
//                                                            }
//                                                        }
//                                                    }else{
//                                                        foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                            if($yesNoDocketsField->docket_field_category_id == 5){
//                                                                $gridRow[$i][]= "";
//                                                            }else{
//                                                                $gridRow[$i][] = "";
//                                                            }
//                                                        }
//                                                    }
//
//                                                }else{
//                                                    foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                        if($yesNoDocketsField->docket_field_category_id == 5){
//                                                            $gridRow[$i][]= "";
//                                                        }else{
//                                                            $gridRow[$i][] = "";
//                                                        }
//                                                    }
//                                                }
//
//                                            }else{
//                                                $gridRow[$i][]= "";
//                                            }
//                                        }
//
//
//                                    }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
//                                        $docketImageValues = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
//                                        $toArray = array();
//                                        if($docketImageValues){
//                                            foreach ($docketImageValues as $docketImageValue) {
//                                                $toArray[] = asset($docketImageValue->value);
//                                            }
//                                            $gridRow[$i][] =  implode("; ",$toArray);
//                                        }else{
//                                            $gridRow[$i][] =  " ";
//                                        }
//                                    }elseif($docketFieldData->docket_field_category_id == 7 ){
//                                        $docketUnitRate = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
//                                        if($docketUnitRate){
//                                            foreach ($docketUnitRate as $sentDocketUnitRateValue){
//                                                $gridRow[$i][] =   $sentDocketUnitRateValue->value;
//                                            }
//                                        }else{
//                                            foreach ($docketFieldData->unitRate as $docketUnitRate){
//                                                $gridRow[$i][] =   " ";
//                                            }
//                                        }
//                                    }elseif($docketFieldData->docket_field_category_id == 24){
//                                        $DocketTallyable = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
//                                        if($DocketTallyable){
//                                            foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
//                                                $gridRow[$i][] = $sentDocketTallyableUnitRateValue->value;
//                                            }
//                                        }else{
//                                            foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
//                                                $gridRow[$i][] =  " ";
//                                            }
//                                        }
//                                    }elseif($docketFieldData->docket_field_category_id == 8){
//                                        $checkBoxValue = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first();
//                                        if($checkBoxValue != null){
//                                            if($checkBoxValue->value == 1){
//                                                $gridRow[$i][] = "Yes";
//                                            }else if($checkBoxValue->value == 0){
//                                                $gridRow[$i][] = "No";
//                                            }
//                                        }else{
//                                            $gridRow[$i][] = "";
//                                        }
//
//
//
//                                    }elseif($docketFieldData->docket_field_category_id == 22){
//                                        foreach($docketFieldData->girdFields as $girdField){
//                                            $DocFieldGridVal = DocketFieldGridValue::where('docket_id',$sendDocVal->id)->where('docket_field_grid_id',$girdField->id)->where('index',$i)->get()->first();
//                                            if($girdField->docket_field_category_id == 20){
//                                                $sendGridManualTimerValue = json_decode(@$DocFieldGridVal->value, true);
//                                                if($DocFieldGridVal){
//                                                    if($sendGridManualTimerValue['from'] != 0 && $sendGridManualTimerValue['from'] != 'n/a'  && $sendGridManualTimerValue['from'] != 'N/a' && $sendGridManualTimerValue['from']!= null){
//                                                        $gridRow[$i][] = Carbon::parse($sendGridManualTimerValue['from'] )->format('d-M.-Y g:i A') ;
//                                                    }else{
//                                                        $gridRow[$i][] = $sendGridManualTimerValue['from'];
//                                                    }
//                                                    if($sendGridManualTimerValue['to'] != 0 && $sendGridManualTimerValue['to'] != 'n/a'  && $sendGridManualTimerValue['to'] != 'N/a' && $sendGridManualTimerValue['to']!= null){
//                                                        $gridRow[$i][] =   Carbon::parse($sendGridManualTimerValue['to'] )->format('d-M.-Y g:i A');
//
//                                                    }else{
//                                                        $gridRow[$i][] =  $sendGridManualTimerValue['to'];
//
//                                                    }
//
//
//                                                    if($sendGridManualTimerValue['breakDuration'] != 0){
//                                                        $gridRow[$i][] = $this->convertHrsMin($sendGridManualTimerValue['breakDuration']) ;
//                                                    }else{
//                                                        $gridRow[$i][] = "0 Hour 0 Minute" ;
//                                                    }
//                                                    if($sendGridManualTimerValue['explanation'] != ""){
//                                                        $gridRow[$i][] = $sendGridManualTimerValue['explanation'] ;
//                                                    }else{
//                                                        $gridRow[$i][] = "N/a" ;
//                                                    }
//                                                    if($sendGridManualTimerValue['totalDuration'] != 0){
//
//                                                        if($girdField->time_format == "Hours&Minutes"){
//                                                            $gridRow[$i][] = $this->convertHrsMin($sendGridManualTimerValue['totalDuration']);
//                                                        }else{
//                                                            $decimal =  $this->convertHrsMin($sendGridManualTimerValue['totalDuration']);
//                                                            $hours = explode(" ",$decimal)[0];
//                                                            $minutes = explode(" ",$decimal)[2] * (1/60);
//                                                            $gridRow[$i][] = $hours+$minutes;
//                                                        }
//
//                                                    }else{
//                                                        $gridRow[$i][] = "0 Hour 0 Minute" ;
//                                                    }
//                                                }else{
//                                                    $gridRow[$i][] = " ";
//                                                    $gridRow[$i][] = " ";
//                                                    $gridRow[$i][] = " ";
//                                                    $gridRow[$i][] = " ";
//                                                    $gridRow[$i][] = " ";
//                                                }
//
//
//
//                                            }else if($girdField->docket_field_category_id == 8){
//                                                if($DocFieldGridVal){
//                                                    if(@$DocFieldGridVal->value == 1){
//                                                        $gridRow[$i][] =  "Yes";
//
//                                                    }else{
//                                                        $gridRow[$i][] =  "No";
//                                                    }
//                                                }else{
//                                                    $gridRow[$i][] =  " ";
//                                                }
//                                            }
//                                            else if( $girdField->docket_field_category_id == 9){
//                                                $imageValue =  @$DocFieldGridVal->value;
//                                                $toArray = array();
//                                                if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
//                                                    $gridRow[$i][] =  "";
//                                                }else{
//                                                    foreach(unserialize($imageValue) as $exportValue){
//                                                        $toArray[] = asset($exportValue["image"]);
//                                                    }
//                                                    $gridRow[$i][] =  implode("; ",$toArray);
//                                                }
//                                            }else if($girdField->docket_field_category_id == 5  || $girdField->docket_field_category_id == 14 ){
//                                                $imageValue =  @$DocFieldGridVal->value;
//
//                                                $toArray = array();
//                                                if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
//                                                    $gridRow[$i][] =  "";
//                                                }else{
//
//                                                    foreach(unserialize($imageValue) as $exportValue){
//                                                        $toArray[] = asset($exportValue);
//                                                    }
//                                                    $gridRow[$i][] =  implode("; ",$toArray);
//
//                                                }
//
//
//                                            }else{
//                                                $gridRow[$i][] =  @$DocFieldGridVal->value;
//                                            }
//
//
//                                        }
//                                    }
//
//                                }
//
//                            }
//                            $sentDocketValues[] = $gridRow;
//                        }else{
//
//                            array_push($gridRow,$sendDocVal->formatted_id);
//                            //From User
//                            array_push($gridRow,$sendDocVal->sender_name);
//
//                            //To User
//                            $recipientInfos = $sendDocVal->recipientInfo;
//                            $toArray = array();
//                            $companyToArray =  array();
//                            $companyAddressToArray = array();
//                            foreach ($recipientInfos as $recipientInfo) {
//                                $toArray[] = @$recipientInfo->emailUserInfo->email;
//                                $companyToArray[] = $recipientInfo->receiver_company_name;
//                                $companyAddressToArray[] = $recipientInfo->receiver_company_address;
//                            }
//                            array_push($gridRow, implode("; ",$toArray));
//
//                            //From Company
//                            array_push($gridRow, $sendDocVal->company_name);
//                            // To Company
//
//                            array_push($gridRow, implode("; ",$companyToArray));
//
//                            //Sender Address
//                            array_push($gridRow, $sendDocVal->company_address);
//
//                            //Recipient Address
//                            array_push($gridRow, implode("; ",$companyAddressToArray));
//                            //Sender Abn
//                            array_push($gridRow, $sendDocVal->abn);
//
//
//
//
//                            foreach($docketFieldOrder as $docketFieldData){
//                                if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
//                                    $valueData = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value;
//                                    if($valueData){
//                                        array_push($gridRow, @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value);
//                                    }else{
//                                        array_push($gridRow, "");
//                                    }
//                                }elseif($docketFieldData->docket_field_category_id == 20){
//                                    $sentDocketManualTimer = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimer;
//                                    if($sentDocketManualTimer){
//                                        foreach ($sentDocketManualTimer as $sentDocketManualTimers){
//                                            if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
//                                                array_push($gridRow, Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A'));
//                                            }else{
//                                                array_push($gridRow, $sentDocketManualTimers->value);
//                                            }
//                                        }
//                                    }else{
//                                        foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
//                                            array_push($gridRow, "");
//                                        }
//                                    }
//
//                                    $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
//                                    if($sentDocketManualTimerBreak){
//                                        foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                            array_push($gridRow, $sentDocketManualTimerBreaks->value);
//                                        }
//                                    }else{
//                                        foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
//                                            array_push($gridRow,"");
//                                        }
//                                    }
//
//                                    $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
//                                    if($sentDocketManualTimerBreak){
//                                        foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                            if($sentDocketManualTimerBreaks->reason == "n/a"){
//                                                array_push($gridRow, $sentDocketManualTimerBreaks->reason);
//                                            }else{
//                                                array_push($gridRow, " ");
//                                            }
//                                        }
//                                    }else{
//                                        array_push($gridRow, " ");
//                                    }
//
//
//                                    if($docketFieldData->time_format == "Hours&Minutes"){
//
//                                        array_push($gridRow, @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value);
//                                    }else{
//                                        $decimal = str_replace("Total: ","", @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value);
//                                        $hours = explode(" ",$decimal)[0];
//                                        $minutes = explode(" ",$decimal)[2] * (1/60);
//                                        array_push($gridRow, $hours+$minutes);
//                                    }
//
//                                }elseif($docketFieldData->docket_field_category_id == 18){
//                                    array_push($gridRow, $docketFieldData->label);
//                                    foreach ( $docketFieldData->yesNoField as $yesNoField){
//                                        if($yesNoField->explanation == 1){
//                                            array_push($gridRow, $yesNoField->label);
//                                            $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->SentEmailDocValYesNoValueInfo;
//                                            if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
//                                                if(count($SentDocValYesNoValueInfo)!=0){
//                                                    foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){
//                                                        if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
//                                                            $imageValue = unserialize($SentDocValYesNoValueInfos->value);
//                                                            $toArray = array();
//                                                            foreach ($imageValue as $imageValues) {
//                                                                $toArray[] = asset($imageValues);
//                                                            }
//
//                                                            array_push($gridRow, implode(";",$toArray));
//                                                        }else{
//                                                            array_push($gridRow, $SentDocValYesNoValueInfos->value);
//                                                        }
//                                                    }
//                                                }else{
//                                                    foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                        if($yesNoDocketsField->docket_field_category_id == 5){
//                                                            array_push($gridRow, "");
//                                                        }else{
//                                                            array_push($gridRow, "");
//                                                        }
//                                                    }
//                                                }
//
//                                            }else{
//                                                foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                    if($yesNoDocketsField->docket_field_category_id == 5){
//                                                        array_push($gridRow, "");
//                                                    }else{
//                                                        array_push($gridRow, "");
//                                                    }
//                                                }
//                                            }
//
//                                        }else{
//                                            array_push($gridRow, "");
//                                        }
//                                    }
//
//
//
//                                }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
//                                    $docketImageValues = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
//                                    $toArray = array();
//                                    if($docketImageValues){
//                                        foreach ($docketImageValues as $docketImageValue) {
//                                            $toArray[] = asset($docketImageValue->value);
//                                        }
//                                        array_push($gridRow,  implode("; ",$toArray));
//                                    }else{
//                                        array_push($gridRow,  " ");
//                                    }
//
//                                }elseif($docketFieldData->docket_field_category_id == 7 ){
//                                    $docketUnitRate = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
//                                    if($docketUnitRate){
//                                        foreach ($docketUnitRate as $sentDocketUnitRateValue){
//                                            array_push($gridRow,  $sentDocketUnitRateValue->value);
//                                        }
//                                    }else{
//                                        foreach ($docketFieldData->unitRate as $docketUnitRate){
//                                            array_push($gridRow,  " ");
//                                        }
//                                    }
//
//                                }elseif($docketFieldData->docket_field_category_id == 24){
//                                    $DocketTallyable = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
//                                    if($DocketTallyable){
//                                        foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
//                                            array_push($gridRow, $sentDocketTallyableUnitRateValue->value);
//                                        }
//                                    }else{
//                                        foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
//                                            array_push($gridRow,  " ");
//                                        }
//                                    }
//                                }elseif($docketFieldData->docket_field_category_id == 8){
//                                    $checkBoxValue = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first();
//                                    if($checkBoxValue != null){
//                                        if($checkBoxValue->value == 1){
//                                            array_push($gridRow, "Yes");
//                                        }else if($checkBoxValue->value == 0){
//                                            array_push($gridRow, "No");
//                                        }
//                                    }else{
//                                        array_push($gridRow, " ");
//                                    }
//
//
//
//
//                                }elseif($docketFieldData->docket_field_category_id == 22){
//                                    foreach($docketFieldData->girdFields as $girdFields ){
//                                        if($girdFields->docket_field_category_id == 20){
//                                            array_push($gridRow, "");
//                                            array_push($gridRow, "");
//                                            array_push($gridRow, "");
//                                            array_push($gridRow, "");
//                                            array_push($gridRow, "");
//                                        }elseif($girdFields->docket_field_category_id == 8){
//                                            array_push($gridRow, "");
//                                        }else{
//                                            array_push($gridRow, " ");
//                                        }
//
//                                    }
//                                }
//
//                            }
//                            $sentDocketValues['nongrid'][] = $gridRow;
//                        }
//                    }
//                    if($singleData['isEmail'] == false){
//                        $sendDocVal = @SentDockets::where('docket_id',$singleData['docketId'])->where('id',$singleData['sendDocketId'])->get()->first();
//                        if(count($checkGridValue) != 0){
//                            $maxValue = max($checkGridValue);
//                            for ($i = 0; $i <= $maxValue; $i++) {
//
//
//                                //Docket Id
//                                $gridRow[$i][] =$sendDocVal->formatted_id;
//
//                                //From User
//                                $gridRow[$i][] = $sendDocVal->sender_name;
//                                //To User
//                                $recipientInfos = $sendDocVal->recipientInfo;
//                                $toArray = array();
//                                $companyToArray =  array();
//                                $companyAddressToArray = array();
//                                foreach ($recipientInfos as $recipientInfo) {
//                                    if(Employee::where('user_id', $recipientInfo->userInfo->id)->count()!=0):
//                                        $companyId = Employee::where('user_id', $recipientInfo->userInfo->id)->first()->company_id;
//                                    else :
//                                        $companyId   =   @Company::where('user_id', @$recipientInfo->userInfo->id)->first();
//                                    endif;
//                                    $toArray[] = @$recipientInfo->userInfo->first_name. ' ' . @$recipientInfo->userInfo->last_name;
//                                    $companyToArray[] = @Company::where('id',@$companyId->id)->first()->name;
//                                    $companyAddressToArray[] = @Company::where('id',@$companyId->id)->first()->address;
//                                }
//
//                                $gridRow[$i][] = implode("; ",$toArray);
//
//                                //From Company
//                                $gridRow[$i][] = $sendDocVal->company_name;
//                                // To Company
//                                $gridRow[$i][] = implode("; ",$companyToArray);
//
//                                //Sender Address
//                                $gridRow[$i][] = $sendDocVal->company_address ;
//
//                                //Recipient Address
//                                $gridRow[$i][] = implode("; ",$companyAddressToArray);
//                                //Sender Abn
//                                $gridRow[$i][] = $sendDocVal->abn;
//
//
//
//
//
//                                foreach($docketFieldOrder as $docketFieldData){
//
//                                    if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
//                                        $valueData = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value;
//                                        if($valueData){
//                                            $gridRow[$i][] = $valueData;
//                                        }else{
//                                            $gridRow[$i][] = "";
//
//                                        }
//                                    }elseif($docketFieldData->docket_field_category_id == 20){
//
//                                        $sentDocketManualTimer = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimer;
//                                        if($sentDocketManualTimer){
//                                            foreach ($sentDocketManualTimer as $sentDocketManualTimers){
//                                                if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
//                                                    $gridRow[$i][] = Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A');
//                                                }else{
//                                                    $gridRow[$i][] = $sentDocketManualTimers->value;
//
//                                                }
//
//
//                                            }
//                                        }else{
//                                            foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
//                                                $gridRow[$i][] = "";
//                                            }
//                                        }
//
//                                        $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
//                                        if($sentDocketManualTimerBreak){
//                                            foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                                $gridRow[$i][] = $sentDocketManualTimerBreaks->value;
//                                            }
//                                        }else{
//                                            foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
//                                                $gridRow[$i][] = "";
//                                            }
//                                        }
//
//                                        $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
//                                        if($sentDocketManualTimerBreak){
//                                            foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                                if($sentDocketManualTimerBreaks->reason == "n/a"){
//                                                    $gridRow[$i][] = $sentDocketManualTimerBreaks->reason;
//                                                }else{
//                                                    $gridRow[$i][] = " ";
//                                                }
//                                            }
//                                        }else{
//                                            $gridRow[$i][] = " ";
//                                        }
//
//
//                                        if($docketFieldData->time_format == "Hours&Minutes"){
//                                            $gridRow[$i][] = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value;
//                                        }else{
//                                            $decimal = str_replace("Total: ","", @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
//                                            $hours = explode(" ",$decimal)[0];
//                                            $minutes = explode(" ",$decimal)[2] * (1/60);
//                                            $gridRow[$i][] = $hours+$minutes;
//                                        }
//
//
//
//                                    }elseif($docketFieldData->docket_field_category_id == 18){
//
//                                        $gridRow[$i][] = $docketFieldData->label;
//                                        foreach ( $docketFieldData->yesNoField as $yesNoField){
//                                            if($yesNoField->explanation == 1){
//                                                $gridRow[$i][]= $yesNoField->label;
//                                                $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->SentDocValYesNoValueInfo;
//                                                if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
//                                                    if(count($SentDocValYesNoValueInfo)!=0){
//                                                        foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){
//                                                            if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
//                                                                $imageValue = unserialize($SentDocValYesNoValueInfos->value);
//                                                                $toArray = array();
//                                                                foreach ($imageValue as $imageValues) {
//                                                                    $toArray[] = asset($imageValues);
//                                                                }
//
//
//                                                                $gridRow[$i][] = implode(";",$toArray);
//                                                            }else{
//                                                                $gridRow[$i][]= $SentDocValYesNoValueInfos->value;
//                                                            }
//                                                        }
//                                                    }else{
//                                                        foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                            if($yesNoDocketsField->docket_field_category_id == 5){
//                                                                $gridRow[$i][]= "";
//                                                            }else{
//                                                                $gridRow[$i][] = "";
//                                                            }
//                                                        }
//                                                    }
//
//                                                }else{
//                                                    foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                        if($yesNoDocketsField->docket_field_category_id == 5){
//                                                            $gridRow[$i][]= "";
//                                                        }else{
//                                                            $gridRow[$i][] = "";
//                                                        }
//                                                    }
//                                                }
//
//                                            }else{
//                                                $gridRow[$i][]= "";
//                                            }
//                                        }
//
//
//                                    }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
//
//                                        $docketImageValues = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
//                                        $toArray = array();
//                                        if($docketImageValues){
//                                            foreach ($docketImageValues as $docketImageValue) {
//                                                $toArray[] = asset($docketImageValue->value);
//                                            }
//                                            $gridRow[$i][] =  implode("; ",$toArray);
//                                        }else{
//                                            $gridRow[$i][] =  " ";
//                                        }
//
//                                    }elseif($docketFieldData->docket_field_category_id == 7 ){
//                                        $docketUnitRate = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
//                                        if($docketUnitRate){
//                                            foreach ($docketUnitRate as $sentDocketUnitRateValue){
//                                                $gridRow[$i][] =   $sentDocketUnitRateValue->value;
//                                            }
//                                        }else{
//                                            foreach ($docketFieldData->unitRate as $docketUnitRate){
//                                                $gridRow[$i][] =   " ";
//                                            }
//                                        }
//                                    }elseif($docketFieldData->docket_field_category_id == 24){
//                                        $DocketTallyable = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
//                                        if($DocketTallyable){
//                                            foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
//                                                $gridRow[$i][] = $sentDocketTallyableUnitRateValue->value;
//                                            }
//                                        }else{
//                                            foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
//                                                $gridRow[$i][] =  " ";
//                                            }
//                                        }
//                                    }elseif($docketFieldData->docket_field_category_id == 8){
//                                        $checkBoxValue = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first();
//                                        if($checkBoxValue != null){
//                                            if($checkBoxValue->value == 1){
//                                                $gridRow[$i][] = "Yes";
//
//                                            }else if($checkBoxValue->value == 0){
//                                                $gridRow[$i][] = "No";
//                                            }
//                                        }else{
//                                            $gridRow[$i][] = "";
//                                        }
//                                    }elseif($docketFieldData->docket_field_category_id == 22){
//                                        foreach($docketFieldData->girdFields as $girdField){
//                                            $DocFieldGridVal = DocketFieldGridValue::where('docket_id',$sendDocVal->id)->where('docket_field_grid_id',$girdField->id)->where('index',$i)->get()->first();
//                                            if($girdField->docket_field_category_id == 20){
//                                                $sendGridManualTimerValue = json_decode(@$DocFieldGridVal->value, true);
//                                                if($DocFieldGridVal){
//                                                    print($sendDocVal->id."--");
//                                                    if($sendGridManualTimerValue['from'] != 0 && $sendGridManualTimerValue['from'] != 'n/a'  && $sendGridManualTimerValue['from'] != 'N/a' && $sendGridManualTimerValue['from']!= null){
//                                                        $gridRow[$i][] =   Carbon::parse($sendGridManualTimerValue['from'])->format('d-M.-Y g:i A') ;
//                                                    }else{
//                                                        $gridRow[$i][] =   $sendGridManualTimerValue['from'];
//                                                    }
//                                                    if($sendGridManualTimerValue['to'] != 0 && $sendGridManualTimerValue['to'] != 'n/a'  && $sendGridManualTimerValue['to'] != 'N/a' && $sendGridManualTimerValue['to']!= null){
//                                                        $gridRow[$i][] =   Carbon::parse($sendGridManualTimerValue['to'])->format('d-M.-Y g:i A');
//                                                    }else{
//                                                        $gridRow[$i][] =   $sendGridManualTimerValue['to'];
//                                                    }
//                                                    if($sendGridManualTimerValue['breakDuration'] != 0){
//                                                        $gridRow[$i][] = $this->convertHrsMin($sendGridManualTimerValue['breakDuration']);
//                                                    }else{
//                                                        $gridRow[$i][] = "0 Hour 0 Minute" ;
//                                                    }
//                                                    if($sendGridManualTimerValue['explanation'] != ""){
//                                                        $gridRow[$i][] = $sendGridManualTimerValue['explanation'] ;
//                                                    }else{
//                                                        $gridRow[$i][] = "N/a" ;
//                                                    }
//                                                    if($sendGridManualTimerValue['totalDuration'] != 0){
//                                                        if($girdField->time_format == "Hours&Minutes"){
//                                                            $gridRow[$i][] = $this->convertHrsMin($sendGridManualTimerValue['totalDuration']);
//                                                        }else{
//                                                            $decimal = $this->convertHrsMin($sendGridManualTimerValue['totalDuration']);
//                                                            $hours = explode(" ",$decimal)[0];
//                                                            $minutes = explode(" ",$decimal)[2] * (1/60);
//                                                            $gridRow[$i][] = $hours+$minutes;
//                                                        }
//
//                                                    }else{
//                                                        $gridRow[$i][] = "0 Hour 0 Minute" ;
//                                                    }
//                                                }else{
//                                                    $gridRow[$i][] = " ";
//                                                    $gridRow[$i][] = " ";
//                                                    $gridRow[$i][] = " ";
//                                                    $gridRow[$i][] = " ";
//                                                    $gridRow[$i][] = " ";
//                                                }
//
//
//
//                                            }else if($girdField->docket_field_category_id == 8){
//                                                if($DocFieldGridVal){
//                                                    if(@$DocFieldGridVal->value == 1){
//                                                        $gridRow[$i][] =  "Yes";
//                                                    }else{
//                                                        $gridRow[$i][] =  "No";
//                                                    }
//
//
//                                                }else{
//                                                    $gridRow[$i][] =  " ";
//                                                }
//
//
//                                            }
//                                            else if( $girdField->docket_field_category_id == 9){
//                                                $imageValue =  @$DocFieldGridVal->value;
//                                                $toArray = array();
//                                                if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
//                                                    $gridRow[$i][] =  "";
//                                                }else{
//                                                    foreach(unserialize($imageValue) as $exportValue){
//                                                        $toArray[] = asset($exportValue["image"]);
//                                                    }
//                                                    $gridRow[$i][] =  implode("; ",$toArray);
//                                                }
//                                            }else if($girdField->docket_field_category_id == 5  || $girdField->docket_field_category_id == 14 ){
//                                                $imageValue =  @$DocFieldGridVal->value;
//
//                                                $toArray = array();
//                                                if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
//                                                    $gridRow[$i][] =  "";
//                                                }else{
//
//                                                    foreach(unserialize($imageValue) as $exportValue){
//                                                        $toArray[] = asset($exportValue);
//                                                    }
//                                                    $gridRow[$i][] =  implode("; ",$toArray);
//
//                                                }
//
//
//                                            }else{
//                                                $gridRow[$i][] =  @$DocFieldGridVal->value;
//                                            }
//
//
//                                        }
//                                    }
//
//                                }
//
//                            }
//                            $sentDocketValues[] = $gridRow;
//                        }else{
//
//
//
//                            //Docket Id
//                            array_push($gridRow,$sendDocVal->formatted_id);
//
//                            //From User
//
//                            array_push($gridRow,$sendDocVal->sender_name);
//                            //To User
//                            $recipientInfos = $sendDocVal->recipientInfo;
//                            $toArray = array();
//                            $companyToArray =  array();
//                            $companyAddressToArray = array();
//                            foreach ($recipientInfos as $recipientInfo) {
//                                if(Employee::where('user_id', $recipientInfo->userInfo->id)->count()!=0):
//                                    $companyId = Employee::where('user_id', $recipientInfo->userInfo->id)->first()->company_id;
//                                else :
//                                    $companyId   =   Company::where('user_id', @$recipientInfo->userInfo->id)->first();
//                                endif;
//                                $toArray[] = @$recipientInfo->userInfo->first_name. ' ' . @$recipientInfo->userInfo->last_name;
//                                $companyToArray[] = @Company::where('id',@$companyId->id)->first()->name;
//                                $companyAddressToArray[] = @Company::where('id',@$companyId->id)->first()->address;
//                            }
//
//
//                            array_push($gridRow,implode("; ",$toArray));
//
//                            //From Company
//                            array_push($gridRow,$sendDocVal->company_name);
//                            // To Company
//                            array_push($gridRow,implode("; ",$companyToArray));
//
//                            //Sender Address
//                            array_push($gridRow,$sendDocVal->company_address);
//
//                            //Recipient Address
//                            array_push($gridRow,implode("; ",$companyAddressToArray));
//                            //Sender Abn
//                            array_push($gridRow,$sendDocVal->abn);
//
//                            foreach($docketFieldOrder as $docketFieldData){
//                                if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
//                                    $valueData = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value;
//                                    if($valueData){
//                                        array_push($gridRow, @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
//                                    }else{
//                                        array_push($gridRow, "");
//                                    }
//                                }elseif($docketFieldData->docket_field_category_id == 20){
//                                    $sentDocketManualTimer = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimer;
//                                    if($sentDocketManualTimer){
//                                        foreach ($sentDocketManualTimer as $sentDocketManualTimers){
//                                            if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
//                                                array_push($gridRow, Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A'));
//                                            }else{
//                                                array_push($gridRow, $sentDocketManualTimers->value);
//
//                                            }
//
//                                        }
//                                    }else{
//                                        foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
//                                            array_push($gridRow, "");
//                                        }
//                                    }
//
//                                    $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
//                                    if($sentDocketManualTimerBreak){
//                                        foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                            array_push($gridRow, $sentDocketManualTimerBreaks->value);
//                                        }
//                                    }else{
//                                        foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
//                                            array_push($gridRow,"");
//                                        }
//                                    }
//
//                                    $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
//                                    if($sentDocketManualTimerBreak){
//                                        foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                            if($sentDocketManualTimerBreaks->reason != "n/a"){
//                                                array_push($gridRow, $sentDocketManualTimerBreaks->reason);
//                                            }else{
//                                                array_push($gridRow, " ");
//                                            }
//                                        }
//                                    }else{
//                                        array_push($gridRow, " ");
//                                    }
//
//
//                                    if($docketFieldData->time_format == "Hours&Minutes"){
//                                        array_push($gridRow, @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
//                                    }else{
//                                        $decimal = str_replace("Total: ","", @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
//                                        $hours = explode(" ",$decimal)[0];
//                                        $minutes = explode(" ",$decimal)[2] * (1/60);
//                                        array_push($gridRow, $hours+$minutes);
//                                    }
//
//                                }elseif($docketFieldData->docket_field_category_id == 18){
//                                    array_push($gridRow, $docketFieldData->label);
//                                    foreach ( $docketFieldData->yesNoField as $yesNoField){
//                                        if($yesNoField->explanation == 1){
//                                            array_push($gridRow, $yesNoField->label);
//                                            $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->SentDocValYesNoValueInfo;
//                                            if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
//                                                if(count($SentDocValYesNoValueInfo)!=0){
//                                                    foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){
//                                                        if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
//                                                            $imageValue = unserialize($SentDocValYesNoValueInfos->value);
//                                                            $toArray = array();
//                                                            foreach ($imageValue as $imageValues) {
//                                                                $toArray[] = asset($imageValues);
//                                                            }
//
//                                                            array_push($gridRow, implode(";",$toArray));
//                                                        }else{
//                                                            array_push($gridRow, $SentDocValYesNoValueInfos->value);
//                                                        }
//                                                    }
//                                                }else{
//                                                    foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                        if($yesNoDocketsField->docket_field_category_id == 5){
//                                                            array_push($gridRow, "");
//                                                        }else{
//                                                            array_push($gridRow, "");
//                                                        }
//                                                    }
//                                                }
//
//                                            }else{
//                                                foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                    if($yesNoDocketsField->docket_field_category_id == 5){
//                                                        array_push($gridRow, "");
//                                                    }else{
//                                                        array_push($gridRow, "");
//                                                    }
//                                                }
//                                            }
//
//                                        }else{
//                                            array_push($gridRow, "");
//                                        }
//                                    }
//
//
//
//                                }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
//                                    $docketImageValues = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
//                                    $toArray = array();
//                                    if($docketImageValues){
//                                        foreach ($docketImageValues as $docketImageValue) {
//                                            $toArray[] = asset($docketImageValue->value);
//                                        }
//                                        array_push($gridRow,  implode("; ",$toArray));
//                                    }else{
//                                        array_push($gridRow,  " ");
//                                    }
//
//                                }elseif($docketFieldData->docket_field_category_id == 7 ){
//                                    $docketUnitRate = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
//                                    if($docketUnitRate){
//                                        foreach ($docketUnitRate as $sentDocketUnitRateValue){
//                                            array_push($gridRow,  $sentDocketUnitRateValue->value);
//                                        }
//                                    }else{
//                                        foreach ($docketFieldData->unitRate as $docketUnitRate){
//                                            array_push($gridRow,  " ");
//                                        }
//                                    }
//
//                                }elseif($docketFieldData->docket_field_category_id == 24){
//                                    $DocketTallyable = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
//                                    if($DocketTallyable){
//                                        foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
//                                            array_push($gridRow, $sentDocketTallyableUnitRateValue->value);
//                                        }
//                                    }else{
//                                        foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
//                                            array_push($gridRow,  " ");
//                                        }
//                                    }
//                                }elseif($docketFieldData->docket_field_category_id == 8){
//                                    $checkBoxValue = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first();
//                                    if($checkBoxValue != null){
//                                        if($checkBoxValue->value == 1){
//                                            array_push($gridRow, "Yes");
//                                        }else if($checkBoxValue->value == 0){
//                                            array_push($gridRow, "No");
//                                        }
//                                    }else{
//                                        array_push($gridRow, " ");
//                                    }
//
//
//
//
//                                }elseif($docketFieldData->docket_field_category_id == 22){
//                                    foreach($docketFieldData->girdFields as $girdFields ){
//                                        if($girdFields->docket_field_category_id == 20){
//                                            array_push($gridRow, "");
//                                            array_push($gridRow, "");
//                                            array_push($gridRow, "");
//                                            array_push($gridRow, "");
//                                            array_push($gridRow, "");
//                                        }elseif($girdFields->docket_field_category_id == 8){
//                                            array_push($gridRow, "");
//                                        }else{
//                                            array_push($gridRow, " ");
//                                        }
//
//                                    }
//                                }
//
//                            }
//                            $sentDocketValues['nongrid'][] = $gridRow;
//                        }
//                    }
//                }
//
//                //insert the header
//                $csv->insertOne($sentDocketHeader);
//
//
//
//
//                //insert all the record
//                foreach($sentDocketValues as $key=>$sentDocketVal){
//                    if($key === "nongrid"){
//                        foreach($sentDocketVal as $nogridValue){
//                            $csv->insertOne($nogridValue);
//                        }
//                    }else{
//
//                        foreach($sentDocketVal as $data){
//                            $csv->insertOne($data);
//                        }
//                    }
//
//                }
//
//                $csv->insertOne(array(""));
//            }else{
//
//                //header
//                foreach($docketFieldOrder as $docketFieldOrders){
//                    if($docketFieldOrders->exportMapping){
//                        if($docketFieldOrders->is_show == 1){
//                            if($docketFieldOrders->docket_field_category_id == 1 || $docketFieldOrders->docket_field_category_id == 2 || $docketFieldOrders->docket_field_category_id ==  3|| $docketFieldOrders->docket_field_category_id == 4 || $docketFieldOrders->docket_field_category_id == 6 || $docketFieldOrders->docket_field_category_id == 16 || $docketFieldOrders->docket_field_category_id == 12|| $docketFieldOrders->docket_field_category_id == 15 || $docketFieldOrders->docket_field_category_id == 26 || $docketFieldOrders->docket_field_category_id == 25 || $docketFieldOrders->docket_field_category_id == 13|| $docketFieldOrders->docket_field_category_id == 27){
//                                array_push($sentDocketHeader, $docketFieldOrders->csv_header);
//                            }elseif($docketFieldOrders->docket_field_category_id == 30){
//                                if( $docketFieldOrders->docketConstantField->is_show == 1) {
//                                    if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 1){
//                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
//                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 2){
//                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
//                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 3){
//                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
//                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 4){
//                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
//                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 5){
//                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
//                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 6){
//                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
//                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 7){
//                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
//                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 8){
//                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
//                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 9){
//                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
//                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 10){
//                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
//                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 11){
//                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
//                                    }
//
//
//                                }
//
//                            }elseif($docketFieldOrders->docket_field_category_id == 20){
//                                foreach ($docketFieldOrders->docketManualTimer as $docketManualTimers){
//                                    if( $docketManualTimers->is_show == 1){
//                                        array_push($sentDocketHeader, $docketManualTimers->csv_header);
//                                    }
//                                }
//                                foreach ($docketFieldOrders->docketManualTimerBreak as $docketManualTimerBreaks){
//                                    if( $docketManualTimerBreaks->is_show == 1){
//                                        array_push($sentDocketHeader, $docketManualTimerBreaks->csv_header);
//                                    }
//                                }
//
//                                foreach ( unserialize($docketFieldOrders->exportMapping->value) as $explaination){
//                                    if($explaination['label'] == "Explanation"){
//                                        if ($explaination['isShow'] == 1){
//                                            array_push($sentDocketHeader, $explaination['csvHeader']);
//                                        }
//                                    }
//                                }
//
//                                foreach ( unserialize($docketFieldOrders->exportMapping->value) as $totalHrs){
//                                    if ($totalHrs['label'] == "Total Hours"){
//                                        if ($explaination['isShow'] == 1){
//                                            array_push($sentDocketHeader, $totalHrs['csvHeader']);
//                                        }
//                                    }
//                                }
//                            }elseif($docketFieldOrders->docket_field_category_id == 18){
//                                array_push($sentDocketHeader, $docketFieldOrders->csv_header);
//                                foreach ( $docketFieldOrders->yesNoField as $yesNoField){
//                                    if ($yesNoField->is_show == 1){
//                                        if($yesNoField->explanation == 1){
//                                            array_push($sentDocketHeader, $yesNoField->csv_header);
//                                            foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                if($yesNoDocketsField->is_show  == 1){
//                                                    if($yesNoDocketsField->docket_field_category_id == 5){
//                                                        array_push($sentDocketHeader, $yesNoField->csv_header.": ".$yesNoDocketsField->csv_header);
//                                                    }else{
//                                                        array_push($sentDocketHeader, $yesNoField->csv_header.": ".$yesNoDocketsField->csv_header);
//                                                    }
//                                                }
//                                            }
//                                        }else{
//                                            array_push($sentDocketHeader, $yesNoField->csv_header);
//                                        }
//                                    }
//                                }
//
//
//                            }elseif($docketFieldOrders->docket_field_category_id == 5 || $docketFieldOrders->docket_field_category_id == 9 || $docketFieldOrders->docket_field_category_id == 14 ){
//                                array_push($sentDocketHeader, $docketFieldOrders->csv_header);
//                            }elseif($docketFieldOrders->docket_field_category_id == 7){
//                                foreach ($docketFieldOrders->unitRate as $docketUnitRate){
//                                    if($docketUnitRate->is_show == 1){
//                                        array_push($sentDocketHeader, $docketUnitRate->csv_header);
//                                    }
//                                }
//                            }elseif($docketFieldOrders->docket_field_category_id == 24){
//                                foreach ($docketFieldOrders->tallyUnitRate as $docketTallyableUnitRate){
//                                    if($docketTallyableUnitRate->is_show == 1){
//                                        array_push($sentDocketHeader, $docketTallyableUnitRate->csv_header);
//                                    }
//                                }
//                            }elseif($docketFieldOrders->docket_field_category_id == 8){
//                                array_push($sentDocketHeader,$docketFieldOrders->csv_header);
//                            }elseif($docketFieldOrders->docket_field_category_id == 22){
//                                foreach($docketFieldOrders->girdFields as $girdFields ){
//                                    if($girdFields->is_show == 1) {
//                                        if($girdFields->docket_field_category_id == 20){
//                                            foreach ( unserialize($girdFields->export_value) as $exportValue){
//                                                if ($exportValue['isShow'] == 1) {
//                                                    array_push($sentDocketHeader, $exportValue['csvHeader']);
//                                                }
//                                            }
//                                        }elseif($girdFields->docket_field_category_id == 8){
//                                            array_push($sentDocketHeader, $girdFields->label);
//                                        }else{
//                                            array_push($sentDocketHeader, $girdFields->csv_header);
//                                        }
//                                    }
//                                }
//
//                            }
//                        }
//                    }
//                }
//
//
//                //value
//                $allGridValue = array();
//
//                foreach($docketGroupDatas as $singleData){
//                    $checkGridValue = $this->checkGridValue( $singleData);
//                    $gridRow = array();
//                    if($singleData['isEmail'] == true){
//                        $sendDocVal = @EmailSentDocket::where('docket_id',$singleData['docketId'])->where('id',$singleData['sendDocketId'])->get()->first();
//                        if(count($checkGridValue) != 0){
//                            $maxValue = max($checkGridValue);
//                            for ($i = 0; $i <= $maxValue; $i++) {
//                                foreach($docketFieldOrder as $docketFieldData){
//                                    if(@$docketFieldData->exportMapping){
//                                        if($docketFieldData->is_show == 1){
//                                            if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
//                                                $valueData = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value;
//                                                if($valueData){
//                                                    $gridRow[$i][] = $valueData;
//                                                }else{
//                                                    $gridRow[$i][] = "";
//
//                                                }
//                                            }elseif($docketFieldData->docket_field_category_id == 30 ){
//                                                if( $docketFieldData->docketConstantField->is_show == 1) {
//                                                    if($docketFieldData->docketConstantField->export_mapping_field_category_id == 1){
//                                                        $gridRow[$i][]  =$sendDocVal->formatted_id;
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 2){
//                                                        $recipientInfos = $sendDocVal->recipientInfo;
//                                                        $toArray = array();
//                                                        foreach ($recipientInfos as $recipientInfo) {
//                                                            $toArray[] = @$recipientInfo->emailUserInfo->email;
//                                                        }
//                                                        $gridRow[$i][] = implode("; ",$toArray);
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 3){
//                                                        $gridRow[$i][] = $sendDocVal->senderUserInfo->first_name . ' ' . $sendDocVal->senderUserInfo->last_name;
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 4){
//                                                        $gridRow[$i][] = $newline;
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 5){
//                                                        $gridRow[$i][] = $sendDocVal->docketInfo->title;
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 6){
//                                                        $gridRow[$i][] = $sendDocVal->senderCompanyInfo->abn;
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 7){
//                                                        $gridRow[$i][] = " ";
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 8){
//                                                        $gridRow[$i][] = $sendDocVal->senderCompanyInfo->name;
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 9){
//                                                        $recipientInfos = $sendDocVal->recipientInfo;
//                                                        $companyToArray =  array();
//                                                        foreach ($recipientInfos as $recipientInfo) {
//                                                            $companyToArray[] = $recipientInfo->receiver_company_name;
//                                                        }
//                                                        $gridRow[$i][] = implode("; ",$companyToArray);
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 10){
//                                                        $gridRow[$i][] = $i+1;
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 11){
//                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $docketConstantValue){
//                                                            if ($docketConstantValue['isShow'] == 1){
//                                                                $gridRow[$i][] =$docketConstantValue['csvHeader'];
//                                                            }
//                                                        }
//                                                    }
//                                                }
//
//                                            }elseif($docketFieldData->docket_field_category_id == 20){
//
//                                                $sentDocketManualTimer = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimer;
//                                                if($sentDocketManualTimer){
//                                                    foreach ($sentDocketManualTimer as $sentDocketManualTimers){
//                                                        if( $sentDocketManualTimers->docketManualTimer->is_show == 1){
//                                                            if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
//                                                                $gridRow[$i][] =  Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A');
//
//                                                            }else{
//                                                                $gridRow[$i][] =  $sentDocketManualTimers->value;
//
//                                                            }
//
//                                                        }
//                                                    }
//                                                }else{
//                                                    foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
//                                                        if( $docketManualTimers->is_show == 1){
//                                                            $gridRow[$i][] = " ";
//                                                        }
//                                                    }
//                                                }
//
//                                                $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
//                                                if($sentDocketManualTimerBreak){
//                                                    foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                                        if( $sentDocketManualTimerBreaks->docketManualTimerBreak->is_show == 1){
//                                                            $gridRow[$i][] = $sentDocketManualTimerBreaks->value;
//                                                        }
//                                                    }
//                                                }else{
//                                                    foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
//                                                        if( $docketManualTimerBreaks->is_show == 1){
//                                                            $gridRow[$i][] = "";
//                                                        }
//                                                    }
//                                                }
//
//                                                $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
//                                                if($sentDocketManualTimerBreak){
//                                                    foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
//                                                            if($explaination['label'] == "Explanation"){
//                                                                if ($explaination['isShow'] == 1){
//                                                                    $gridRow[$i][] = $sentDocketManualTimerBreaks->reason;
//                                                                }
//                                                            }
//                                                        }
//                                                    }
//                                                }else{
//                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
//                                                        if($explaination['label'] == "Explanation"){
//                                                            if ($explaination['isShow'] == 1){
//                                                                $gridRow[$i][] = "";
//                                                            }
//                                                        }
//                                                    }
//                                                }
//
//                                                foreach ( unserialize($docketFieldData->exportMapping->value) as $totalHrs){
//                                                    if ($totalHrs['label'] == "Total Hours"){
//                                                        if ($explaination['isShow'] == 1){
//                                                            if($docketFieldData->time_format == "Hours&Minutes"){
//                                                                $gridRow[$i][] = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value;
//                                                            }else{
//                                                                $decimal = str_replace("Total: ","", @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value);
//
//                                                                $hours = explode(" ",$decimal)[0];
//                                                                $minutes = explode(" ",$decimal)[2] * (1/60);
//                                                                $gridRow[$i][] = $hours+$minutes;
//                                                            }
//                                                        }
//                                                    }
//                                                }
//
//                                            }elseif($docketFieldData->docket_field_category_id == 18){
//                                                $gridRow[$i][] = $docketFieldData->label;
//                                                foreach ( $docketFieldData->yesNoField as $yesNoField){
//                                                    if ($yesNoField->is_show == 1){
//                                                        if($yesNoField->explanation == 1){
//                                                            $gridRow[$i][] = $yesNoField->label;
//                                                            $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->SentEmailDocValYesNoValueInfo;
//                                                            if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
//                                                                if(count($SentDocValYesNoValueInfo)!=0){
//                                                                    foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){
//
//                                                                        if($SentDocValYesNoValueInfos->YesNoDocketsField->is_show  == 1){
//                                                                            if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
//                                                                                $imageValue = unserialize($SentDocValYesNoValueInfos->value);
//                                                                                $toArray = array();
//                                                                                foreach ($imageValue as $imageValues) {
//                                                                                    $toArray[] = asset($imageValues);
//                                                                                }
//                                                                                $gridRow[$i][] = implode(";",$toArray);
//                                                                            }else{
//
//                                                                                $gridRow[$i][] = $SentDocValYesNoValueInfos->value;
//                                                                            }
//                                                                        }
//                                                                    }
//                                                                }else{
//                                                                    foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                                        if($yesNoDocketsField->is_show  == 1){
//                                                                            if($yesNoDocketsField->docket_field_category_id == 5){
//                                                                                $gridRow[$i][] = "";
//                                                                            }else{
//                                                                                $gridRow[$i][] = "";
//                                                                            }
//                                                                        }
//                                                                    }
//                                                                }
//
//                                                            }else{
//
//                                                                foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                                    if($yesNoDocketsField->is_show  == 1){
//                                                                        if($yesNoDocketsField->docket_field_category_id == 5){
//                                                                            $gridRow[$i][] = "";
//                                                                        }else{
//                                                                            $gridRow[$i][] = "";
//                                                                        }
//                                                                    }
//                                                                }
//                                                            }
//
//                                                        }else{
//                                                            $gridRow[$i][] = "";
//                                                        }
//                                                    }
//                                                }
//
//                                            }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
//                                                $docketImageValues = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
//                                                $toArray = array();
//                                                if($docketImageValues){
//                                                    foreach ($docketImageValues as $docketImageValue) {
//                                                        $toArray[] = asset($docketImageValue->value);
//                                                    }
//                                                    $gridRow[$i][]  =  implode("; ",$toArray);
//                                                }else{
//                                                    $gridRow[$i][]  = "";
//                                                }
//                                            }elseif($docketFieldData->docket_field_category_id == 7 ){
//
//                                                $docketUnitRate = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
//                                                if($docketUnitRate){
//
//                                                    foreach ($docketUnitRate as $sentDocketUnitRateValue){
//
//                                                        $gridRow[$i][] =   $sentDocketUnitRateValue->value;
//                                                    }
//
//                                                }else{
//                                                    foreach ($docketFieldData->unitRate as $docketUnitRate){
//                                                        $gridRow[$i][] =  " ";
//                                                    }
//                                                }
//                                            }elseif($docketFieldData->docket_field_category_id == 24){
//                                                $DocketTallyable = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
//                                                if($DocketTallyable){
//                                                    foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
//                                                        $gridRow[$i][] = $sentDocketTallyableUnitRateValue->value;
//                                                    }
//                                                }else{
//                                                    foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
//                                                        $gridRow[$i][]=  " ";
//                                                    }
//                                                }
//                                            }elseif($docketFieldData->docket_field_category_id == 8){
//                                                $checkBoxValue = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first();
//                                                if($checkBoxValue != null){
//                                                    if($checkBoxValue->value == 1){
//                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
//                                                            if ($checkBox['isShow'] == 1) {
//                                                                if ($checkBox["label"] == "Checked") {
//                                                                    $gridRow[$i][] = $checkBox['csvHeader'];
//                                                                }
//                                                            }else{
//                                                                $gridRow[$i][] = "";
//                                                            }
//                                                        }
//                                                    }else if($checkBoxValue->value == 0){
//                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
//                                                            if ($checkBox['isShow'] == 1) {
//                                                                if ($checkBox["label"] == "Unchecked") {
//                                                                    $gridRow[$i][] = $checkBox['csvHeader'];
//                                                                }
//                                                            }else{
//                                                                $gridRow[$i][] = "";
//                                                            }
//                                                        }
//                                                    }
//                                                }else{
//
//                                                    // foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
//                                                    //     if ($checkBox['isShow'] == 1) {
//                                                    $gridRow[$i][] = " ";
//                                                    //     }
//                                                    // }
//                                                }
//                                            }elseif($docketFieldData->docket_field_category_id == 22){
//                                                foreach($docketFieldData->girdFields as $girdField){
//                                                    $DocFieldGridVal = DocketFieldGridValue::where('docket_id',$sendDocVal->id)->where('docket_field_grid_id',$girdField->id)->where('index',$i)->get()->first();
//
//                                                    if($girdField->docket_field_category_id == 20){
//
//                                                        $sendGridManualTimerValue = json_decode(@$DocFieldGridVal->value, true);
//                                                        foreach(unserialize($girdField->export_value) as $exportValue){
//
//                                                            if($DocFieldGridVal){
//
//                                                                if ($exportValue['isShow'] == 1) {
//
//                                                                    if($exportValue['label'] == "From"){
//                                                                        if($sendGridManualTimerValue['from'] != 0 && $sendGridManualTimerValue['from'] != 'n/a'  && $sendGridManualTimerValue['from'] != 'N/a' && $sendGridManualTimerValue['from']!= null){
//                                                                            $gridRow[$i][] = Carbon::parse($sendGridManualTimerValue['from'])->format('d-M.-Y g:i A');
//                                                                        }else{
//                                                                            $gridRow[$i][] = $sendGridManualTimerValue['from'];
//
//                                                                        }
//
//                                                                    }else if($exportValue['label'] == "To"){
//                                                                        if($sendGridManualTimerValue['to'] != 0 && $sendGridManualTimerValue['to'] != 'n/a'  && $sendGridManualTimerValue['to'] != 'N/a' && $sendGridManualTimerValue['to']!= null){
//                                                                            $gridRow[$i][] =  Carbon::parse($sendGridManualTimerValue['to'])->format('d-M.-Y g:i A');
//                                                                        }else{
//                                                                            $gridRow[$i][] = $sendGridManualTimerValue['to'];
//
//                                                                        }
//                                                                    }else if($exportValue['label'] == "Total Break"){
//                                                                        if($sendGridManualTimerValue['breakDuration'] != 0){
//
//                                                                            $gridRow[$i][] = $this->convertHrsMin($sendGridManualTimerValue['breakDuration']) ;
//                                                                        }else{
//                                                                            $gridRow[$i][] = "0 Hour 0 Minute" ;
//                                                                        }
//
//                                                                    }else if($exportValue['label'] == "Explanation"){
//                                                                        if($sendGridManualTimerValue['explanation'] != ""){
//                                                                            $gridRow[$i][] = $sendGridManualTimerValue['explanation'] ;
//                                                                        }else{
//                                                                            $gridRow[$i][] = "N/a" ;
//                                                                        }
//                                                                    }else if($exportValue['label'] == "Total Hours"){
//                                                                        if($sendGridManualTimerValue['totalDuration'] != 0){
//                                                                            if($girdField->time_format == "Hours&Minutes"){
//                                                                                $gridRow[$i][] =  $this->convertHrsMin($sendGridManualTimerValue['totalDuration']) ;
//                                                                            }else{
//                                                                                $decimal = $this->convertHrsMin($sendGridManualTimerValue['totalDuration']);
//                                                                                $hours = explode(" ",$decimal)[0];
//                                                                                $minutes = explode(" ",$decimal)[2] * (1/60);
//                                                                                $gridRow[$i][] = $hours+$minutes;
//                                                                            }
//                                                                        }else{
//                                                                            $gridRow[$i][] = "0 Hour 0 Minute" ;
//                                                                        }
//
//                                                                    }
//                                                                }
//                                                            }else{
//                                                                $gridRow[$i][] =  " ";
//                                                            }
//                                                        }
//
//
//                                                    }else if($girdField->docket_field_category_id == 8){
//                                                        if($girdField->export_value){
//                                                            foreach(unserialize($girdField->export_value) as $exportValue){
//                                                                if($DocFieldGridVal){
//                                                                    if(@$DocFieldGridVal->value == 1){
//                                                                        if ($exportValue['isShow'] == 1) {
//                                                                            if ($exportValue["label"] == "Checked") {
//                                                                                $gridRow[$i][] =  $exportValue["csvHeader"];
//                                                                            }
//                                                                        }else{
//                                                                            $gridRow[$i][] =  "";
//                                                                        }
//                                                                    }else{
//                                                                        if ($exportValue['isShow'] == 1) {
//                                                                            if ($exportValue["label"] == "Unchecked") {
//                                                                                $gridRow[$i][] =  $exportValue["csvHeader"];
//                                                                            }
//                                                                        }else{
//                                                                            $gridRow[$i][] =  "";
//                                                                        }
//                                                                    }
//                                                                }else{
//                                                                    $gridRow[$i][] =  " ";
//                                                                }
//
//                                                            }
//                                                        }else{
//                                                            $gridRow[$i][] =  " ";
//                                                        }
//
//                                                    }
//
//                                                    else if( $girdField->docket_field_category_id == 9){
//
//                                                        $imageValue =  @$DocFieldGridVal->value;
//                                                        if($girdField->is_show == 1){
//                                                            $toArray = array();
//                                                            if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
//                                                                $gridRow[$i][] =  "";
//                                                            }else{
//                                                                foreach(unserialize($imageValue) as $exportValue){
//                                                                    $toArray[] = asset($exportValue["image"]);
//                                                                }
//                                                                $gridRow[$i][] =  implode("; ",$toArray);
//                                                            }
//                                                        }
//
//
//                                                    }else if($girdField->docket_field_category_id == 5  || $girdField->docket_field_category_id == 14 ){
//                                                        $imageValue =  @$DocFieldGridVal->value;
//                                                        if($girdField->is_show == 1){
//                                                            $toArray = array();
//                                                            if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
//                                                                $gridRow[$i][] =  "";
//                                                            }else{
//
//                                                                foreach(unserialize($imageValue) as $exportValue){
//                                                                    $toArray[] = asset($exportValue);
//                                                                }
//                                                                $gridRow[$i][] =  implode("; ",$toArray);
//
//                                                            }
//                                                        }
//
//                                                    }else{
//                                                        if($girdField->is_show == 1){
//                                                            $gridRow[$i][] =  @$DocFieldGridVal->value;
//                                                        }
//
//                                                    }
//                                                }
//                                            }
//                                        }
//                                    }
//                                }
//                            }
//                            $sentDocketValues[] = $gridRow;
//                        }else{
//                            foreach($docketFieldOrder as $docketFieldData){
//                                if(@$docketFieldData->exportMapping){
//                                    if($docketFieldData->is_show == 1){
//                                        if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
//                                            $valueData = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value;
//                                            if($valueData){
//                                                array_push($gridRow, $valueData);
//                                            }else{
//                                                array_push($gridRow, "");
//
//                                            }
//                                        }elseif($docketFieldData->docket_field_category_id == 30 ){
//                                            if( $docketFieldData->docketConstantField->is_show == 1) {
//                                                if($docketFieldData->docketConstantField->export_mapping_field_category_id == 1){
//                                                    array_push($gridRow, $sendDocVal->formatted_id);
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 2){
//
//                                                    $recipientInfos = $sendDocVal->recipientInfo;
//                                                    $toArray = array();
//                                                    foreach ($recipientInfos as $recipientInfo) {
//                                                        $toArray[] = @$recipientInfo->emailUserInfo->email;
//                                                    }
//                                                    array_push($gridRow,  implode("; ",$toArray));
//
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 3){
//                                                    array_push($gridRow, $sendDocVal->senderUserInfo->first_name . ' ' . $sendDocVal->senderUserInfo->last_name);
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 4){
//                                                    array_push($gridRow, $newline);
//
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 5){
//                                                    array_push($gridRow, $sendDocVal->docketInfo->title);
//                                                }
//                                                else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 6){
//                                                    array_push($gridRow, $sendDocVal->senderCompanyInfo->ab);
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 7){
//                                                    array_push($gridRow, "");
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 8){
//                                                    array_push($gridRow, $sendDocVal->senderCompanyInfo->name);
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 9){
//                                                    $recipientInfos = $sendDocVal->recipientInfo;
//                                                    $companyToArray =  array();
//                                                    foreach ($recipientInfos as $recipientInfo) {
//                                                        $companyToArray[] = $recipientInfo->receiver_company_name;
//                                                    }
//                                                    array_push($gridRow, implode("; ",$companyToArray));
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 10){
//
//                                                    array_push($gridRow, 1);
//
//                                                }elseif($docketFieldData->docketConstantField->export_mapping_field_category_id == 11){
//                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $docketConstantValue){
//                                                        if ($docketConstantValue['isShow'] == 1){
//                                                            array_push($gridRow, $docketConstantValue['csvHeader']);
//                                                        }
//                                                    }
//                                                }
//                                            }
//
//                                        }elseif($docketFieldData->docket_field_category_id == 20){
//                                            $sentDocketManualTimer = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimer;
//                                            if($sentDocketManualTimer){
//                                                foreach ($sentDocketManualTimer as $sentDocketManualTimers){
//                                                    if( $sentDocketManualTimers->docketManualTimer->is_show == 1){
//                                                        if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
//                                                            array_push($gridRow, Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A'));
//                                                        }else{
//                                                            array_push($gridRow,  $sentDocketManualTimers->value);
//                                                        }
//
//                                                    }
//                                                }
//                                            }else{
//                                                foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
//                                                    if( $docketManualTimers->is_show == 1){
//                                                        array_push($gridRow, "");
//                                                    }
//                                                }
//                                            }
//
//                                            $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
//                                            if($sentDocketManualTimerBreak){
//                                                foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                                    if( $sentDocketManualTimerBreaks->docketManualTimerBreak->is_show == 1){
//                                                        array_push($gridRow, $sentDocketManualTimerBreaks->value);
//                                                    }
//                                                }
//                                            }else{
//                                                foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
//                                                    if( $docketManualTimerBreaks->is_show == 1){
//                                                        array_push($gridRow,"");
//                                                    }
//                                                }
//                                            }
//                                            $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
//                                            if($sentDocketManualTimerBreak){
//                                                foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
//                                                        if($explaination['label'] == "Explanation"){
//                                                            if ($explaination['isShow'] == 1){
//                                                                array_push($gridRow, $sentDocketManualTimerBreaks->reason);
//                                                            }
//                                                        }
//                                                    }
//                                                }
//                                            }else{
//                                                foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
//                                                    if($explaination['label'] == "Explanation"){
//                                                        if ($explaination['isShow'] == 1){
//                                                            array_push($gridRow, " ");
//                                                        }
//                                                    }
//                                                }
//                                            }
//
//                                            foreach ( unserialize($docketFieldData->exportMapping->value) as $totalHrs){
//                                                if ($totalHrs['label'] == "Total Hours"){
//                                                    if ($explaination['isShow'] == 1){
//                                                        if($docketFieldData->time_format == "Hours&Minutes"){
//                                                            array_push($gridRow, @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value);
//                                                        }else{
//                                                            $decimal = str_replace("Total: ","", @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value);
//
//                                                            $hours = explode(" ",$decimal)[0];
//                                                            $minutes = explode(" ",$decimal)[2] * (1/60);
//                                                            array_push($gridRow, $hours+$minutes);
//                                                        }
//                                                    }
//                                                }
//                                            }
//
//
//                                        }elseif($docketFieldData->docket_field_category_id == 18){
//                                            array_push($gridRow, $docketFieldData->label);
//                                            foreach ( $docketFieldData->yesNoField as $yesNoField){
//                                                if ($yesNoField->is_show == 1){
//                                                    if($yesNoField->explanation == 1){
//                                                        array_push($gridRow, $yesNoField->label);
//                                                        $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->SentEmailDocValYesNoValueInfo;
//                                                        if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
//                                                            if(count($SentDocValYesNoValueInfo)!=0){
//                                                                foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){
//                                                                    if($SentDocValYesNoValueInfos->YesNoDocketsField->is_show  == 1){
//                                                                        if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
//                                                                            $imageValue = unserialize($SentDocValYesNoValueInfos->value);
//
//                                                                            $toArray = array();
//                                                                            foreach ($imageValue as $imageValues) {
//                                                                                $toArray[] = asset($imageValues);
//                                                                            }
//
//                                                                            array_push($gridRow, implode(";",$toArray));
//                                                                        }else{
//                                                                            array_push($gridRow, $SentDocValYesNoValueInfos->value);
//                                                                        }
//                                                                    }
//                                                                }
//                                                            }else{
//                                                                foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                                    if($yesNoDocketsField->is_show  == 1){
//                                                                        if($yesNoDocketsField->docket_field_category_id == 5){
//                                                                            array_push($gridRow, "");
//                                                                        }else{
//                                                                            array_push($gridRow, "");
//                                                                        }
//                                                                    }
//                                                                }
//                                                            }
//
//                                                        }else{
//
//                                                            foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                                if($yesNoDocketsField->is_show  == 1){
//                                                                    if($yesNoDocketsField->docket_field_category_id == 5){
//                                                                        array_push($gridRow, "");
//                                                                    }else{
//                                                                        array_push($gridRow, "");
//                                                                    }
//                                                                }
//                                                            }
//                                                        }
//
//                                                    }else{
//                                                        array_push($gridRow, "");
//                                                    }
//                                                }
//                                            }
//
//
//
//                                        }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
//                                            $docketImageValues = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
//                                            $toArray = array();
//                                            if($docketImageValues){
//                                                foreach ($docketImageValues as $docketImageValue) {
//                                                    $toArray[] = asset($docketImageValue->value);
//                                                }
//                                                array_push($gridRow,  implode("; ",$toArray));
//                                            }else{
//                                                array_push($gridRow,  " ");
//                                            }
//
//                                        }elseif($docketFieldData->docket_field_category_id == 7 ){
//                                            $docketUnitRate = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
//                                            if($docketUnitRate){
//                                                foreach ($docketUnitRate as $sentDocketUnitRateValue){
//                                                    if($sentDocketUnitRateValue->docketUnitRateInfo->is_show == 1){
//                                                        array_push($gridRow,  $sentDocketUnitRateValue->value);
//                                                    }
//                                                }
//                                            }else{
//                                                foreach ($docketFieldData->unitRate as $docketUnitRate){
//                                                    if($docketUnitRate->is_show== 1){
//                                                        array_push($gridRow,  " ");
//                                                    }
//                                                }
//                                            }
//
//                                        }elseif($docketFieldData->docket_field_category_id == 24){
//                                            $DocketTallyable = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
//                                            if($DocketTallyable){
//                                                foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
//                                                    if($sentDocketTallyableUnitRateValue->docketUnitRateInfo->is_show == 1){
//                                                        array_push($gridRow, $sentDocketTallyableUnitRateValue->value);
//                                                    }
//                                                }
//                                            }else{
//                                                foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
//                                                    if($docketUnitRate->is_show== 1){
//                                                        array_push($gridRow,  " ");
//                                                    }
//                                                }
//                                            }
//                                        }elseif($docketFieldData->docket_field_category_id == 8){
//                                            $checkBoxValue = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first();
//                                            if($checkBoxValue != null){
//                                                if($checkBoxValue->value == 1){
//                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
//                                                        if ($checkBox['isShow'] == 1) {
//                                                            if ($checkBox["label"] == "Checked") {
//                                                                array_push($gridRow, $checkBox["csvHeader"]);
//                                                            }
//                                                        }else{
//                                                            array_push($gridRow, "");
//                                                        }
//                                                    }
//                                                }else if($checkBoxValue->value == 0){
//                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
//                                                        if ($checkBox['isShow'] == 1) {
//                                                            if ($checkBox["label"] == "Unchecked") {
//                                                                // $gridRow[$i] =  "No";
//                                                                array_push($gridRow, $checkBox["csvHeader"]);
//                                                            }
//                                                        }else{
//                                                            array_push($gridRow, "");
//                                                        }
//                                                    }
//                                                }
//                                            }else{
//
//                                                array_push($gridRow, " ");
//
//                                            }
//
//
//
//
//                                        }elseif($docketFieldData->docket_field_category_id == 22){
//                                            foreach($docketFieldData->girdFields as $girdFields ){
//                                                if($girdFields->is_show == 1) {
//                                                    if($girdFields->docket_field_category_id == 20  ){
//                                                        foreach ( unserialize($girdFields->export_value) as $exportValue){
//                                                            if ($exportValue['isShow'] == 1) {
//                                                                array_push($gridRow, " ");
//                                                            }
//                                                        }
//                                                    }elseif($girdFields->docket_field_category_id == 8){
//                                                        array_push($gridRow, " ");
//                                                    }else{
//                                                        array_push($gridRow, " ");
//                                                    }
//                                                }
//                                            }
//
//
//
//                                        }
//
//                                    }
//                                }
//
//                            }
//                            $sentDocketValues['nongrid'][] = $gridRow;
//                        }
//                    }
//                    if($singleData['isEmail'] == false){
//                        $sendDocVal = @SentDockets::where('docket_id',$singleData['docketId'])->where('id',$singleData['sendDocketId'])->get()->first();
//                        if(count($checkGridValue) != 0){
//                            $maxValue = max($checkGridValue);
//
//                            for ($i = 0; $i <= $maxValue; $i++) {
//
//                                foreach($docketFieldOrder as $docketFieldData){
//                                    if(@$docketFieldData->exportMapping){
//                                        if($docketFieldData->is_show == 1){
//                                            if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
//                                                $valueData = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value;
//                                                if($valueData){
//
//                                                    $gridRow[$i][] = $valueData;
//                                                }else{
//                                                    $gridRow[$i][] = "";
//                                                }
//                                            }elseif($docketFieldData->docket_field_category_id == 30 ){
//                                                if( $docketFieldData->docketConstantField->is_show == 1) {
//                                                    if($docketFieldData->docketConstantField->export_mapping_field_category_id == 1){
//                                                        $gridRow[$i][]  =$sendDocVal->formatted_id;
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 2){
//                                                        $recipientInfos = $sendDocVal->recipientInfo;
//                                                        $toArray = array();
//                                                        foreach ($recipientInfos as $recipientInfo) {
//                                                            $toArray[] = @$recipientInfo->userInfo->first_name. ' ' . @$recipientInfo->userInfo->last_name;
//                                                        }
//
//                                                        $gridRow[$i][] = implode("; ",$toArray);
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 3){
//                                                        $gridRow[$i][] = $sendDocVal->senderUserInfo->first_name . ' ' . $sendDocVal->senderUserInfo->last_name;
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 4){
//                                                        $gridRow[$i][] = $newline;
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 5){
//                                                        $gridRow[$i][] = $sendDocVal->docketInfo->title;
//                                                    }
//
//                                                    else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 6){
//                                                        $gridRow[$i][] = $sendDocVal->abn ;
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 7){
//                                                        $recipientInfos = $sendDocVal->recipientInfo;
//                                                        $companyToArray =  array();
//                                                        foreach ($recipientInfos as $recipientInfo) {
//                                                            if(Employee::where('user_id', $recipientInfo->userInfo->id)->count()!=0):
//                                                                $companyId = Employee::where('user_id', $recipientInfo->userInfo->id)->first()->company_id;
//                                                            else :
//                                                                $companyId   =   Company::where('user_id', @$recipientInfo->userInfo->id)->first();
//                                                            endif;
//                                                            $companyToArray[] = Company::where('id',@$companyId->id)->first()->abn;
//                                                        }
//                                                        $gridRow[$i][] = implode("; ",$companyToArray);
//
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 8){
//                                                        $gridRow[$i][] =  $sendDocVal->company_name;
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 9){
//                                                        $recipientInfos = $sendDocVal->recipientInfo;
//                                                        $companyToArray =  array();
//                                                        foreach ($recipientInfos as $recipientInfo) {
//                                                            if(Employee::where('user_id', $recipientInfo->userInfo->id)->count()!=0):
//                                                                $companyId = Employee::where('user_id', $recipientInfo->userInfo->id)->first()->company_id;
//                                                            else :
//                                                                $companyId   =   Company::where('user_id', $recipientInfo->userInfo->id)->first()->id;
//                                                            endif;
//                                                            $companyToArray[] = Company::where('id',$companyId)->first()->name;
//                                                        }
//                                                        $gridRow[$i][] = implode("; ",$companyToArray);
//                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 10){
//                                                        $gridRow[$i][] = $i+1;
//                                                    }elseif($docketFieldData->docketConstantField->export_mapping_field_category_id == 11){
//                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $docketConstantValue){
//                                                            if ($docketConstantValue['isShow'] == 1){
//
//                                                                $gridRow[$i][] = $docketConstantValue['csvHeader'];
//                                                            }
//                                                        }
//                                                    }
//                                                }
//
//                                            }elseif($docketFieldData->docket_field_category_id == 20){
//
//                                                $sentDocketManualTimer = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimer;
//                                                if($sentDocketManualTimer){
//                                                    foreach ($sentDocketManualTimer as $sentDocketManualTimers){
//                                                        if( $sentDocketManualTimers->docketManualTimer->is_show == 1){
//                                                            if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
//                                                                $gridRow[$i][] =  Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A');
//                                                            }else{
//                                                                $gridRow[$i][] =  $sentDocketManualTimers->value;
//                                                            }
//
//                                                        }
//                                                    }
//                                                }else{
//                                                    foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
//                                                        if( $docketManualTimers->is_show == 1){
//                                                            $gridRow[$i][] = " ";
//                                                        }
//                                                    }
//                                                }
//
//                                                $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
//                                                if($sentDocketManualTimerBreak){
//                                                    foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                                        if( $sentDocketManualTimerBreaks->docketManualTimerBreak->is_show == 1){
//                                                            $gridRow[$i][] = $sentDocketManualTimerBreaks->value;
//                                                        }
//                                                    }
//                                                }else{
//                                                    foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
//                                                        if( $docketManualTimerBreaks->is_show == 1){
//                                                            $gridRow[$i][] = "";
//                                                        }
//                                                    }
//                                                }
//
//                                                $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
//                                                if($sentDocketManualTimerBreak){
//                                                    foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
//                                                            if($explaination['label'] == "Explanation"){
//                                                                if ($explaination['isShow'] == 1){
//                                                                    $gridRow[$i][] = $sentDocketManualTimerBreaks->reason;
//                                                                }
//                                                            }
//                                                        }
//                                                    }
//                                                }else{
//                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
//                                                        if($explaination['label'] == "Explanation"){
//                                                            if ($explaination['isShow'] == 1){
//                                                                $gridRow[$i][] = "";
//                                                            }
//                                                        }
//                                                    }
//                                                }
//
//                                                foreach ( unserialize($docketFieldData->exportMapping->value) as $totalHrs){
//                                                    if ($totalHrs['label'] == "Total Hours"){
//                                                        if ($explaination['isShow'] == 1){
//                                                            if($docketFieldData->time_format == "Hours&Minutes"){
//                                                                $gridRow[$i][] = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value;
//                                                            }else{
//                                                                $decimal = str_replace("Total: ","", @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
//                                                                $hours = explode(" ",$decimal)[0];
//                                                                $minutes = explode(" ",$decimal)[2] * (1/60);
//                                                                $gridRow[$i][] = $hours+$minutes;
//                                                            }
//                                                        }
//                                                    }
//                                                }
//
//                                            }elseif($docketFieldData->docket_field_category_id == 18){
//                                                $gridRow[$i][] = $docketFieldData->label;
//                                                foreach ( $docketFieldData->yesNoField as $yesNoField){
//                                                    if ($yesNoField->is_show == 1){
//                                                        if($yesNoField->explanation == 1){
//                                                            $gridRow[$i][] = $yesNoField->label;
//                                                            $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->SentDocValYesNoValueInfo;
//                                                            if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
//                                                                if(count($SentDocValYesNoValueInfo)!=0){
//                                                                    foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){
//
//                                                                        if($SentDocValYesNoValueInfos->YesNoDocketsField->is_show  == 1){
//                                                                            if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
//                                                                                $imageValue = unserialize($SentDocValYesNoValueInfos->value);
//
//                                                                                $toArray = array();
//                                                                                foreach ($imageValue as $imageValues) {
//                                                                                    $toArray[] = asset($imageValues);
//                                                                                }
//                                                                                $gridRow[$i][] = implode(";",$toArray);
//
//                                                                            }else{
//
//                                                                                $gridRow[$i][] = $SentDocValYesNoValueInfos->value;
//                                                                            }
//                                                                        }
//                                                                    }
//                                                                }else{
//                                                                    foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                                        if($yesNoDocketsField->is_show  == 1){
//                                                                            if($yesNoDocketsField->docket_field_category_id == 5){
//                                                                                $gridRow[$i][] = "";
//                                                                            }else{
//                                                                                $gridRow[$i][] = "";
//                                                                            }
//                                                                        }
//                                                                    }
//                                                                }
//
//                                                            }else{
//
//                                                                foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                                    if($yesNoDocketsField->is_show  == 1){
//                                                                        if($yesNoDocketsField->docket_field_category_id == 5){
//                                                                            $gridRow[$i][] = "";
//                                                                        }else{
//                                                                            $gridRow[$i][] = "";
//                                                                        }
//                                                                    }
//                                                                }
//                                                            }
//
//                                                        }else{
//                                                            $gridRow[$i][] = "";
//                                                        }
//                                                    }
//                                                }
//
//                                            }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
//                                                $docketImageValues = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
//                                                $toArray = array();
//                                                if($docketImageValues){
//                                                    foreach ($docketImageValues as $docketImageValue) {
//                                                        $toArray[] = asset($docketImageValue->value);
//                                                    }
//                                                    $gridRow[$i][]  =  implode("; ",$toArray);
//                                                }else{
//                                                    $gridRow[$i][]  = "";
//                                                }
//                                            }elseif($docketFieldData->docket_field_category_id == 7 ){
//
//                                                $docketUnitRate = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
//                                                if($docketUnitRate){
//                                                    foreach ($docketUnitRate as $sentDocketUnitRateValue){
//                                                        if($sentDocketUnitRateValue->docketUnitRateInfo->is_show == 1){
//                                                            $gridRow[$i][] =   $sentDocketUnitRateValue->value;
//                                                        }
//                                                    }
//                                                }else{
//                                                    foreach ($docketFieldData->unitRate as $docketUnitRate){
//                                                        if($docketUnitRate->is_show== 1){
//                                                            $gridRow[$i][] =  " ";
//                                                        }
//                                                    }
//                                                }
//                                            }elseif($docketFieldData->docket_field_category_id == 24){
//                                                $DocketTallyable = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
//                                                if($DocketTallyable){
//                                                    foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
//                                                        if($sentDocketTallyableUnitRateValue->docketUnitRateInfo->is_show == 1){
//                                                            $gridRow[$i][] = $sentDocketTallyableUnitRateValue->value;
//                                                        }
//                                                    }
//                                                }else{
//                                                    foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
//                                                        if($docketUnitRate->is_show== 1){
//                                                            $gridRow[$i][]=  " ";
//                                                        }
//                                                    }
//                                                }
//                                            }elseif($docketFieldData->docket_field_category_id == 8){
//                                                $checkBoxValue = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first();
//                                                if($checkBoxValue != null){
//                                                    if($checkBoxValue->value == 1){
//                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
//                                                            if ($checkBox['isShow'] == 1) {
//                                                                if ($checkBox["label"] == "Checked") {
//                                                                    $gridRow[$i][] =$checkBox["csvHeader"];
//                                                                }
//                                                            }else{
//                                                                $gridRow[$i][]  = "";
//                                                            }
//                                                        }
//                                                    }else if($checkBoxValue->value == 0){
//                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
//                                                            if ($checkBox['isShow'] == 1) {
//                                                                if ($checkBox["label"] == "Unchecked") {
//                                                                    $gridRow[$i][] = $checkBox["csvHeader"];
//                                                                }
//                                                            }else{
//                                                                $gridRow[$i][]  = "";
//                                                            }
//                                                        }
//                                                    }
//                                                }else{
//
//                                                    $gridRow[$i][] = " ";
//
//                                                }
//                                            }elseif($docketFieldData->docket_field_category_id == 22){
//                                                foreach($docketFieldData->girdFields as $girdField){
//                                                    $DocFieldGridVal = DocketFieldGridValue::where('docket_id',$sendDocVal->id)->where('docket_field_grid_id',$girdField->id)->where('index',$i)->get()->first();
//                                                    if($girdField->docket_field_category_id == 20){
//                                                        $sendGridManualTimerValue = json_decode(@$DocFieldGridVal->value, true);
//                                                        foreach(unserialize($girdField->export_value) as $exportValue){
//
//                                                            if($DocFieldGridVal){
//
//                                                                if ($exportValue['isShow'] == 1) {
//                                                                    if($exportValue['label'] == "From"){
//                                                                        if($sendGridManualTimerValue['from'] != 0 && $sendGridManualTimerValue['from'] != 'n/a'  && $sendGridManualTimerValue['from'] != 'N/a' && $sendGridManualTimerValue['from']!= null){
//                                                                            $gridRow[$i][] = Carbon::parse($sendGridManualTimerValue['from'])->format('d-M.-Y g:i A');
//                                                                        }else{
//                                                                            $gridRow[$i][] = $sendGridManualTimerValue['from'];
//                                                                        }
//
//                                                                    }else if($exportValue['label'] == "To"){
//                                                                        if($sendGridManualTimerValue['to'] != 0 && $sendGridManualTimerValue['to'] != 'n/a'  && $sendGridManualTimerValue['to'] != 'N/a' && $sendGridManualTimerValue['to']!= null){
//                                                                            $gridRow[$i][] =  Carbon::parse($sendGridManualTimerValue['to'])->format('d-M.-Y g:i A') ;
//                                                                        }else{
//                                                                            $gridRow[$i][] =  $sendGridManualTimerValue['to'];
//                                                                        }
//                                                                    }else if($exportValue['label'] == "Total Break"){
//                                                                        if($sendGridManualTimerValue['breakDuration'] != 0){
//                                                                            $gridRow[$i][] = $this->convertHrsMin($sendGridManualTimerValue['breakDuration']) ;
//
//                                                                        }else{
//                                                                            $gridRow[$i][] = "0 Hour 0 Minute" ;
//                                                                        }
//
//                                                                    }else if($exportValue['label'] == "Explanation"){
//                                                                        if($sendGridManualTimerValue['explanation'] != ""){
//                                                                            $gridRow[$i][] = $sendGridManualTimerValue['explanation'] ;
//                                                                        }else{
//                                                                            $gridRow[$i][] = "N/a" ;
//                                                                        }
//                                                                    }else if($exportValue['label'] == "Total Hours"){
//                                                                        if($sendGridManualTimerValue['totalDuration'] != 0){
//                                                                            if($girdField->time_format == "Hours&Minutes"){
//                                                                                $gridRow[$i][] =  $this->convertHrsMin($sendGridManualTimerValue['totalDuration']) ;
//                                                                            }else{
//                                                                                $decimal = $this->convertHrsMin($sendGridManualTimerValue['totalDuration']) ;
//                                                                                $hours = explode(" ",$decimal)[0];
//                                                                                $minutes = explode(" ",$decimal)[2] * (1/60);
//                                                                                $gridRow[$i][] = $hours+$minutes;
//                                                                            }
//                                                                        }else{
//                                                                            $gridRow[$i][] = "0 Hour 0 Minute" ;
//                                                                        }
//
//                                                                    }
//                                                                }
//                                                            }else{
//                                                                $gridRow[$i][] =  " ";
//                                                            }
//                                                        }
//
//
//                                                    }else if($girdField->docket_field_category_id == 8){
//                                                        if($girdField->export_value){
//                                                            foreach(unserialize($girdField->export_value) as $exportValue){
//                                                                if($DocFieldGridVal){
//                                                                    if(@$DocFieldGridVal->value == 1){
//                                                                        if ($exportValue['isShow'] == 1) {
//                                                                            if ($exportValue["label"] == "Checked") {
//                                                                                $gridRow[$i][] =  $exportValue["csvHeader"] ;
//                                                                            }
//                                                                        }else{
//                                                                            $gridRow[$i][] =  "";
//                                                                        }
//                                                                    }else{
//                                                                        if ($exportValue['isShow'] == 1) {
//                                                                            if ($exportValue["label"] == "Unchecked") {
//                                                                                $gridRow[$i][] =  $exportValue["csvHeader"] ;
//                                                                            }
//                                                                        }else{
//                                                                            $gridRow[$i][] =  "";
//                                                                        }
//                                                                    }
//                                                                }else{
//                                                                    $gridRow[$i][] =  " ";
//                                                                }
//
//                                                            }
//                                                        }else{
//                                                            $gridRow[$i][] =  " ";
//                                                        }
//
//                                                    }
//                                                    else if( $girdField->docket_field_category_id == 9){
//
//                                                        $imageValue =  @$DocFieldGridVal->value;
//                                                        if($girdField->is_show == 1){
//                                                            $toArray = array();
//                                                            if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
//                                                                $gridRow[$i][] =  "";
//                                                            }else{
//                                                                foreach(unserialize($imageValue) as $exportValue){
//                                                                    $toArray[] = asset($exportValue["image"]);
//                                                                }
//                                                                $gridRow[$i][] =  implode("; ",$toArray);
//                                                            }
//                                                        }
//
//
//                                                    }else if($girdField->docket_field_category_id == 5  || $girdField->docket_field_category_id == 14 ){
//                                                        $imageValue =  @$DocFieldGridVal->value;
//                                                        if($girdField->is_show == 1){
//                                                            $toArray = array();
//                                                            if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
//                                                                $gridRow[$i][] =  "";
//                                                            }else{
//
//                                                                foreach(unserialize($imageValue) as $exportValue){
//                                                                    $toArray[] = asset($exportValue);
//                                                                }
//                                                                $gridRow[$i][] =  implode("; ",$toArray);
//
//                                                            }
//                                                        }
//
//                                                    }else{
//                                                        if($girdField->is_show == 1){
//                                                            $gridRow[$i][] =  @$DocFieldGridVal->value;
//                                                        }
//
//                                                    }
//                                                }
//                                            }
//                                        }
//                                    }
//                                }
//                            }
//                            $sentDocketValues[] = $gridRow;
//                        }else{
//                            foreach($docketFieldOrder as $docketFieldData){
//                                if(@$docketFieldData->exportMapping){
//                                    if($docketFieldData->is_show == 1){
//                                        if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
//                                            $valueData = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value;
//                                            if($valueData){
//                                                array_push($gridRow, @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
//                                            }else{
//                                                if($docketFieldData->is_show == 1){
//                                                    array_push($gridRow, "");
//                                                }
//
//                                            }
//                                        }elseif($docketFieldData->docket_field_category_id == 30 ){
//                                            if( $docketFieldData->docketConstantField->is_show == 1) {
//                                                if($docketFieldData->docketConstantField->export_mapping_field_category_id == 1){
//                                                    array_push($gridRow, $sendDocVal->formatted_id);
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 2){
//                                                    $recipientInfos = $sendDocVal->recipientInfo;
//                                                    $toArray = array();
//                                                    foreach ($recipientInfos as $recipientInfo) {
//                                                        $toArray[] = @$recipientInfo->userInfo->first_name. ' ' . @$recipientInfo->userInfo->last_name;
//                                                    }
//                                                    array_push($gridRow, implode("; ",$toArray));
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 3){
//                                                    array_push($gridRow, $sendDocVal->senderUserInfo->first_name . ' ' . $sendDocVal->senderUserInfo->last_name);
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 4){
//                                                    array_push($gridRow, $newline);
//
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 5){
//                                                    array_push($gridRow, $sendDocVal->docketInfo->title);
//                                                }
//
//
//                                                else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 6){
//                                                    array_push($gridRow, $sendDocVal->abn);
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 7){
//                                                    $recipientInfos = $sendDocVal->recipientInfo;
//                                                    $companyToArray =  array();
//                                                    foreach ($recipientInfos as $recipientInfo) {
//                                                        if(Employee::where('user_id', $recipientInfo->userInfo->id)->count()!=0):
//                                                            $companyId = Employee::where('user_id', $recipientInfo->userInfo->id)->first()->company_id;
//                                                        else :
//                                                            $companyId   =   Company::where('user_id', $recipientInfo->userInfo->id)->first()->id;
//                                                        endif;
//                                                        $companyToArray[] = Company::where('id',$companyId)->first()->abn;
//                                                    }
//                                                    array_push($gridRow,  implode("; ",$companyToArray));
//
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 8){
//
//                                                    array_push($gridRow,  $sendDocVal->company_name);
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 9){
//                                                    $recipientInfos = $sendDocVal->recipientInfo;
//                                                    $companyToArray =  array();
//                                                    foreach ($recipientInfos as $recipientInfo) {
//                                                        if(Employee::where('user_id', $recipientInfo->userInfo->id)->count()!=0):
//                                                            $companyId = Employee::where('user_id', $recipientInfo->userInfo->id)->first()->company_id;
//                                                        else :
//                                                            $companyId   =   Company::where('user_id', $recipientInfo->userInfo->id)->first()->id;
//                                                        endif;
//                                                        $companyToArray[] = Company::where('id',$companyId)->first()->name;
//                                                    }
//                                                    array_push($gridRow,  implode("; ",$companyToArray));
//                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 10){
//                                                    array_push($gridRow,  1);
//                                                }elseif($docketFieldData->docketConstantField->export_mapping_field_category_id == 11){
//                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $docketConstantValue){
//                                                        if ($docketConstantValue['isShow'] == 1){
//                                                            array_push($gridRow, $docketConstantValue['csvHeader']);
//                                                        }
//                                                    }
//                                                }
//                                            }
//
//                                        }elseif($docketFieldData->docket_field_category_id == 20){
//                                            $sentDocketManualTimer = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimer;
//                                            if($sentDocketManualTimer){
//                                                foreach ($sentDocketManualTimer as $sentDocketManualTimers){
//                                                    if( $sentDocketManualTimers->docketManualTimer->is_show == 1){
//                                                        if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
//                                                            array_push($gridRow,   Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A'));
//                                                        }else{
//                                                            array_push($gridRow,  $sentDocketManualTimers->value);
//
//                                                        }
//
//                                                    }
//                                                }
//                                            }else{
//                                                foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
//                                                    if( $docketManualTimers->is_show == 1){
//                                                        array_push($gridRow, "");
//                                                    }
//                                                }
//                                            }
//
//                                            $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
//                                            if($sentDocketManualTimerBreak){
//                                                foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                                    if( $sentDocketManualTimerBreaks->docketManualTimerBreak->is_show == 1){
//                                                        array_push($gridRow, $sentDocketManualTimerBreaks->value);
//                                                    }
//                                                }
//                                            }else{
//                                                foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
//                                                    if( $docketManualTimerBreaks->is_show == 1){
//                                                        array_push($gridRow,"");
//                                                    }
//                                                }
//                                            }
//                                            $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
//                                            if($sentDocketManualTimerBreak){
//                                                foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
//                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
//                                                        if($explaination['label'] == "Explanation"){
//                                                            if ($explaination['isShow'] == 1){
//                                                                array_push($gridRow, $sentDocketManualTimerBreaks->reason);
//                                                            }
//                                                        }
//                                                    }
//                                                }
//                                            }else{
//                                                foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
//                                                    if($explaination['label'] == "Explanation"){
//                                                        if ($explaination['isShow'] == 1){
//                                                            array_push($gridRow, " ");
//                                                        }
//                                                    }
//                                                }
//                                            }
//
//                                            foreach ( unserialize($docketFieldData->exportMapping->value) as $totalHrs){
//                                                if ($totalHrs['label'] == "Total Hours"){
//                                                    if ($explaination['isShow'] == 1){
//                                                        if($docketFieldData->time_format == "Hours&Minutes"){
//                                                            array_push($gridRow, @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
//                                                        }else{
//                                                            $decimal = str_replace("Total: ","",@$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
//
//                                                            $hours = explode(" ",$decimal)[0];
//                                                            $minutes = explode(" ",$decimal)[2] * (1/60);
//                                                            array_push($gridRow, $hours+$minutes);
//                                                        }
//                                                    }
//                                                }
//                                            }
//
//
//                                        }elseif($docketFieldData->docket_field_category_id == 18){
//                                            array_push($gridRow, $docketFieldData->label);
//                                            foreach ( $docketFieldData->yesNoField as $yesNoField){
//                                                if ($yesNoField->is_show == 1){
//                                                    if($yesNoField->explanation == 1){
//                                                        array_push($gridRow, $yesNoField->label);
//                                                        $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->SentDocValYesNoValueInfo;
//                                                        if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
//                                                            if(count($SentDocValYesNoValueInfo)!=0){
//                                                                foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){
//                                                                    if($SentDocValYesNoValueInfos->YesNoDocketsField->is_show  == 1){
//                                                                        if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
//                                                                            $imageValue = unserialize($SentDocValYesNoValueInfos->value);
//                                                                            $toArray = array();
//                                                                            foreach ($imageValue as $imageValues) {
//                                                                                $toArray[] = asset($imageValues);
//                                                                            }
//
//                                                                            array_push($gridRow, implode(";",$toArray));
//                                                                        }else{
//                                                                            array_push($gridRow, $SentDocValYesNoValueInfos->value);
//                                                                        }
//                                                                    }
//                                                                }
//                                                            }else{
//                                                                foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                                    if($yesNoDocketsField->is_show  == 1){
//                                                                        if($yesNoDocketsField->docket_field_category_id == 5){
//                                                                            array_push($gridRow, "");
//                                                                        }else{
//                                                                            array_push($gridRow, "");
//                                                                        }
//                                                                    }
//                                                                }
//                                                            }
//
//                                                        }else{
//
//                                                            foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
//                                                                if($yesNoDocketsField->is_show  == 1){
//                                                                    if($yesNoDocketsField->docket_field_category_id == 5){
//                                                                        array_push($gridRow, "");
//                                                                    }else{
//                                                                        array_push($gridRow, "");
//                                                                    }
//                                                                }
//                                                            }
//                                                        }
//
//                                                    }else{
//                                                        array_push($gridRow, "");
//                                                    }
//                                                }
//                                            }
//
//
//
//                                        }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
//                                            $docketImageValues = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
//                                            $toArray = array();
//                                            if($docketImageValues){
//                                                foreach ($docketImageValues as $docketImageValue) {
//                                                    $toArray[] = asset($docketImageValue->value);
//                                                }
//                                                array_push($gridRow,  implode("; ",$toArray));
//                                            }else{
//                                                array_push($gridRow,  " ");
//                                            }
//
//                                        }elseif($docketFieldData->docket_field_category_id == 7 ){
//                                            $docketUnitRate = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
//                                            if($docketUnitRate){
//                                                foreach ($docketUnitRate as $sentDocketUnitRateValue){
//                                                    if($sentDocketUnitRateValue->docketUnitRateInfo->is_show == 1){
//                                                        array_push($gridRow,  $sentDocketUnitRateValue->value);
//                                                    }
//                                                }
//                                            }else{
//                                                foreach ($docketFieldData->unitRate as $docketUnitRatess){
//                                                    if($docketUnitRatess->is_show == 1){
//                                                        array_push($gridRow,  " ");
//                                                    }
//
//                                                }
//                                            }
//
//                                        }elseif($docketFieldData->docket_field_category_id == 24){
//                                            $DocketTallyable = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
//                                            if($DocketTallyable){
//                                                foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
//                                                    if($sentDocketTallyableUnitRateValue->docketUnitRateInfo->is_show == 1){
//                                                        array_push($gridRow,  $sentDocketTallyableUnitRateValue->value);
//                                                    }
//                                                }
//
//
//                                            }else{
//                                                foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
//                                                    if($docketUnitRate->is_show== 1){
//                                                        array_push($gridRow,  " ");
//                                                    }
//                                                }
//                                            }
//                                        }elseif($docketFieldData->docket_field_category_id == 8){
//                                            $checkBoxValue = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first();
//                                            if($checkBoxValue != null){
//                                                if($checkBoxValue->value == 1){
//                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
//                                                        if ($checkBox['isShow'] == 1) {
//                                                            if ($checkBox["label"] == "Checked") {
//                                                                array_push($gridRow, $checkBox["csvHeader"]);
//                                                            }
//                                                        }
//                                                    }
//                                                }else if($checkBoxValue->value == 0){
//                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
//                                                        if ($checkBox['isShow'] == 1) {
//                                                            if ($checkBox["label"] == "Unchecked") {
//
//                                                                array_push($gridRow, $checkBox["csvHeader"]);
//                                                            }
//                                                        }
//                                                    }
//                                                }
//                                            }else{
//                                                array_push($gridRow, " ");
//
//                                            }
//
//
//
//
//                                        }elseif($docketFieldData->docket_field_category_id == 22){
//                                            foreach($docketFieldData->girdFields as $girdFields ){
//                                                if($girdFields->is_show == 1) {
//                                                    if($girdFields->docket_field_category_id == 20 || $girdFields->docket_field_category_id == 8){
//                                                        foreach ( unserialize($girdFields->export_value) as $exportValue){
//                                                            if ($exportValue['isShow'] == 1) {
//                                                                array_push($gridRow, " ");
//
//
//                                                            }
//                                                        }
//                                                    }else{
//                                                        array_push($gridRow, " ");
//                                                    }
//                                                }
//                                            }
//
//
//
//                                        }
//                                    }
//                                }
//
//                            }
//                            $sentDocketValues['nongrid'][] = $gridRow;
//                        }
//                    }
//                }
//
//                //insert the header
//                $csv->insertOne($sentDocketHeader);
//
//
//
//                //insert all the record
//                foreach($sentDocketValues as $key=>$sentDocketVal){
//                    if($key === "nongrid"){
//                        foreach($sentDocketVal as $nogridValue){
//                            $csv->insertOne($nogridValue);
//                        }
//
//                    }else{
//
//                        foreach($sentDocketVal as $data){
//                            $csv->insertOne($data);
//                        }
//                    }
//
//                }
//
//                $csv->insertOne(array(""));
//
//            }
//        }
//        $csv->output('Export-Docket-'.$date.'.csv');
//
//
//
//
//    }


    public  function exportAllDocket(Request $request){

        $sentDocketId = $request->d;
        $sentEmailDocketId = $request->ed;
        $alldockets = array([
            'sent_docket'=>$sentDocketId,
            'sent_email_docket'=>$sentEmailDocketId
        ]);
        $newDockeArray = array();
        foreach($alldockets as $alldocket){
            if ($alldocket['sent_email_docket'] != null) {
                $checkSendDocketId = EmailSentDocket::whereIn('id', $alldocket['sent_email_docket'])->get();
                foreach($checkSendDocketId as $checkSendDocketIds){
                    $newDockeArray[] = array(
                        'sendDocketId' => $checkSendDocketIds->id,
                        'docketId' => $checkSendDocketIds->docket_id,
                        'isEmail'=> true
                    );
                }
            }

            if ($alldocket['sent_docket'] != null) {
                $checkSendDocketId = SentDockets::whereIn('id', $alldocket['sent_docket'])->get();
                foreach($checkSendDocketId as $checkSendDocketIds){
                    $newDockeArray[] = array(
                        'sendDocketId' => $checkSendDocketIds->id,
                        'docketId' => $checkSendDocketIds->docket_id,
                        'isEmail'=> false
                    );
                }
            }
        }

        $docketGroupData = $this->groupByTempletId($newDockeArray);
        $data = array();
        $csv = Writer::createFromString('');
        $csv->setNewline("\r\n");
        $date=Carbon::now()->format('d-M-Y');
        $newline = $csv->getNewline();
        foreach($docketGroupData as $key=>$docketGroupDatas ){
            $sentDocketValues = array();
            $sentDocketHeader = array();
            $docket = Docket::where('id',$key)->get()->first();

            // $docketFieldOrder = (new Collection(@$docket->docketField))->sortBy('order');
            $docketFieldOrder =  DocketField::where('docket_id',$docket->id)->withTrashed()->orderBy('order','asc')->get();
            if(ExportMapping::whereIn('docket_field_id',$docketFieldOrder->pluck('id')->toArray())->count()==0){

                //HeaderValue
                array_push($sentDocketHeader, "Docket Id");
                array_push($sentDocketHeader, "From User");
                array_push($sentDocketHeader, "To User");
                array_push($sentDocketHeader, "From Company");
                array_push($sentDocketHeader, "To Company");
                array_push($sentDocketHeader, "Sender Address");
                array_push($sentDocketHeader, "Recipient Address");
                array_push($sentDocketHeader, "Sender Abn");
                foreach($docketFieldOrder as $docketFieldOrders){
                    if($docketFieldOrders->docket_field_category_id == 1 || $docketFieldOrders->docket_field_category_id == 2 || $docketFieldOrders->docket_field_category_id ==  3|| $docketFieldOrders->docket_field_category_id == 4 || $docketFieldOrders->docket_field_category_id == 6 || $docketFieldOrders->docket_field_category_id == 16 || $docketFieldOrders->docket_field_category_id == 12|| $docketFieldOrders->docket_field_category_id == 15 || $docketFieldOrders->docket_field_category_id == 26 || $docketFieldOrders->docket_field_category_id == 25 || $docketFieldOrders->docket_field_category_id == 13|| $docketFieldOrders->docket_field_category_id == 27){
                        array_push($sentDocketHeader, $docketFieldOrders->label);
                    }elseif($docketFieldOrders->docket_field_category_id == 20){
                        foreach ($docketFieldOrders->docketManualTimer as $docketManualTimers){
                            array_push($sentDocketHeader, $docketManualTimers->label);
                        }
                        foreach ($docketFieldOrders->docketManualTimerBreak as $docketManualTimerBreaks){
                            array_push($sentDocketHeader, $docketManualTimerBreaks->label);
                        }
                        array_push($sentDocketHeader, "Explanation");
                        array_push($sentDocketHeader, "Total Hours");

                    }elseif($docketFieldOrders->docket_field_category_id == 18){
                        array_push($sentDocketHeader, $docketFieldOrders->label);
                        foreach ( $docketFieldOrders->yesNoField as $yesNoField){
                            if($yesNoField->explanation == 1){
                                array_push($sentDocketHeader, $yesNoField->label);
                                foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                    if($yesNoDocketsField->docket_field_category_id == 5){
                                        array_push($sentDocketHeader, $yesNoField->label.": ".$yesNoDocketsField->label);
                                    }else{
                                        array_push($sentDocketHeader, $yesNoField->label.": ".$yesNoDocketsField->label);
                                    }
                                }
                            }else{
                                array_push($sentDocketHeader, $yesNoField->label);
                            }
                        }


                    }elseif($docketFieldOrders->docket_field_category_id == 5 || $docketFieldOrders->docket_field_category_id == 9 || $docketFieldOrders->docket_field_category_id == 14 ){
                        array_push($sentDocketHeader, $docketFieldOrders->label);
                    }elseif($docketFieldOrders->docket_field_category_id == 7){
                        foreach ($docketFieldOrders->unitRate as $docketUnitRate){
                            array_push($sentDocketHeader, $docketUnitRate->label);
                        }
                    }elseif($docketFieldOrders->docket_field_category_id == 24){
                        foreach ($docketFieldOrders->tallyUnitRate as $docketTallyableUnitRate){
                            array_push($sentDocketHeader, $docketTallyableUnitRate->label);
                        }
                    }elseif($docketFieldOrders->docket_field_category_id == 8){
                        array_push($sentDocketHeader, $docketFieldOrders->label);
                    }elseif($docketFieldOrders->docket_field_category_id == 22){

                        foreach($docketFieldOrders->girdFields as $girdFields ){
                            if($girdFields->docket_field_category_id == 20 ){
                                array_push($sentDocketHeader, "Form");
                                array_push($sentDocketHeader, "To");
                                array_push($sentDocketHeader, "Total Break");
                                array_push($sentDocketHeader, "Explanation");
                                array_push($sentDocketHeader, "Total Hours");
                            }elseif($girdFields->docket_field_category_id == 8){
                                array_push($sentDocketHeader, $docketFieldOrders->label);
                            }else{
                                array_push($sentDocketHeader, $girdFields->label);
                            }
                        }

                    }
                }

                //value
                // $checkGridValue = $this->checkGridValue( $docketGroupDatas);
                $allGridValue = array();
                foreach($docketGroupDatas as $singleData){
                    $checkGridValue = $this->checkGridValue( $singleData);

                    $gridRow = array();
                    if($singleData['isEmail'] == true){
                        $sendDocVal = @EmailSentDocket::where('docket_id',$singleData['docketId'])->where('id',$singleData['sendDocketId'])->get()->first();
                        if(count($checkGridValue) != 0){

                            $maxValue = max($checkGridValue);
                            for ($i = 0; $i <= $maxValue; $i++) {
                                //Docket Id
                                $gridRow[$i][] = $sendDocVal->formatted_id;

                                //From User
                                $gridRow[$i][] = $sendDocVal->sender_name;
                                //To User
                                $recipientInfos = $sendDocVal->recipientInfo;
                                $toArray = array();
                                $companyToArray =  array();
                                $companyAddressToArray = array();
                                foreach ($recipientInfos as $recipientInfo) {
                                    $toArray[] = @$recipientInfo->emailUserInfo->email;
                                    $companyToArray[] = $recipientInfo->receiver_company_name;
                                    $companyAddressToArray[] = $recipientInfo->receiver_company_address;
                                }
                                $gridRow[$i][] = implode("; ",$toArray);

                                //From Company
                                $gridRow[$i][] = $sendDocVal->company_name;
                                // To Company
                                $gridRow[$i][] = implode("; ",$companyToArray);

                                //Sender Address
                                $gridRow[$i][] = $sendDocVal->company_address ;

                                //Recipient Address
                                $gridRow[$i][] = implode("; ",$companyAddressToArray);
                                //Sender Abn
                                $gridRow[$i][] = $sendDocVal->abn;
                                foreach($docketFieldOrder as $docketFieldData){
                                    if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
                                        $valueData = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value;
                                        if($valueData){
                                            $gridRow[$i][] = $valueData;
                                        }else{
                                            $gridRow[$i][] = "";

                                        }
                                    }elseif($docketFieldData->docket_field_category_id == 20){

                                        $sentDocketManualTimer = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimer;
                                        if($sentDocketManualTimer){
                                            foreach ($sentDocketManualTimer as $sentDocketManualTimers){
                                                if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
                                                    $gridRow[$i][] = Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A');
                                                }else{
                                                    $gridRow[$i][] =$sentDocketManualTimers->value;
                                                }

                                            }
                                        }else{
                                            foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
                                                $gridRow[$i][] = "";
                                            }
                                        }

                                        $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
                                        if($sentDocketManualTimerBreak){
                                            foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                                $gridRow[$i][] = $sentDocketManualTimerBreaks->value;
                                            }
                                        }else{
                                            foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
                                                $gridRow[$i][] = "";
                                            }
                                        }

                                        $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
                                        if($sentDocketManualTimerBreak){
                                            foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                                if($sentDocketManualTimerBreaks->reason == "n/a"){
                                                    $gridRow[$i][] = $sentDocketManualTimerBreaks->reason;
                                                }else{
                                                    $gridRow[$i][] = " ";
                                                }
                                            }
                                        }else{
                                            $gridRow[$i][] = " ";
                                        }
                                        if($docketFieldData->time_format == "Hours&Minutes"){
                                            $gridRow[$i][] = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value;

                                        }else{
                                            if(@$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value != null || @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value != "N/a"){
                                                $decimal = str_replace("Total: ","", @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value);
                                                $hours = explode(" ",$decimal)[0];
                                                $minutes = explode(" ",$decimal)[2] * (1/60);
                                                $gridRow[$i][] = $hours+$minutes;
                                            }else{
                                                $gridRow[$i][] = "";
                                            }


                                        }
                                    }elseif($docketFieldData->docket_field_category_id == 18){

                                        $gridRow[$i][] = $docketFieldData->label;
                                        foreach ( $docketFieldData->yesNoField as $yesNoField){
                                            if($yesNoField->explanation == 1){
                                                $gridRow[$i][]= $yesNoField->label;
                                                $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->SentEmailDocValYesNoValueInfo;
                                                if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
                                                    if(count($SentDocValYesNoValueInfo)!=0){
                                                        foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){
                                                            if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
                                                                $imageValue = unserialize($SentDocValYesNoValueInfos->value);

                                                                $toArray = array();
                                                                foreach ($imageValue as $imageValues) {
                                                                    $toArray[] = AmazoneBucket::url() . $imageValues;
                                                                }
                                                                $gridRow[$i][] = implode(";",$toArray);

                                                            }else{
                                                                $gridRow[$i][]= $SentDocValYesNoValueInfos->value;
                                                            }
                                                        }
                                                    }else{
                                                        foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                            if($yesNoDocketsField->docket_field_category_id == 5){
                                                                $gridRow[$i][]= "";
                                                            }else{
                                                                $gridRow[$i][] = "";
                                                            }
                                                        }
                                                    }

                                                }else{
                                                    foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                        if($yesNoDocketsField->docket_field_category_id == 5){
                                                            $gridRow[$i][]= "";
                                                        }else{
                                                            $gridRow[$i][] = "";
                                                        }
                                                    }
                                                }

                                            }else{
                                                $gridRow[$i][]= "";
                                            }
                                        }


                                    }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
                                        $docketImageValues = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
                                        $toArray = array();
                                        if($docketImageValues){
                                            foreach ($docketImageValues as $docketImageValue) {
                                                $toArray[] = AmazoneBucket::url() . $docketImageValue->value;
                                            }
                                            $gridRow[$i][] =  implode("; ",$toArray);
                                        }else{
                                            $gridRow[$i][] =  " ";
                                        }
                                    }elseif($docketFieldData->docket_field_category_id == 7 ){
                                        $docketUnitRate = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
                                        if($docketUnitRate){
                                            foreach ($docketUnitRate as $sentDocketUnitRateValue){
                                                $gridRow[$i][] =   $sentDocketUnitRateValue->value;
                                            }
                                        }else{
                                            foreach ($docketFieldData->unitRate as $docketUnitRate){
                                                $gridRow[$i][] =   " ";
                                            }
                                        }
                                    }elseif($docketFieldData->docket_field_category_id == 24){
                                        $DocketTallyable = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
                                        if($DocketTallyable){
                                            foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
                                                $gridRow[$i][] = $sentDocketTallyableUnitRateValue->value;
                                            }
                                        }else{
                                            foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
                                                $gridRow[$i][] =  " ";
                                            }
                                        }
                                    }elseif($docketFieldData->docket_field_category_id == 8){
                                        $checkBoxValue = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first();
                                        if($checkBoxValue != null){
                                            if($checkBoxValue->value == 1){
                                                $gridRow[$i][] = "Yes";
                                            }else if($checkBoxValue->value == 0){
                                                $gridRow[$i][] = "No";
                                            }
                                        }else{
                                            $gridRow[$i][] = "";
                                        }



                                    }elseif($docketFieldData->docket_field_category_id == 22){
                                        foreach($docketFieldData->girdFields as $girdField){
                                            $DocFieldGridVal = DocketFieldGridValue::where('docket_id',$sendDocVal->id)->where('docket_field_grid_id',$girdField->id)->where('index',$i)->get()->first();
                                            if($girdField->docket_field_category_id == 20){
                                                $sendGridManualTimerValue = json_decode(@$DocFieldGridVal->value, true);
                                                if($DocFieldGridVal){
                                                    if($sendGridManualTimerValue['from'] != 0 && $sendGridManualTimerValue['from'] != 'n/a'  && $sendGridManualTimerValue['from'] != 'N/a' && $sendGridManualTimerValue['from']!= null){
                                                        $gridRow[$i][] = Carbon::parse($sendGridManualTimerValue['from'] )->format('d-M.-Y g:i A') ;
                                                    }else{
                                                        $gridRow[$i][] = $sendGridManualTimerValue['from'];
                                                    }
                                                    if($sendGridManualTimerValue['to'] != 0 && $sendGridManualTimerValue['to'] != 'n/a'  && $sendGridManualTimerValue['to'] != 'N/a' && $sendGridManualTimerValue['to']!= null){
                                                        $gridRow[$i][] =   Carbon::parse($sendGridManualTimerValue['to'] )->format('d-M.-Y g:i A');

                                                    }else{
                                                        $gridRow[$i][] =  $sendGridManualTimerValue['to'];

                                                    }


                                                    if($sendGridManualTimerValue['breakDuration'] != 0){
                                                        $gridRow[$i][] = $this->convertHrsMin($sendGridManualTimerValue['breakDuration']) ;
                                                    }else{
                                                        $gridRow[$i][] = "0 Hour 0 Minute" ;
                                                    }
                                                    if($sendGridManualTimerValue['explanation'] != ""){
                                                        $gridRow[$i][] = $sendGridManualTimerValue['explanation'] ;
                                                    }else{
                                                        $gridRow[$i][] = "N/a" ;
                                                    }
                                                    if($sendGridManualTimerValue['totalDuration'] != 0){

                                                        if($girdField->time_format == "Hours&Minutes"){
                                                            $gridRow[$i][] = $this->convertHrsMin($sendGridManualTimerValue['totalDuration']);
                                                        }else{
                                                            $decimal =  $this->convertHrsMin($sendGridManualTimerValue['totalDuration']);
                                                            $hours = explode(" ",$decimal)[0];
                                                            $minutes = explode(" ",$decimal)[2] * (1/60);
                                                            $gridRow[$i][] = $hours+$minutes;
                                                        }

                                                    }else{
                                                        $gridRow[$i][] = "0 Hour 0 Minute" ;
                                                    }
                                                }else{
                                                    $gridRow[$i][] = " ";
                                                    $gridRow[$i][] = " ";
                                                    $gridRow[$i][] = " ";
                                                    $gridRow[$i][] = " ";
                                                    $gridRow[$i][] = " ";
                                                }



                                            }else if($girdField->docket_field_category_id == 8){
                                                if($DocFieldGridVal){
                                                    if(@$DocFieldGridVal->value == 1){
                                                        $gridRow[$i][] =  "Yes";

                                                    }else{
                                                        $gridRow[$i][] =  "No";
                                                    }
                                                }else{
                                                    $gridRow[$i][] =  " ";
                                                }
                                            }
                                            else if( $girdField->docket_field_category_id == 9){
                                                $imageValue =  @$DocFieldGridVal->value;
                                                $toArray = array();
                                                if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
                                                    $gridRow[$i][] =  "";
                                                }else{
                                                    foreach(unserialize($imageValue) as $exportValue){
                                                        $toArray[] = AmazoneBucket::url() . $exportValue["image"];
                                                    }
                                                    $gridRow[$i][] =  implode("; ",$toArray);
                                                }
                                            }else if($girdField->docket_field_category_id == 5  || $girdField->docket_field_category_id == 14 ){
                                                $imageValue =  @$DocFieldGridVal->value;

                                                $toArray = array();
                                                if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
                                                    $gridRow[$i][] =  "";
                                                }else{

                                                    foreach(unserialize($imageValue) as $exportValue){
                                                        $toArray[] = AmazoneBucket::url() . $exportValue;
                                                    }
                                                    $gridRow[$i][] =  implode("; ",$toArray);

                                                }


                                            }else{
                                                $gridRow[$i][] =  @$DocFieldGridVal->value;
                                            }


                                        }
                                    }

                                }

                            }
                            $sentDocketValues[] = $gridRow;
                        }else{

                            array_push($gridRow,$sendDocVal->formatted_id);
                            //From User
                            array_push($gridRow,$sendDocVal->sender_name);

                            //To User
                            $recipientInfos = $sendDocVal->recipientInfo;
                            $toArray = array();
                            $companyToArray =  array();
                            $companyAddressToArray = array();
                            foreach ($recipientInfos as $recipientInfo) {
                                $toArray[] = @$recipientInfo->emailUserInfo->email;
                                $companyToArray[] = $recipientInfo->receiver_company_name;
                                $companyAddressToArray[] = $recipientInfo->receiver_company_address;
                            }
                            array_push($gridRow, implode("; ",$toArray));

                            //From Company
                            array_push($gridRow, $sendDocVal->company_name);
                            // To Company

                            array_push($gridRow, implode("; ",$companyToArray));

                            //Sender Address
                            array_push($gridRow, $sendDocVal->company_address);

                            //Recipient Address
                            array_push($gridRow, implode("; ",$companyAddressToArray));
                            //Sender Abn
                            array_push($gridRow, $sendDocVal->abn);




                            foreach($docketFieldOrder as $docketFieldData){
                                if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
                                    $valueData = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value;
                                    if($valueData){
                                        array_push($gridRow, @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value);
                                    }else{
                                        array_push($gridRow, "");
                                    }
                                }elseif($docketFieldData->docket_field_category_id == 20){
                                    $sentDocketManualTimer = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimer;
                                    if($sentDocketManualTimer){
                                        foreach ($sentDocketManualTimer as $sentDocketManualTimers){
                                            if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
                                                array_push($gridRow, Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A'));
                                            }else{
                                                array_push($gridRow, $sentDocketManualTimers->value);
                                            }
                                        }
                                    }else{
                                        foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
                                            array_push($gridRow, "");
                                        }
                                    }

                                    $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
                                    if($sentDocketManualTimerBreak){
                                        foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                            array_push($gridRow, $sentDocketManualTimerBreaks->value);
                                        }
                                    }else{
                                        foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
                                            array_push($gridRow,"");
                                        }
                                    }

                                    $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
                                    if($sentDocketManualTimerBreak){
                                        foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                            if($sentDocketManualTimerBreaks->reason == "n/a"){
                                                array_push($gridRow, $sentDocketManualTimerBreaks->reason);
                                            }else{
                                                array_push($gridRow, " ");
                                            }
                                        }
                                    }else{
                                        array_push($gridRow, " ");
                                    }


                                    if($docketFieldData->time_format == "Hours&Minutes"){

                                        array_push($gridRow, @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value);
                                    }else{
                                        if(@$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value != null || @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value != "N/a"){
                                            $decimal = str_replace("Total: ","", @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value);
                                            $hours = explode(" ",$decimal)[0];
                                            $minutes = explode(" ",$decimal)[2] * (1/60);
                                            array_push($gridRow, $hours+$minutes);
                                        }else{
                                            array_push($gridRow, "");

                                        }

                                    }

                                }elseif($docketFieldData->docket_field_category_id == 18){
                                    array_push($gridRow, $docketFieldData->label);
                                    foreach ( $docketFieldData->yesNoField as $yesNoField){
                                        if($yesNoField->explanation == 1){
                                            array_push($gridRow, $yesNoField->label);
                                            $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->SentEmailDocValYesNoValueInfo;
                                            if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
                                                if(count($SentDocValYesNoValueInfo)!=0){
                                                    foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){
                                                        if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
                                                            $imageValue = unserialize($SentDocValYesNoValueInfos->value);
                                                            $toArray = array();
                                                            foreach ($imageValue as $imageValues) {
                                                                $toArray[] = AmazoneBucket::url() . $imageValues;
                                                            }

                                                            array_push($gridRow, implode(";",$toArray));
                                                        }else{
                                                            array_push($gridRow, $SentDocValYesNoValueInfos->value);
                                                        }
                                                    }
                                                }else{
                                                    foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                        if($yesNoDocketsField->docket_field_category_id == 5){
                                                            array_push($gridRow, "");
                                                        }else{
                                                            array_push($gridRow, "");
                                                        }
                                                    }
                                                }

                                            }else{
                                                foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                    if($yesNoDocketsField->docket_field_category_id == 5){
                                                        array_push($gridRow, "");
                                                    }else{
                                                        array_push($gridRow, "");
                                                    }
                                                }
                                            }

                                        }else{
                                            array_push($gridRow, "");
                                        }
                                    }



                                }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
                                    $docketImageValues = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
                                    $toArray = array();
                                    if($docketImageValues){
                                        foreach ($docketImageValues as $docketImageValue) {
                                            $toArray[] = AmazoneBucket::url() . $docketImageValue->value;
                                        }
                                        array_push($gridRow,  implode("; ",$toArray));
                                    }else{
                                        array_push($gridRow,  " ");
                                    }

                                }elseif($docketFieldData->docket_field_category_id == 7 ){
                                    $docketUnitRate = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
                                    if($docketUnitRate){
                                        foreach ($docketUnitRate as $sentDocketUnitRateValue){
                                            array_push($gridRow,  $sentDocketUnitRateValue->value);
                                        }
                                    }else{
                                        foreach ($docketFieldData->unitRate as $docketUnitRate){
                                            array_push($gridRow,  " ");
                                        }
                                    }

                                }elseif($docketFieldData->docket_field_category_id == 24){
                                    $DocketTallyable = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
                                    if($DocketTallyable){
                                        foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
                                            array_push($gridRow, $sentDocketTallyableUnitRateValue->value);
                                        }
                                    }else{
                                        foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
                                            array_push($gridRow,  " ");
                                        }
                                    }
                                }elseif($docketFieldData->docket_field_category_id == 8){
                                    $checkBoxValue = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first();
                                    if($checkBoxValue != null){
                                        if($checkBoxValue->value == 1){
                                            array_push($gridRow, "Yes");
                                        }else if($checkBoxValue->value == 0){
                                            array_push($gridRow, "No");
                                        }
                                    }else{
                                        array_push($gridRow, " ");
                                    }




                                }elseif($docketFieldData->docket_field_category_id == 22){
                                    foreach($docketFieldData->girdFields as $girdFields ){
                                        if($girdFields->docket_field_category_id == 20){
                                            array_push($gridRow, "");
                                            array_push($gridRow, "");
                                            array_push($gridRow, "");
                                            array_push($gridRow, "");
                                            array_push($gridRow, "");
                                        }elseif($girdFields->docket_field_category_id == 8){
                                            array_push($gridRow, "");
                                        }else{
                                            array_push($gridRow, " ");
                                        }

                                    }
                                }

                            }
                            $sentDocketValues['nongrid'][] = $gridRow;
                        }
                    }
                    if($singleData['isEmail'] == false){
                        $sendDocVal = @SentDockets::where('docket_id',$singleData['docketId'])->where('id',$singleData['sendDocketId'])->get()->first();
                        if(count($checkGridValue) != 0){
                            $maxValue = max($checkGridValue);
                            for ($i = 0; $i <= $maxValue; $i++) {


                                //Docket Id
                                $gridRow[$i][] =$sendDocVal->formatted_id;

                                //From User
                                $gridRow[$i][] = $sendDocVal->sender_name;
                                //To User
                                $recipientInfos = $sendDocVal->recipientInfo;
                                $toArray = array();
                                $companyToArray =  array();
                                $companyAddressToArray = array();
                                foreach ($recipientInfos as $recipientInfo) {
                                    if(Employee::where('user_id', $recipientInfo->userInfo->id)->count()!=0):
                                        $companyId = Employee::where('user_id', $recipientInfo->userInfo->id)->first()->company_id;
                                    else :
                                        $companyId   =   @Company::where('user_id', @$recipientInfo->userInfo->id)->first();
                                    endif;
                                    $toArray[] = @$recipientInfo->userInfo->first_name. ' ' . @$recipientInfo->userInfo->last_name;
                                    $companyToArray[] = @Company::where('id',@$companyId->id)->first()->name;
                                    $companyAddressToArray[] = @Company::where('id',@$companyId->id)->first()->address;
                                }

                                $gridRow[$i][] = implode("; ",$toArray);

                                //From Company
                                $gridRow[$i][] = $sendDocVal->company_name;
                                // To Company
                                $gridRow[$i][] = implode("; ",$companyToArray);

                                //Sender Address
                                $gridRow[$i][] = $sendDocVal->company_address ;

                                //Recipient Address
                                $gridRow[$i][] = implode("; ",$companyAddressToArray);
                                //Sender Abn
                                $gridRow[$i][] = $sendDocVal->abn;





                                foreach($docketFieldOrder as $docketFieldData){

                                    if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
                                        $valueData = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value;
                                        if($valueData){
                                            $gridRow[$i][] = $valueData;
                                        }else{
                                            $gridRow[$i][] = "";

                                        }
                                    }elseif($docketFieldData->docket_field_category_id == 20){

                                        $sentDocketManualTimer = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimer;
                                        if($sentDocketManualTimer){
                                            foreach ($sentDocketManualTimer as $sentDocketManualTimers){
                                                if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
                                                    $gridRow[$i][] = Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A');
                                                }else{
                                                    $gridRow[$i][] = $sentDocketManualTimers->value;

                                                }


                                            }
                                        }else{
                                            foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
                                                $gridRow[$i][] = "";
                                            }
                                        }

                                        $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
                                        if($sentDocketManualTimerBreak){
                                            foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                                $gridRow[$i][] = $sentDocketManualTimerBreaks->value;
                                            }
                                        }else{
                                            foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
                                                $gridRow[$i][] = "";
                                            }
                                        }

                                        $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
                                        if($sentDocketManualTimerBreak){
                                            foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                                if($sentDocketManualTimerBreaks->reason == "n/a"){
                                                    $gridRow[$i][] = $sentDocketManualTimerBreaks->reason;
                                                }else{
                                                    $gridRow[$i][] = " ";
                                                }
                                            }
                                        }else{
                                            $gridRow[$i][] = " ";
                                        }


                                        if($docketFieldData->time_format == "Hours&Minutes"){
                                            $gridRow[$i][] = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value;
                                        }else{
                                            if( @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value != null ||  @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value != "N/a"){
                                                $decimal = str_replace("Total: ","", @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
                                                $hours = explode(" ",$decimal)[0];
                                                $minutes = explode(" ",$decimal)[2] * (1/60);
                                                $gridRow[$i][] = $hours+$minutes;
                                            }else{
                                                $gridRow[$i][] = " ";
                                            }

                                        }



                                    }elseif($docketFieldData->docket_field_category_id == 18){

                                        $gridRow[$i][] = $docketFieldData->label;
                                        foreach ( $docketFieldData->yesNoField as $yesNoField){
                                            if($yesNoField->explanation == 1){
                                                $gridRow[$i][]= $yesNoField->label;
                                                $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->SentDocValYesNoValueInfo;
                                                if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
                                                    if(count($SentDocValYesNoValueInfo)!=0){
                                                        foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){
                                                            if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
                                                                $imageValue = unserialize($SentDocValYesNoValueInfos->value);
                                                                $toArray = array();
                                                                foreach ($imageValue as $imageValues) {
                                                                    $toArray[] = AmazoneBucket::url() . $imageValues;
                                                                }


                                                                $gridRow[$i][] = implode(";",$toArray);
                                                            }else{
                                                                $gridRow[$i][]= $SentDocValYesNoValueInfos->value;
                                                            }
                                                        }
                                                    }else{
                                                        foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                            if($yesNoDocketsField->docket_field_category_id == 5){
                                                                $gridRow[$i][]= "";
                                                            }else{
                                                                $gridRow[$i][] = "";
                                                            }
                                                        }
                                                    }

                                                }else{
                                                    foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                        if($yesNoDocketsField->docket_field_category_id == 5){
                                                            $gridRow[$i][]= "";
                                                        }else{
                                                            $gridRow[$i][] = "";
                                                        }
                                                    }
                                                }

                                            }else{
                                                $gridRow[$i][]= "";
                                            }
                                        }


                                    }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){

                                        $docketImageValues = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
                                        $toArray = array();
                                        if($docketImageValues){
                                            foreach ($docketImageValues as $docketImageValue) {
                                                $toArray[] = AmazoneBucket::url() . $docketImageValue->value;
                                            }
                                            $gridRow[$i][] =  implode("; ",$toArray);
                                        }else{
                                            $gridRow[$i][] =  " ";
                                        }

                                    }elseif($docketFieldData->docket_field_category_id == 7 ){
                                        $docketUnitRate = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
                                        if($docketUnitRate){
                                            foreach ($docketUnitRate as $sentDocketUnitRateValue){
                                                $gridRow[$i][] =   $sentDocketUnitRateValue->value;
                                            }
                                        }else{
                                            foreach ($docketFieldData->unitRate as $docketUnitRate){
                                                $gridRow[$i][] =   " ";
                                            }
                                        }
                                    }elseif($docketFieldData->docket_field_category_id == 24){
                                        $DocketTallyable = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
                                        if($DocketTallyable){
                                            foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
                                                $gridRow[$i][] = $sentDocketTallyableUnitRateValue->value;
                                            }
                                        }else{
                                            foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
                                                $gridRow[$i][] =  " ";
                                            }
                                        }
                                    }elseif($docketFieldData->docket_field_category_id == 8){
                                        $checkBoxValue = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first();
                                        if($checkBoxValue != null){
                                            if($checkBoxValue->value == 1){
                                                $gridRow[$i][] = "Yes";

                                            }else if($checkBoxValue->value == 0){
                                                $gridRow[$i][] = "No";
                                            }
                                        }else{
                                            $gridRow[$i][] = "";
                                        }
                                    }elseif($docketFieldData->docket_field_category_id == 22){
                                        foreach($docketFieldData->girdFields as $girdField){
                                            $DocFieldGridVal = DocketFieldGridValue::where('docket_id',$sendDocVal->id)->where('docket_field_grid_id',$girdField->id)->where('index',$i)->get()->first();
                                            if($girdField->docket_field_category_id == 20){
                                                $sendGridManualTimerValue = json_decode(@$DocFieldGridVal->value, true);
                                                if($DocFieldGridVal){
                                                    print($sendDocVal->id."--");
                                                    if($sendGridManualTimerValue['from'] != 0 && $sendGridManualTimerValue['from'] != 'n/a'  && $sendGridManualTimerValue['from'] != 'N/a' && $sendGridManualTimerValue['from']!= null){
                                                        $gridRow[$i][] =   Carbon::parse($sendGridManualTimerValue['from'])->format('d-M.-Y g:i A') ;
                                                    }else{
                                                        $gridRow[$i][] =   $sendGridManualTimerValue['from'];
                                                    }
                                                    if($sendGridManualTimerValue['to'] != 0 && $sendGridManualTimerValue['to'] != 'n/a'  && $sendGridManualTimerValue['to'] != 'N/a' && $sendGridManualTimerValue['to']!= null){
                                                        $gridRow[$i][] =   Carbon::parse($sendGridManualTimerValue['to'])->format('d-M.-Y g:i A');
                                                    }else{
                                                        $gridRow[$i][] =   $sendGridManualTimerValue['to'];
                                                    }
                                                    if($sendGridManualTimerValue['breakDuration'] != 0){
                                                        $gridRow[$i][] = $this->convertHrsMin($sendGridManualTimerValue['breakDuration']);
                                                    }else{
                                                        $gridRow[$i][] = "0 Hour 0 Minute" ;
                                                    }
                                                    if($sendGridManualTimerValue['explanation'] != ""){
                                                        $gridRow[$i][] = $sendGridManualTimerValue['explanation'] ;
                                                    }else{
                                                        $gridRow[$i][] = "N/a" ;
                                                    }
                                                    if($sendGridManualTimerValue['totalDuration'] != 0){
                                                        if($girdField->time_format == "Hours&Minutes"){
                                                            $gridRow[$i][] = $this->convertHrsMin($sendGridManualTimerValue['totalDuration']);
                                                        }else{
                                                            $decimal = $this->convertHrsMin($sendGridManualTimerValue['totalDuration']);
                                                            $hours = explode(" ",$decimal)[0];
                                                            $minutes = explode(" ",$decimal)[2] * (1/60);
                                                            $gridRow[$i][] = $hours+$minutes;
                                                        }

                                                    }else{
                                                        $gridRow[$i][] = "0 Hour 0 Minute" ;
                                                    }
                                                }else{
                                                    $gridRow[$i][] = " ";
                                                    $gridRow[$i][] = " ";
                                                    $gridRow[$i][] = " ";
                                                    $gridRow[$i][] = " ";
                                                    $gridRow[$i][] = " ";
                                                }



                                            }else if($girdField->docket_field_category_id == 8){
                                                if($DocFieldGridVal){
                                                    if(@$DocFieldGridVal->value == 1){
                                                        $gridRow[$i][] =  "Yes";
                                                    }else{
                                                        $gridRow[$i][] =  "No";
                                                    }


                                                }else{
                                                    $gridRow[$i][] =  " ";
                                                }


                                            }
                                            else if( $girdField->docket_field_category_id == 9){
                                                $imageValue =  @$DocFieldGridVal->value;
                                                $toArray = array();
                                                if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
                                                    $gridRow[$i][] =  "";
                                                }else{
                                                    foreach(unserialize($imageValue) as $exportValue){
                                                        $toArray[] = AmazoneBucket::url() . $exportValue["image"];
                                                    }
                                                    $gridRow[$i][] =  implode("; ",$toArray);
                                                }
                                            }else if($girdField->docket_field_category_id == 5  || $girdField->docket_field_category_id == 14 ){
                                                $imageValue =  @$DocFieldGridVal->value;

                                                $toArray = array();
                                                if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
                                                    $gridRow[$i][] =  "";
                                                }else{

                                                    foreach(unserialize($imageValue) as $exportValue){
                                                        $toArray[] = AmazoneBucket::url() . $exportValue;
                                                    }
                                                    $gridRow[$i][] =  implode("; ",$toArray);

                                                }


                                            }else{
                                                $gridRow[$i][] =  @$DocFieldGridVal->value;
                                            }


                                        }
                                    }

                                }

                            }
                            $sentDocketValues[] = $gridRow;
                        }else{



                            //Docket Id
                            array_push($gridRow,$sendDocVal->formatted_id);

                            //From User

                            array_push($gridRow,$sendDocVal->sender_name);
                            //To User
                            $recipientInfos = $sendDocVal->recipientInfo;
                            $toArray = array();
                            $companyToArray =  array();
                            $companyAddressToArray = array();
                            foreach ($recipientInfos as $recipientInfo) {
                                if(Employee::where('user_id', $recipientInfo->userInfo->id)->count()!=0):
                                    $companyId = Employee::where('user_id', $recipientInfo->userInfo->id)->first()->company_id;
                                else :
                                    $companyId   =   Company::where('user_id', @$recipientInfo->userInfo->id)->first();
                                endif;
                                $toArray[] = @$recipientInfo->userInfo->first_name. ' ' . @$recipientInfo->userInfo->last_name;
                                $companyToArray[] = @Company::where('id',@$companyId->id)->first()->name;
                                $companyAddressToArray[] = @Company::where('id',@$companyId->id)->first()->address;
                            }


                            array_push($gridRow,implode("; ",$toArray));

                            //From Company
                            array_push($gridRow,$sendDocVal->company_name);
                            // To Company
                            array_push($gridRow,implode("; ",$companyToArray));

                            //Sender Address
                            array_push($gridRow,$sendDocVal->company_address);

                            //Recipient Address
                            array_push($gridRow,implode("; ",$companyAddressToArray));
                            //Sender Abn
                            array_push($gridRow,$sendDocVal->abn);

                            foreach($docketFieldOrder as $docketFieldData){
                                if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
                                    $valueData = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value;
                                    if($valueData){
                                        array_push($gridRow, @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
                                    }else{
                                        array_push($gridRow, "");
                                    }
                                }elseif($docketFieldData->docket_field_category_id == 20){
                                    $sentDocketManualTimer = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimer;
                                    if($sentDocketManualTimer){
                                        foreach ($sentDocketManualTimer as $sentDocketManualTimers){
                                            if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
                                                array_push($gridRow, Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A'));
                                            }else{
                                                array_push($gridRow, $sentDocketManualTimers->value);

                                            }

                                        }
                                    }else{
                                        foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
                                            array_push($gridRow, "");
                                        }
                                    }

                                    $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
                                    if($sentDocketManualTimerBreak){
                                        foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                            array_push($gridRow, $sentDocketManualTimerBreaks->value);
                                        }
                                    }else{
                                        foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
                                            array_push($gridRow,"");
                                        }
                                    }

                                    $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
                                    if($sentDocketManualTimerBreak){
                                        foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                            if($sentDocketManualTimerBreaks->reason != "n/a"){
                                                array_push($gridRow, $sentDocketManualTimerBreaks->reason);
                                            }else{
                                                array_push($gridRow, " ");
                                            }
                                        }
                                    }else{
                                        array_push($gridRow, " ");
                                    }


                                    if($docketFieldData->time_format == "Hours&Minutes"){
                                        array_push($gridRow, @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
                                    }else{
                                        if(@$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value != null || @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value != "N/a"){
                                            $decimal = str_replace("Total: ","", @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
                                            $hours = explode(" ",$decimal)[0];
                                            $minutes = explode(" ",$decimal)[2] * (1/60);
                                            array_push($gridRow, $hours+$minutes);
                                        }else{
                                            array_push($gridRow, "");
                                        }

                                    }

                                }elseif($docketFieldData->docket_field_category_id == 18){
                                    array_push($gridRow, $docketFieldData->label);
                                    foreach ( $docketFieldData->yesNoField as $yesNoField){
                                        if($yesNoField->explanation == 1){
                                            array_push($gridRow, $yesNoField->label);
                                            $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->SentDocValYesNoValueInfo;
                                            if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
                                                if(count($SentDocValYesNoValueInfo)!=0){
                                                    foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){
                                                        if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
                                                            $imageValue = unserialize($SentDocValYesNoValueInfos->value);
                                                            $toArray = array();
                                                            foreach ($imageValue as $imageValues) {
                                                                $toArray[] = AmazoneBucket::url() . $imageValues;
                                                            }

                                                            array_push($gridRow, implode(";",$toArray));
                                                        }else{
                                                            array_push($gridRow, $SentDocValYesNoValueInfos->value);
                                                        }
                                                    }
                                                }else{
                                                    foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                        if($yesNoDocketsField->docket_field_category_id == 5){
                                                            array_push($gridRow, "");
                                                        }else{
                                                            array_push($gridRow, "");
                                                        }
                                                    }
                                                }

                                            }else{
                                                foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                    if($yesNoDocketsField->docket_field_category_id == 5){
                                                        array_push($gridRow, "");
                                                    }else{
                                                        array_push($gridRow, "");
                                                    }
                                                }
                                            }

                                        }else{
                                            array_push($gridRow, "");
                                        }
                                    }



                                }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
                                    $docketImageValues = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
                                    $toArray = array();
                                    if($docketImageValues){
                                        foreach ($docketImageValues as $docketImageValue) {
                                            $toArray[] = AmazoneBucket::url() . $docketImageValue->value;
                                        }
                                        array_push($gridRow,  implode("; ",$toArray));
                                    }else{
                                        array_push($gridRow,  " ");
                                    }

                                }elseif($docketFieldData->docket_field_category_id == 7 ){
                                    $docketUnitRate = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
                                    if($docketUnitRate){
                                        foreach ($docketUnitRate as $sentDocketUnitRateValue){
                                            array_push($gridRow,  $sentDocketUnitRateValue->value);
                                        }
                                    }else{
                                        foreach ($docketFieldData->unitRate as $docketUnitRate){
                                            array_push($gridRow,  " ");
                                        }
                                    }

                                }elseif($docketFieldData->docket_field_category_id == 24){
                                    $DocketTallyable = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
                                    if($DocketTallyable){
                                        foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
                                            array_push($gridRow, $sentDocketTallyableUnitRateValue->value);
                                        }
                                    }else{
                                        foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
                                            array_push($gridRow,  " ");
                                        }
                                    }
                                }elseif($docketFieldData->docket_field_category_id == 8){
                                    $checkBoxValue = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first();
                                    if($checkBoxValue != null){
                                        if($checkBoxValue->value == 1){
                                            array_push($gridRow, "Yes");
                                        }else if($checkBoxValue->value == 0){
                                            array_push($gridRow, "No");
                                        }
                                    }else{
                                        array_push($gridRow, " ");
                                    }




                                }elseif($docketFieldData->docket_field_category_id == 22){
                                    foreach($docketFieldData->girdFields as $girdFields ){
                                        if($girdFields->docket_field_category_id == 20){
                                            array_push($gridRow, "");
                                            array_push($gridRow, "");
                                            array_push($gridRow, "");
                                            array_push($gridRow, "");
                                            array_push($gridRow, "");
                                        }elseif($girdFields->docket_field_category_id == 8){
                                            array_push($gridRow, "");
                                        }else{
                                            array_push($gridRow, " ");
                                        }

                                    }
                                }

                            }
                            $sentDocketValues['nongrid'][] = $gridRow;
                        }
                    }
                }

                //insert the header
                $csv->insertOne($sentDocketHeader);




                //insert all the record
                foreach($sentDocketValues as $key=>$sentDocketVal){
                    if($key === "nongrid"){
                        foreach($sentDocketVal as $nogridValue){
                            $csv->insertOne($nogridValue);
                        }
                    }else{

                        foreach($sentDocketVal as $data){
                            $csv->insertOne($data);
                        }
                    }

                }

                $csv->insertOne(array(""));
            }else{
                //  dd(ExportMapping::whereIn('docket_field_id',$docketFieldOrder->pluck('id')->toArray())->get());
                //header

                foreach($docketFieldOrder as $docketFieldOrders){
                    if($docketFieldOrders->exportMapping){

                        if($docketFieldOrders->is_show == 1){
                            if($docketFieldOrders->docket_field_category_id == 1 || $docketFieldOrders->docket_field_category_id == 2 || $docketFieldOrders->docket_field_category_id ==  3|| $docketFieldOrders->docket_field_category_id == 4 || $docketFieldOrders->docket_field_category_id == 6 || $docketFieldOrders->docket_field_category_id == 16 || $docketFieldOrders->docket_field_category_id == 12|| $docketFieldOrders->docket_field_category_id == 15 || $docketFieldOrders->docket_field_category_id == 26 || $docketFieldOrders->docket_field_category_id == 25 || $docketFieldOrders->docket_field_category_id == 13|| $docketFieldOrders->docket_field_category_id == 27){
                                array_push($sentDocketHeader, $docketFieldOrders->csv_header);
                            }elseif($docketFieldOrders->docket_field_category_id == 30){
                                if( $docketFieldOrders->docketConstantField->is_show == 1) {
                                    if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 1){
                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 2){
                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 3){
                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 4){
                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 5){
                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 6){
                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 7){
                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 8){
                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 9){
                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 10){
                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
                                    }else if($docketFieldOrders->docketConstantField->export_mapping_field_category_id == 11){
                                        array_push($sentDocketHeader, $docketFieldOrders->docketConstantField->csv_header);
                                    }


                                }

                            }elseif($docketFieldOrders->docket_field_category_id == 20){
                                foreach ($docketFieldOrders->docketManualTimer as $docketManualTimers){
                                    if( $docketManualTimers->is_show == 1){
                                        array_push($sentDocketHeader, $docketManualTimers->csv_header);
                                    }
                                }
                                foreach ($docketFieldOrders->docketManualTimerBreak as $docketManualTimerBreaks){
                                    if( $docketManualTimerBreaks->is_show == 1){
                                        array_push($sentDocketHeader, $docketManualTimerBreaks->csv_header);
                                    }
                                }

                                foreach ( unserialize($docketFieldOrders->exportMapping->value) as $explaination){
                                    if($explaination['label'] == "Explanation"){
                                        if ($explaination['isShow'] == 1){
                                            array_push($sentDocketHeader, $explaination['csvHeader']);
                                        }
                                    }
                                }

                                foreach ( unserialize($docketFieldOrders->exportMapping->value) as $totalHrs){
                                    if ($totalHrs['label'] == "Total Hours"){
                                        if ($explaination['isShow'] == 1){
                                            array_push($sentDocketHeader, $totalHrs['csvHeader']);
                                        }
                                    }
                                }
                            }elseif($docketFieldOrders->docket_field_category_id == 18){
                                array_push($sentDocketHeader, $docketFieldOrders->csv_header);
                                foreach ( $docketFieldOrders->yesNoField as $yesNoField){
                                    if ($yesNoField->is_show == 1){
                                        if($yesNoField->explanation == 1){
                                            array_push($sentDocketHeader, $yesNoField->csv_header);
                                            foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                if($yesNoDocketsField->is_show  == 1){
                                                    if($yesNoDocketsField->docket_field_category_id == 5){
                                                        array_push($sentDocketHeader, $yesNoField->csv_header.": ".$yesNoDocketsField->csv_header);
                                                    }else{
                                                        array_push($sentDocketHeader, $yesNoField->csv_header.": ".$yesNoDocketsField->csv_header);
                                                    }
                                                }
                                            }
                                        }else{
                                            array_push($sentDocketHeader, $yesNoField->csv_header);
                                        }
                                    }
                                }


                            }elseif($docketFieldOrders->docket_field_category_id == 5 || $docketFieldOrders->docket_field_category_id == 9 || $docketFieldOrders->docket_field_category_id == 14 ){
                                array_push($sentDocketHeader, $docketFieldOrders->csv_header);
                            }elseif($docketFieldOrders->docket_field_category_id == 7){
                                foreach ($docketFieldOrders->unitRate as $docketUnitRate){
                                    if($docketUnitRate->is_show == 1){
                                        array_push($sentDocketHeader, $docketUnitRate->csv_header);
                                    }
                                }
                            }elseif($docketFieldOrders->docket_field_category_id == 24){
                                foreach ($docketFieldOrders->tallyUnitRate as $docketTallyableUnitRate){
                                    if($docketTallyableUnitRate->is_show == 1){
                                        array_push($sentDocketHeader, $docketTallyableUnitRate->csv_header);
                                    }
                                }
                            }elseif($docketFieldOrders->docket_field_category_id == 8){
                                array_push($sentDocketHeader,$docketFieldOrders->csv_header);
                            }elseif($docketFieldOrders->docket_field_category_id == 22){
                                foreach($docketFieldOrders->girdFields as $girdFields ){
                                    if($girdFields->is_show == 1) {
                                        if($girdFields->docket_field_category_id == 20){
                                            foreach ( unserialize($girdFields->export_value) as $exportValue){
                                                if ($exportValue['isShow'] == 1) {
                                                    array_push($sentDocketHeader, $exportValue['csvHeader']);
                                                }
                                            }
                                        }elseif($girdFields->docket_field_category_id == 8){
                                            array_push($sentDocketHeader, $girdFields->label);
                                        }else{
                                            array_push($sentDocketHeader, $girdFields->csv_header);
                                        }
                                    }
                                }

                            }
                        }
                    }
                }


                //value
                $allGridValue = array();

                foreach($docketGroupDatas as $singleData){
                    $checkGridValue = $this->checkGridValue( $singleData);
                    $gridRow = array();
                    if($singleData['isEmail'] == true){
                        $sendDocVal = @EmailSentDocket::where('docket_id',$singleData['docketId'])->where('id',$singleData['sendDocketId'])->get()->first();
                        if(count($checkGridValue) != 0){
                            $maxValue = max($checkGridValue);
                            for ($i = 0; $i <= $maxValue; $i++) {
                                foreach($docketFieldOrder as $docketFieldData){
                                    if(@$docketFieldData->exportMapping){
                                        if($docketFieldData->is_show == 1){
                                            if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
                                                $valueData = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value;
                                                if($valueData){
                                                    $gridRow[$i][] = $valueData;
                                                }else{
                                                    $gridRow[$i][] = "";

                                                }
                                            }elseif($docketFieldData->docket_field_category_id == 30 ){
                                                if( $docketFieldData->docketConstantField->is_show == 1) {
                                                    if($docketFieldData->docketConstantField->export_mapping_field_category_id == 1){
                                                        $gridRow[$i][]  =$sendDocVal->formatted_id;
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 2){
                                                        $recipientInfos = $sendDocVal->recipientInfo;
                                                        $toArray = array();
                                                        foreach ($recipientInfos as $recipientInfo) {
                                                            $toArray[] = @$recipientInfo->emailUserInfo->email;
                                                        }
                                                        $gridRow[$i][] = implode("; ",$toArray);
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 3){
                                                        $gridRow[$i][] = $sendDocVal->senderUserInfo->first_name . ' ' . $sendDocVal->senderUserInfo->last_name;
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 4){
                                                        $gridRow[$i][] = $newline;
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 5){
                                                        $gridRow[$i][] = $sendDocVal->docketInfo->title;
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 6){
                                                        $gridRow[$i][] = $sendDocVal->senderCompanyInfo->abn;
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 7){
                                                        $gridRow[$i][] = " ";
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 8){
                                                        $gridRow[$i][] = $sendDocVal->senderCompanyInfo->name;
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 9){
                                                        $recipientInfos = $sendDocVal->recipientInfo;
                                                        $companyToArray =  array();
                                                        foreach ($recipientInfos as $recipientInfo) {
                                                            $companyToArray[] = $recipientInfo->receiver_company_name;
                                                        }
                                                        $gridRow[$i][] = implode("; ",$companyToArray);
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 10){
                                                        $gridRow[$i][] = $i+1;
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 11){
                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $docketConstantValue){
                                                            if ($docketConstantValue['isShow'] == 1){
                                                                $gridRow[$i][] =$docketConstantValue['csvHeader'];
                                                            }
                                                        }
                                                    }
                                                }

                                            }elseif($docketFieldData->docket_field_category_id == 20){

                                                $sentDocketManualTimer = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimer;
                                                if($sentDocketManualTimer){
                                                    foreach ($sentDocketManualTimer as $sentDocketManualTimers){
                                                        if( $sentDocketManualTimers->docketManualTimer->is_show == 1){
                                                            if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
                                                                $gridRow[$i][] =  Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A');

                                                            }else{
                                                                $gridRow[$i][] =  $sentDocketManualTimers->value;

                                                            }

                                                        }
                                                    }
                                                }else{
                                                    foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
                                                        if( $docketManualTimers->is_show == 1){
                                                            $gridRow[$i][] = " ";
                                                        }
                                                    }
                                                }

                                                $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
                                                if($sentDocketManualTimerBreak){
                                                    foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                                        if( $sentDocketManualTimerBreaks->docketManualTimerBreak->is_show == 1){
                                                            $gridRow[$i][] = $sentDocketManualTimerBreaks->value;
                                                        }
                                                    }
                                                }else{
                                                    foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
                                                        if( $docketManualTimerBreaks->is_show == 1){
                                                            $gridRow[$i][] = "";
                                                        }
                                                    }
                                                }

                                                $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
                                                if($sentDocketManualTimerBreak){
                                                    foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
                                                            if($explaination['label'] == "Explanation"){
                                                                if ($explaination['isShow'] == 1){
                                                                    $gridRow[$i][] = $sentDocketManualTimerBreaks->reason;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }else{
                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
                                                        if($explaination['label'] == "Explanation"){
                                                            if ($explaination['isShow'] == 1){
                                                                $gridRow[$i][] = "";
                                                            }
                                                        }
                                                    }
                                                }

                                                foreach ( unserialize($docketFieldData->exportMapping->value) as $totalHrs){
                                                    if ($totalHrs['label'] == "Total Hours"){
                                                        if ($explaination['isShow'] == 1){
                                                            if($docketFieldData->time_format == "Hours&Minutes"){
                                                                $gridRow[$i][] = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value;
                                                            }else{
                                                                if(@$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value != null || @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value != "N/a"){
                                                                    $decimal = str_replace("Total: ","", @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value);
                                                                    $hours = explode(" ",$decimal)[0];
                                                                    $minutes = explode(" ",$decimal)[2] * (1/60);
                                                                    $gridRow[$i][] = $hours+$minutes;
                                                                }else{
                                                                    $gridRow[$i][] = "";
                                                                }

                                                            }
                                                        }
                                                    }
                                                }

                                            }elseif($docketFieldData->docket_field_category_id == 18){
                                                $gridRow[$i][] = $docketFieldData->label;
                                                foreach ( $docketFieldData->yesNoField as $yesNoField){
                                                    if ($yesNoField->is_show == 1){
                                                        if($yesNoField->explanation == 1){
                                                            $gridRow[$i][] = $yesNoField->label;
                                                            $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->SentEmailDocValYesNoValueInfo;
                                                            if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
                                                                if(count($SentDocValYesNoValueInfo)!=0){
                                                                    foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){

                                                                        if($SentDocValYesNoValueInfos->YesNoDocketsField->is_show  == 1){
                                                                            if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
                                                                                $imageValue = unserialize($SentDocValYesNoValueInfos->value);
                                                                                $toArray = array();
                                                                                foreach ($imageValue as $imageValues) {
                                                                                    $toArray[] = AmazoneBucket::url() . $imageValues;
                                                                                }
                                                                                $gridRow[$i][] = implode(";",$toArray);
                                                                            }else{

                                                                                $gridRow[$i][] = $SentDocValYesNoValueInfos->value;
                                                                            }
                                                                        }
                                                                    }
                                                                }else{
                                                                    foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                                        if($yesNoDocketsField->is_show  == 1){
                                                                            if($yesNoDocketsField->docket_field_category_id == 5){
                                                                                $gridRow[$i][] = "";
                                                                            }else{
                                                                                $gridRow[$i][] = "";
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }else{

                                                                foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                                    if($yesNoDocketsField->is_show  == 1){
                                                                        if($yesNoDocketsField->docket_field_category_id == 5){
                                                                            $gridRow[$i][] = "";
                                                                        }else{
                                                                            $gridRow[$i][] = "";
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }else{
                                                            $gridRow[$i][] = "";
                                                        }
                                                    }
                                                }

                                            }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
                                                $docketImageValues = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
                                                $toArray = array();
                                                if($docketImageValues){
                                                    foreach ($docketImageValues as $docketImageValue) {
                                                        $toArray[] = AmazoneBucket::url() . $docketImageValue->value;
                                                    }
                                                    $gridRow[$i][]  =  implode("; ",$toArray);
                                                }else{
                                                    $gridRow[$i][]  = "";
                                                }
                                            }elseif($docketFieldData->docket_field_category_id == 7 ){

                                                $docketUnitRate = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
                                                if($docketUnitRate){

                                                    foreach ($docketUnitRate as $sentDocketUnitRateValue){

                                                        $gridRow[$i][] =   $sentDocketUnitRateValue->value;
                                                    }

                                                }else{
                                                    foreach ($docketFieldData->unitRate as $docketUnitRate){
                                                        $gridRow[$i][] =  " ";
                                                    }
                                                }
                                            }elseif($docketFieldData->docket_field_category_id == 24){
                                                $DocketTallyable = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
                                                if($DocketTallyable){
                                                    foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
                                                        $gridRow[$i][] = $sentDocketTallyableUnitRateValue->value;
                                                    }
                                                }else{
                                                    foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
                                                        $gridRow[$i][]=  " ";
                                                    }
                                                }
                                            }elseif($docketFieldData->docket_field_category_id == 8){
                                                $checkBoxValue = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first();
                                                if($checkBoxValue != null){
                                                    if($checkBoxValue->value == 1){
                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
                                                            if ($checkBox['isShow'] == 1) {
                                                                if ($checkBox["label"] == "Checked") {
                                                                    $gridRow[$i][] = $checkBox['csvHeader'];
                                                                }
                                                            }else{
                                                                $gridRow[$i][] = "";
                                                            }
                                                        }
                                                    }else if($checkBoxValue->value == 0){
                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
                                                            if ($checkBox['isShow'] == 1) {
                                                                if ($checkBox["label"] == "Unchecked") {
                                                                    $gridRow[$i][] = $checkBox['csvHeader'];
                                                                }
                                                            }else{
                                                                $gridRow[$i][] = "";
                                                            }
                                                        }
                                                    }
                                                }else{

                                                    // foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
                                                    //     if ($checkBox['isShow'] == 1) {
                                                    $gridRow[$i][] = " ";
                                                    //     }
                                                    // }
                                                }
                                            }elseif($docketFieldData->docket_field_category_id == 22){
                                                foreach($docketFieldData->girdFields as $girdField){
                                                    $DocFieldGridVal = DocketFieldGridValue::where('docket_id',$sendDocVal->id)->where('docket_field_grid_id',$girdField->id)->where('index',$i)->get()->first();

                                                    if($girdField->docket_field_category_id == 20){

                                                        $sendGridManualTimerValue = json_decode(@$DocFieldGridVal->value, true);
                                                        foreach(unserialize($girdField->export_value) as $exportValue){

                                                            if($DocFieldGridVal){

                                                                if ($exportValue['isShow'] == 1) {

                                                                    if($exportValue['label'] == "From"){
                                                                        if($sendGridManualTimerValue['from'] != 0 && $sendGridManualTimerValue['from'] != 'n/a'  && $sendGridManualTimerValue['from'] != 'N/a' && $sendGridManualTimerValue['from']!= null){
                                                                            $gridRow[$i][] = Carbon::parse($sendGridManualTimerValue['from'])->format('d-M.-Y g:i A');
                                                                        }else{
                                                                            $gridRow[$i][] = $sendGridManualTimerValue['from'];

                                                                        }

                                                                    }else if($exportValue['label'] == "To"){
                                                                        if($sendGridManualTimerValue['to'] != 0 && $sendGridManualTimerValue['to'] != 'n/a'  && $sendGridManualTimerValue['to'] != 'N/a' && $sendGridManualTimerValue['to']!= null){
                                                                            $gridRow[$i][] =  Carbon::parse($sendGridManualTimerValue['to'])->format('d-M.-Y g:i A');
                                                                        }else{
                                                                            $gridRow[$i][] = $sendGridManualTimerValue['to'];

                                                                        }
                                                                    }else if($exportValue['label'] == "Total Break"){
                                                                        if($sendGridManualTimerValue['breakDuration'] != 0){

                                                                            $gridRow[$i][] = $this->convertHrsMin($sendGridManualTimerValue['breakDuration']) ;
                                                                        }else{
                                                                            $gridRow[$i][] = "0 Hour 0 Minute" ;
                                                                        }

                                                                    }else if($exportValue['label'] == "Explanation"){
                                                                        if($sendGridManualTimerValue['explanation'] != ""){
                                                                            $gridRow[$i][] = $sendGridManualTimerValue['explanation'] ;
                                                                        }else{
                                                                            $gridRow[$i][] = "N/a" ;
                                                                        }
                                                                    }else if($exportValue['label'] == "Total Hours"){
                                                                        if($sendGridManualTimerValue['totalDuration'] != 0){
                                                                            if($girdField->time_format == "Hours&Minutes"){
                                                                                $gridRow[$i][] =  $this->convertHrsMin($sendGridManualTimerValue['totalDuration']) ;
                                                                            }else{
                                                                                $decimal = $this->convertHrsMin($sendGridManualTimerValue['totalDuration']);
                                                                                $hours = explode(" ",$decimal)[0];
                                                                                $minutes = explode(" ",$decimal)[2] * (1/60);
                                                                                $gridRow[$i][] = $hours+$minutes;
                                                                            }
                                                                        }else{
                                                                            $gridRow[$i][] = "0 Hour 0 Minute" ;
                                                                        }

                                                                    }
                                                                }
                                                            }else{
                                                                $gridRow[$i][] =  " ";
                                                            }
                                                        }


                                                    }else if($girdField->docket_field_category_id == 8){
                                                        if($girdField->export_value){
                                                            foreach(unserialize($girdField->export_value) as $exportValue){
                                                                if($DocFieldGridVal){
                                                                    if(@$DocFieldGridVal->value == 1){
                                                                        if ($exportValue['isShow'] == 1) {
                                                                            if ($exportValue["label"] == "Checked") {
                                                                                $gridRow[$i][] =  $exportValue["csvHeader"];
                                                                            }
                                                                        }else{
                                                                            $gridRow[$i][] =  "";
                                                                        }
                                                                    }else{
                                                                        if ($exportValue['isShow'] == 1) {
                                                                            if ($exportValue["label"] == "Unchecked") {
                                                                                $gridRow[$i][] =  $exportValue["csvHeader"];
                                                                            }
                                                                        }else{
                                                                            $gridRow[$i][] =  "";
                                                                        }
                                                                    }
                                                                }else{
                                                                    $gridRow[$i][] =  " ";
                                                                }

                                                            }
                                                        }else{
                                                            $gridRow[$i][] =  " ";
                                                        }

                                                    }

                                                    else if( $girdField->docket_field_category_id == 9){

                                                        $imageValue =  @$DocFieldGridVal->value;
                                                        if($girdField->is_show == 1){
                                                            $toArray = array();
                                                            if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
                                                                $gridRow[$i][] =  "";
                                                            }else{
                                                                foreach(unserialize($imageValue) as $exportValue){
                                                                    $toArray[] = AmazoneBucket::url() . $exportValue["image"];
                                                                }
                                                                $gridRow[$i][] =  implode("; ",$toArray);
                                                            }
                                                        }


                                                    }else if($girdField->docket_field_category_id == 5  || $girdField->docket_field_category_id == 14 ){
                                                        $imageValue =  @$DocFieldGridVal->value;
                                                        if($girdField->is_show == 1){
                                                            $toArray = array();
                                                            if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
                                                                $gridRow[$i][] =  "";
                                                            }else{

                                                                foreach(unserialize($imageValue) as $exportValue){
                                                                    $toArray[] = AmazoneBucket::url() . $exportValue;
                                                                }
                                                                $gridRow[$i][] =  implode("; ",$toArray);

                                                            }
                                                        }

                                                    }else{
                                                        if($girdField->is_show == 1){
                                                            $gridRow[$i][] =  @$DocFieldGridVal->value;
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            $sentDocketValues[] = $gridRow;
                        }else{
                            foreach($docketFieldOrder as $docketFieldData){
                                if(@$docketFieldData->exportMapping){
                                    if($docketFieldData->is_show == 1){
                                        if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
                                            $valueData = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value;
                                            if($valueData){
                                                array_push($gridRow, $valueData);
                                            }else{
                                                array_push($gridRow, "");

                                            }
                                        }elseif($docketFieldData->docket_field_category_id == 30 ){
                                            if( $docketFieldData->docketConstantField->is_show == 1) {
                                                if($docketFieldData->docketConstantField->export_mapping_field_category_id == 1){
                                                    array_push($gridRow, $sendDocVal->formatted_id);
                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 2){

                                                    $recipientInfos = $sendDocVal->recipientInfo;
                                                    $toArray = array();
                                                    foreach ($recipientInfos as $recipientInfo) {
                                                        $toArray[] = @$recipientInfo->emailUserInfo->email;
                                                    }
                                                    array_push($gridRow,  implode("; ",$toArray));

                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 3){
                                                    array_push($gridRow, $sendDocVal->senderUserInfo->first_name . ' ' . $sendDocVal->senderUserInfo->last_name);
                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 4){
                                                    array_push($gridRow, $newline);

                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 5){
                                                    array_push($gridRow, $sendDocVal->docketInfo->title);
                                                }
                                                else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 6){
                                                    array_push($gridRow, $sendDocVal->senderCompanyInfo->ab);
                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 7){
                                                    array_push($gridRow, "");
                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 8){
                                                    array_push($gridRow, $sendDocVal->senderCompanyInfo->name);
                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 9){
                                                    $recipientInfos = $sendDocVal->recipientInfo;
                                                    $companyToArray =  array();
                                                    foreach ($recipientInfos as $recipientInfo) {
                                                        $companyToArray[] = $recipientInfo->receiver_company_name;
                                                    }
                                                    array_push($gridRow, implode("; ",$companyToArray));
                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 10){

                                                    array_push($gridRow, 1);

                                                }elseif($docketFieldData->docketConstantField->export_mapping_field_category_id == 11){
                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $docketConstantValue){
                                                        if ($docketConstantValue['isShow'] == 1){
                                                            array_push($gridRow, $docketConstantValue['csvHeader']);
                                                        }
                                                    }
                                                }
                                            }

                                        }elseif($docketFieldData->docket_field_category_id == 20){
                                            $sentDocketManualTimer = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimer;
                                            if($sentDocketManualTimer){
                                                foreach ($sentDocketManualTimer as $sentDocketManualTimers){
                                                    if( $sentDocketManualTimers->docketManualTimer->is_show == 1){
                                                        if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
                                                            array_push($gridRow, Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A'));
                                                        }else{
                                                            array_push($gridRow,  $sentDocketManualTimers->value);
                                                        }

                                                    }
                                                }
                                            }else{
                                                foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
                                                    if( $docketManualTimers->is_show == 1){
                                                        array_push($gridRow, "");
                                                    }
                                                }
                                            }

                                            $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
                                            if($sentDocketManualTimerBreak){
                                                foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                                    if( $sentDocketManualTimerBreaks->docketManualTimerBreak->is_show == 1){
                                                        array_push($gridRow, $sentDocketManualTimerBreaks->value);
                                                    }
                                                }
                                            }else{
                                                foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
                                                    if( $docketManualTimerBreaks->is_show == 1){
                                                        array_push($gridRow,"");
                                                    }
                                                }
                                            }
                                            $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->emailSentDocManualTimerBrk;
                                            if($sentDocketManualTimerBreak){
                                                foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
                                                        if($explaination['label'] == "Explanation"){
                                                            if ($explaination['isShow'] == 1){
                                                                array_push($gridRow, $sentDocketManualTimerBreaks->reason);
                                                            }
                                                        }
                                                    }
                                                }
                                            }else{
                                                foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
                                                    if($explaination['label'] == "Explanation"){
                                                        if ($explaination['isShow'] == 1){
                                                            array_push($gridRow, " ");
                                                        }
                                                    }
                                                }
                                            }

                                            foreach ( unserialize($docketFieldData->exportMapping->value) as $totalHrs){
                                                if ($totalHrs['label'] == "Total Hours"){
                                                    if ($explaination['isShow'] == 1){
                                                        if($docketFieldData->time_format == "Hours&Minutes"){
                                                            array_push($gridRow, @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value);
                                                        }else{
                                                            if(@$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value!= null || @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value != "N/a"){
                                                                $decimal = str_replace("Total: ","", @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->value);
                                                                $hours = explode(" ",$decimal)[0];
                                                                $minutes = explode(" ",$decimal)[2] * (1/60);
                                                                array_push($gridRow, $hours+$minutes);
                                                            }else{
                                                                array_push($gridRow, "");

                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                        }elseif($docketFieldData->docket_field_category_id == 18){
                                            array_push($gridRow, $docketFieldData->label);
                                            foreach ( $docketFieldData->yesNoField as $yesNoField){
                                                if ($yesNoField->is_show == 1){
                                                    if($yesNoField->explanation == 1){
                                                        array_push($gridRow, $yesNoField->label);
                                                        $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->SentEmailDocValYesNoValueInfo;
                                                        if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
                                                            if(count($SentDocValYesNoValueInfo)!=0){
                                                                foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){
                                                                    if($SentDocValYesNoValueInfos->YesNoDocketsField->is_show  == 1){
                                                                        if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
                                                                            $imageValue = unserialize($SentDocValYesNoValueInfos->value);

                                                                            $toArray = array();
                                                                            foreach ($imageValue as $imageValues) {
                                                                                $toArray[] = AmazoneBucket::url() . $imageValues;
                                                                            }

                                                                            array_push($gridRow, implode(";",$toArray));
                                                                        }else{
                                                                            array_push($gridRow, $SentDocValYesNoValueInfos->value);
                                                                        }
                                                                    }
                                                                }
                                                            }else{
                                                                foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                                    if($yesNoDocketsField->is_show  == 1){
                                                                        if($yesNoDocketsField->docket_field_category_id == 5){
                                                                            array_push($gridRow, "");
                                                                        }else{
                                                                            array_push($gridRow, "");
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }else{

                                                            foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                                if($yesNoDocketsField->is_show  == 1){
                                                                    if($yesNoDocketsField->docket_field_category_id == 5){
                                                                        array_push($gridRow, "");
                                                                    }else{
                                                                        array_push($gridRow, "");
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }else{
                                                        array_push($gridRow, "");
                                                    }
                                                }
                                            }



                                        }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
                                            $docketImageValues = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
                                            $toArray = array();
                                            if($docketImageValues){
                                                foreach ($docketImageValues as $docketImageValue) {
                                                    $toArray[] = AmazoneBucket::url() . $docketImageValue->value;
                                                }
                                                array_push($gridRow,  implode("; ",$toArray));
                                            }else{
                                                array_push($gridRow,  " ");
                                            }

                                        }elseif($docketFieldData->docket_field_category_id == 7 ){
                                            $docketUnitRate = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
                                            if($docketUnitRate){
                                                foreach ($docketUnitRate as $sentDocketUnitRateValue){
                                                    if($sentDocketUnitRateValue->docketUnitRateInfo->is_show == 1){
                                                        array_push($gridRow,  $sentDocketUnitRateValue->value);
                                                    }
                                                }
                                            }else{
                                                foreach ($docketFieldData->unitRate as $docketUnitRate){
                                                    if($docketUnitRate->is_show== 1){
                                                        array_push($gridRow,  " ");
                                                    }
                                                }
                                            }

                                        }elseif($docketFieldData->docket_field_category_id == 24){
                                            $DocketTallyable = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
                                            if($DocketTallyable){
                                                foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
                                                    if($sentDocketTallyableUnitRateValue->docketUnitRateInfo->is_show == 1){
                                                        array_push($gridRow, $sentDocketTallyableUnitRateValue->value);
                                                    }
                                                }
                                            }else{
                                                foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
                                                    if($docketUnitRate->is_show== 1){
                                                        array_push($gridRow,  " ");
                                                    }
                                                }
                                            }
                                        }elseif($docketFieldData->docket_field_category_id == 8){
                                            $checkBoxValue = @$docketFieldData->docketFieldValueByEmailSentDocketId($sendDocVal->id)->first();
                                            if($checkBoxValue != null){
                                                if($checkBoxValue->value == 1){
                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
                                                        if ($checkBox['isShow'] == 1) {
                                                            if ($checkBox["label"] == "Checked") {
                                                                array_push($gridRow, $checkBox["csvHeader"]);
                                                            }
                                                        }else{
                                                            array_push($gridRow, "");
                                                        }
                                                    }
                                                }else if($checkBoxValue->value == 0){
                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
                                                        if ($checkBox['isShow'] == 1) {
                                                            if ($checkBox["label"] == "Unchecked") {
                                                                // $gridRow[$i] =  "No";
                                                                array_push($gridRow, $checkBox["csvHeader"]);
                                                            }
                                                        }else{
                                                            array_push($gridRow, "");
                                                        }
                                                    }
                                                }
                                            }else{

                                                array_push($gridRow, " ");

                                            }




                                        }elseif($docketFieldData->docket_field_category_id == 22){
                                            foreach($docketFieldData->girdFields as $girdFields ){
                                                if($girdFields->is_show == 1) {
                                                    if($girdFields->docket_field_category_id == 20  ){
                                                        foreach ( unserialize($girdFields->export_value) as $exportValue){
                                                            if ($exportValue['isShow'] == 1) {
                                                                array_push($gridRow, " ");
                                                            }
                                                        }
                                                    }elseif($girdFields->docket_field_category_id == 8){
                                                        array_push($gridRow, " ");
                                                    }else{
                                                        array_push($gridRow, " ");
                                                    }
                                                }
                                            }



                                        }

                                    }
                                }

                            }
                            $sentDocketValues['nongrid'][] = $gridRow;
                        }
                    }
                    if($singleData['isEmail'] == false){
                        $sendDocVal = @SentDockets::where('docket_id',$singleData['docketId'])->where('id',$singleData['sendDocketId'])->get()->first();
                        if(count($checkGridValue) != 0){
                            $maxValue = max($checkGridValue);

                            for ($i = 0; $i <= $maxValue; $i++) {

                                foreach($docketFieldOrder as $docketFieldData){
                                    if(@$docketFieldData->exportMapping){
                                        if($docketFieldData->is_show == 1){
                                            if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
                                                $valueData = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value;
                                                if($valueData){

                                                    $gridRow[$i][] = $valueData;
                                                }else{
                                                    $gridRow[$i][] = "";
                                                }
                                            }elseif($docketFieldData->docket_field_category_id == 30 ){
                                                if( $docketFieldData->docketConstantField->is_show == 1) {
                                                    if($docketFieldData->docketConstantField->export_mapping_field_category_id == 1){
                                                        $gridRow[$i][]  =$sendDocVal->formatted_id;
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 2){
                                                        $recipientInfos = $sendDocVal->recipientInfo;
                                                        $toArray = array();
                                                        foreach ($recipientInfos as $recipientInfo) {
                                                            $toArray[] = @$recipientInfo->userInfo->first_name. ' ' . @$recipientInfo->userInfo->last_name;
                                                        }

                                                        $gridRow[$i][] = implode("; ",$toArray);
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 3){
                                                        $gridRow[$i][] = $sendDocVal->senderUserInfo->first_name . ' ' . $sendDocVal->senderUserInfo->last_name;
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 4){
                                                        $gridRow[$i][] = $newline;
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 5){
                                                        $gridRow[$i][] = $sendDocVal->docketInfo->title;
                                                    }

                                                    else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 6){
                                                        $gridRow[$i][] = $sendDocVal->abn ;
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 7){
                                                        $recipientInfos = $sendDocVal->recipientInfo;
                                                        $companyToArray =  array();
                                                        foreach ($recipientInfos as $recipientInfo) {
                                                            if(Employee::where('user_id', $recipientInfo->userInfo->id)->count()!=0):
                                                                $companyId = Employee::where('user_id', $recipientInfo->userInfo->id)->first()->company_id;
                                                            else :
                                                                $companyId   =   Company::where('user_id', @$recipientInfo->userInfo->id)->first();
                                                            endif;
                                                            $companyToArray[] = Company::where('id',@$companyId->id)->first()->abn;
                                                        }
                                                        $gridRow[$i][] = implode("; ",$companyToArray);

                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 8){
                                                        $gridRow[$i][] =  $sendDocVal->company_name;
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 9){
                                                        $recipientInfos = $sendDocVal->recipientInfo;
                                                        $companyToArray =  array();
                                                        foreach ($recipientInfos as $recipientInfo) {
                                                            if(Employee::where('user_id', $recipientInfo->userInfo->id)->count()!=0):
                                                                $companyId = Employee::where('user_id', $recipientInfo->userInfo->id)->first()->company_id;
                                                            else :
                                                                $companyId   =   Company::where('user_id', $recipientInfo->userInfo->id)->first()->id;
                                                            endif;
                                                            $companyToArray[] = Company::where('id',$companyId)->first()->name;
                                                        }
                                                        $gridRow[$i][] = implode("; ",$companyToArray);
                                                    }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 10){
                                                        $gridRow[$i][] = $i+1;
                                                    }elseif($docketFieldData->docketConstantField->export_mapping_field_category_id == 11){
                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $docketConstantValue){
                                                            if ($docketConstantValue['isShow'] == 1){

                                                                $gridRow[$i][] = $docketConstantValue['csvHeader'];
                                                            }
                                                        }
                                                    }
                                                }

                                            }elseif($docketFieldData->docket_field_category_id == 20){

                                                $sentDocketManualTimer = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimer;
                                                if($sentDocketManualTimer){
                                                    foreach ($sentDocketManualTimer as $sentDocketManualTimers){
                                                        if( $sentDocketManualTimers->docketManualTimer->is_show == 1){
                                                            if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
                                                                $gridRow[$i][] =  Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A');
                                                            }else{
                                                                $gridRow[$i][] =  $sentDocketManualTimers->value;
                                                            }

                                                        }
                                                    }
                                                }else{
                                                    foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
                                                        if( $docketManualTimers->is_show == 1){
                                                            $gridRow[$i][] = " ";
                                                        }
                                                    }
                                                }

                                                $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
                                                if($sentDocketManualTimerBreak){
                                                    foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                                        if( $sentDocketManualTimerBreaks->docketManualTimerBreak->is_show == 1){
                                                            $gridRow[$i][] = $sentDocketManualTimerBreaks->value;
                                                        }
                                                    }
                                                }else{
                                                    foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
                                                        if( $docketManualTimerBreaks->is_show == 1){
                                                            $gridRow[$i][] = "";
                                                        }
                                                    }
                                                }

                                                $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
                                                if($sentDocketManualTimerBreak){
                                                    foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
                                                            if($explaination['label'] == "Explanation"){
                                                                if ($explaination['isShow'] == 1){
                                                                    $gridRow[$i][] = $sentDocketManualTimerBreaks->reason;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }else{
                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
                                                        if($explaination['label'] == "Explanation"){
                                                            if ($explaination['isShow'] == 1){
                                                                $gridRow[$i][] = "";
                                                            }
                                                        }
                                                    }
                                                }

                                                foreach ( unserialize($docketFieldData->exportMapping->value) as $totalHrs){
                                                    if ($totalHrs['label'] == "Total Hours"){
                                                        if ($explaination['isShow'] == 1){
                                                            if($docketFieldData->time_format == "Hours&Minutes"){
                                                                $gridRow[$i][] = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value;
                                                            }else{
                                                                if(@$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value != null || @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value!="N/a"){
                                                                    $decimal = str_replace("Total: ","", @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
                                                                    $hours = explode(" ",$decimal)[0];
                                                                    $minutes = explode(" ",$decimal)[2] * (1/60);
                                                                    $gridRow[$i][] = $hours+$minutes;
                                                                }else{
                                                                    $gridRow[$i][] ="";
                                                                }

                                                            }
                                                        }
                                                    }
                                                }

                                            }elseif($docketFieldData->docket_field_category_id == 18){
                                                $gridRow[$i][] = $docketFieldData->label;
                                                foreach ( $docketFieldData->yesNoField as $yesNoField){
                                                    if ($yesNoField->is_show == 1){
                                                        if($yesNoField->explanation == 1){
                                                            $gridRow[$i][] = $yesNoField->label;
                                                            $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->SentDocValYesNoValueInfo;
                                                            if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
                                                                if(count($SentDocValYesNoValueInfo)!=0){
                                                                    foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){

                                                                        if($SentDocValYesNoValueInfos->YesNoDocketsField->is_show  == 1){
                                                                            if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
                                                                                $imageValue = unserialize($SentDocValYesNoValueInfos->value);

                                                                                $toArray = array();
                                                                                foreach ($imageValue as $imageValues) {
                                                                                    $toArray[] = AmazoneBucket::url() . $imageValues;
                                                                                }
                                                                                $gridRow[$i][] = implode(";",$toArray);

                                                                            }else{

                                                                                $gridRow[$i][] = $SentDocValYesNoValueInfos->value;
                                                                            }
                                                                        }
                                                                    }
                                                                }else{
                                                                    foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                                        if($yesNoDocketsField->is_show  == 1){
                                                                            if($yesNoDocketsField->docket_field_category_id == 5){
                                                                                $gridRow[$i][] = "";
                                                                            }else{
                                                                                $gridRow[$i][] = "";
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }else{

                                                                foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                                    if($yesNoDocketsField->is_show  == 1){
                                                                        if($yesNoDocketsField->docket_field_category_id == 5){
                                                                            $gridRow[$i][] = "";
                                                                        }else{
                                                                            $gridRow[$i][] = "";
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }else{
                                                            $gridRow[$i][] = "";
                                                        }
                                                    }
                                                }

                                            }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
                                                $docketImageValues = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
                                                $toArray = array();
                                                if($docketImageValues){
                                                    foreach ($docketImageValues as $docketImageValue) {
                                                        $toArray[] = AmazoneBucket::url() . $docketImageValue->value;
                                                    }
                                                    $gridRow[$i][]  =  implode("; ",$toArray);
                                                }else{
                                                    $gridRow[$i][]  = "";
                                                }
                                            }elseif($docketFieldData->docket_field_category_id == 7 ){

                                                $docketUnitRate = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
                                                if($docketUnitRate){
                                                    foreach ($docketUnitRate as $sentDocketUnitRateValue){
                                                        if($sentDocketUnitRateValue->docketUnitRateInfo->is_show == 1){
                                                            $gridRow[$i][] =   $sentDocketUnitRateValue->value;
                                                        }
                                                    }
                                                }else{
                                                    foreach ($docketFieldData->unitRate as $docketUnitRate){
                                                        if($docketUnitRate->is_show== 1){
                                                            $gridRow[$i][] =  " ";
                                                        }
                                                    }
                                                }
                                            }elseif($docketFieldData->docket_field_category_id == 24){
                                                $DocketTallyable = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
                                                if($DocketTallyable){
                                                    foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
                                                        if($sentDocketTallyableUnitRateValue->docketUnitRateInfo->is_show == 1){
                                                            $gridRow[$i][] = $sentDocketTallyableUnitRateValue->value;
                                                        }
                                                    }
                                                }else{
                                                    foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
                                                        if($docketUnitRate->is_show== 1){
                                                            $gridRow[$i][]=  " ";
                                                        }
                                                    }
                                                }
                                            }elseif($docketFieldData->docket_field_category_id == 8){
                                                $checkBoxValue = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first();
                                                if($checkBoxValue != null){
                                                    if($checkBoxValue->value == 1){
                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
                                                            if ($checkBox['isShow'] == 1) {
                                                                if ($checkBox["label"] == "Checked") {
                                                                    $gridRow[$i][] =$checkBox["csvHeader"];
                                                                }
                                                            }else{
                                                                $gridRow[$i][]  = "";
                                                            }
                                                        }
                                                    }else if($checkBoxValue->value == 0){
                                                        foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
                                                            if ($checkBox['isShow'] == 1) {
                                                                if ($checkBox["label"] == "Unchecked") {
                                                                    $gridRow[$i][] = $checkBox["csvHeader"];
                                                                }
                                                            }else{
                                                                $gridRow[$i][]  = "";
                                                            }
                                                        }
                                                    }
                                                }else{

                                                    $gridRow[$i][] = " ";

                                                }
                                            }elseif($docketFieldData->docket_field_category_id == 22){
                                                foreach($docketFieldData->girdFields as $girdField){
                                                    $DocFieldGridVal = DocketFieldGridValue::where('docket_id',$sendDocVal->id)->where('docket_field_grid_id',$girdField->id)->where('index',$i)->get()->first();
                                                    if($girdField->docket_field_category_id == 20){
                                                        $sendGridManualTimerValue = json_decode(@$DocFieldGridVal->value, true);
                                                        foreach(unserialize($girdField->export_value) as $exportValue){

                                                            if($DocFieldGridVal){

                                                                if ($exportValue['isShow'] == 1) {
                                                                    if($exportValue['label'] == "From"){
                                                                        if($sendGridManualTimerValue['from'] != 0 && $sendGridManualTimerValue['from'] != 'n/a'  && $sendGridManualTimerValue['from'] != 'N/a' && $sendGridManualTimerValue['from']!= null){
                                                                            $gridRow[$i][] = Carbon::parse($sendGridManualTimerValue['from'])->format('d-M.-Y g:i A');
                                                                        }else{
                                                                            $gridRow[$i][] = $sendGridManualTimerValue['from'];
                                                                        }

                                                                    }else if($exportValue['label'] == "To"){
                                                                        if($sendGridManualTimerValue['to'] != 0 && $sendGridManualTimerValue['to'] != 'n/a'  && $sendGridManualTimerValue['to'] != 'N/a' && $sendGridManualTimerValue['to']!= null){
                                                                            $gridRow[$i][] =  Carbon::parse($sendGridManualTimerValue['to'])->format('d-M.-Y g:i A') ;
                                                                        }else{
                                                                            $gridRow[$i][] =  $sendGridManualTimerValue['to'];
                                                                        }
                                                                    }else if($exportValue['label'] == "Total Break"){
                                                                        if($sendGridManualTimerValue['breakDuration'] != 0){
                                                                            $gridRow[$i][] = $this->convertHrsMin($sendGridManualTimerValue['breakDuration']) ;

                                                                        }else{
                                                                            $gridRow[$i][] = "0 Hour 0 Minute" ;
                                                                        }

                                                                    }else if($exportValue['label'] == "Explanation"){
                                                                        if($sendGridManualTimerValue['explanation'] != ""){
                                                                            $gridRow[$i][] = $sendGridManualTimerValue['explanation'] ;
                                                                        }else{
                                                                            $gridRow[$i][] = "N/a" ;
                                                                        }
                                                                    }else if($exportValue['label'] == "Total Hours"){
                                                                        if($sendGridManualTimerValue['totalDuration'] != 0){
                                                                            if($girdField->time_format == "Hours&Minutes"){
                                                                                $gridRow[$i][] =  $this->convertHrsMin($sendGridManualTimerValue['totalDuration']) ;
                                                                            }else{
                                                                                $decimal = $this->convertHrsMin($sendGridManualTimerValue['totalDuration']) ;
                                                                                $hours = explode(" ",$decimal)[0];
                                                                                $minutes = explode(" ",$decimal)[2] * (1/60);
                                                                                $gridRow[$i][] = $hours+$minutes;
                                                                            }
                                                                        }else{
                                                                            $gridRow[$i][] = "0 Hour 0 Minute" ;
                                                                        }

                                                                    }
                                                                }
                                                            }else{
                                                                $gridRow[$i][] =  " ";
                                                            }
                                                        }


                                                    }else if($girdField->docket_field_category_id == 8){
                                                        if($girdField->export_value){
                                                            foreach(unserialize($girdField->export_value) as $exportValue){
                                                                if($DocFieldGridVal){
                                                                    if(@$DocFieldGridVal->value == 1){
                                                                        if ($exportValue['isShow'] == 1) {
                                                                            if ($exportValue["label"] == "Checked") {
                                                                                $gridRow[$i][] =  $exportValue["csvHeader"] ;
                                                                            }
                                                                        }else{
                                                                            $gridRow[$i][] =  "";
                                                                        }
                                                                    }else{
                                                                        if ($exportValue['isShow'] == 1) {
                                                                            if ($exportValue["label"] == "Unchecked") {
                                                                                $gridRow[$i][] =  $exportValue["csvHeader"] ;
                                                                            }
                                                                        }else{
                                                                            $gridRow[$i][] =  "";
                                                                        }
                                                                    }
                                                                }else{
                                                                    $gridRow[$i][] =  " ";
                                                                }

                                                            }
                                                        }else{
                                                            $gridRow[$i][] =  " ";
                                                        }

                                                    }
                                                    else if( $girdField->docket_field_category_id == 9){

                                                        $imageValue =  @$DocFieldGridVal->value;
                                                        if($girdField->is_show == 1){
                                                            $toArray = array();
                                                            if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
                                                                $gridRow[$i][] =  "";
                                                            }else{
                                                                foreach(unserialize($imageValue) as $exportValue){
                                                                    $toArray[] = AmazoneBucket::url() . $exportValue["image"];
                                                                }
                                                                $gridRow[$i][] =  implode("; ",$toArray);
                                                            }
                                                        }


                                                    }else if($girdField->docket_field_category_id == 5  || $girdField->docket_field_category_id == 14 ){
                                                        $imageValue =  @$DocFieldGridVal->value;
                                                        if($girdField->is_show == 1){
                                                            $toArray = array();
                                                            if(empty($imageValue) || $imageValue == 'N/a' || !$imageValue){
                                                                $gridRow[$i][] =  "";
                                                            }else{

                                                                foreach(unserialize($imageValue) as $exportValue){
                                                                    $toArray[] = AmazoneBucket::url() . $exportValue;
                                                                }
                                                                $gridRow[$i][] =  implode("; ",$toArray);

                                                            }
                                                        }

                                                    }else{
                                                        if($girdField->is_show == 1){
                                                            $gridRow[$i][] =  @$DocFieldGridVal->value;
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            $sentDocketValues[] = $gridRow;
                        }else{
                            foreach($docketFieldOrder as $docketFieldData){
                                if(@$docketFieldData->exportMapping){
                                    if($docketFieldData->is_show == 1){
                                        if($docketFieldData->docket_field_category_id == 1 || $docketFieldData->docket_field_category_id == 2 || $docketFieldData->docket_field_category_id ==  3|| $docketFieldData->docket_field_category_id == 4 || $docketFieldData->docket_field_category_id == 6 || $docketFieldData->docket_field_category_id == 16 || $docketFieldData->docket_field_category_id == 12|| $docketFieldData->docket_field_category_id == 15 || $docketFieldData->docket_field_category_id == 26 || $docketFieldData->docket_field_category_id == 25 || $docketFieldData->docket_field_category_id == 13|| $docketFieldData->docket_field_category_id == 27){
                                            $valueData = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value;
                                            if($valueData){
                                                array_push($gridRow, @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
                                            }else{
                                                if($docketFieldData->is_show == 1){
                                                    array_push($gridRow, "");
                                                }

                                            }
                                        }elseif($docketFieldData->docket_field_category_id == 30 ){
                                            if( $docketFieldData->docketConstantField->is_show == 1) {
                                                if($docketFieldData->docketConstantField->export_mapping_field_category_id == 1){
                                                    array_push($gridRow, $sendDocVal->formatted_id);
                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 2){
                                                    $recipientInfos = $sendDocVal->recipientInfo;
                                                    $toArray = array();
                                                    foreach ($recipientInfos as $recipientInfo) {
                                                        $toArray[] = @$recipientInfo->userInfo->first_name. ' ' . @$recipientInfo->userInfo->last_name;
                                                    }
                                                    array_push($gridRow, implode("; ",$toArray));
                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 3){
                                                    array_push($gridRow, $sendDocVal->senderUserInfo->first_name . ' ' . $sendDocVal->senderUserInfo->last_name);
                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 4){
                                                    array_push($gridRow, $newline);

                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 5){
                                                    array_push($gridRow, $sendDocVal->docketInfo->title);
                                                }


                                                else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 6){
                                                    array_push($gridRow, $sendDocVal->abn);
                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 7){
                                                    $recipientInfos = $sendDocVal->recipientInfo;
                                                    $companyToArray =  array();
                                                    foreach ($recipientInfos as $recipientInfo) {
                                                        if(Employee::where('user_id', $recipientInfo->userInfo->id)->count()!=0):
                                                            $companyId = Employee::where('user_id', $recipientInfo->userInfo->id)->first()->company_id;
                                                        else :
                                                            $companyId   =   Company::where('user_id', $recipientInfo->userInfo->id)->first()->id;
                                                        endif;
                                                        $companyToArray[] = Company::where('id',$companyId)->first()->abn;
                                                    }
                                                    array_push($gridRow,  implode("; ",$companyToArray));

                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 8){

                                                    array_push($gridRow,  $sendDocVal->company_name);
                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 9){
                                                    $recipientInfos = $sendDocVal->recipientInfo;
                                                    $companyToArray =  array();
                                                    foreach ($recipientInfos as $recipientInfo) {
                                                        if(Employee::where('user_id', $recipientInfo->userInfo->id)->count()!=0):
                                                            $companyId = Employee::where('user_id', $recipientInfo->userInfo->id)->first()->company_id;
                                                        else :
                                                            $companyId   =   Company::where('user_id', $recipientInfo->userInfo->id)->first()->id;
                                                        endif;
                                                        $companyToArray[] = Company::where('id',$companyId)->first()->name;
                                                    }
                                                    array_push($gridRow,  implode("; ",$companyToArray));
                                                }else if($docketFieldData->docketConstantField->export_mapping_field_category_id == 10){
                                                    array_push($gridRow,  1);
                                                }elseif($docketFieldData->docketConstantField->export_mapping_field_category_id == 11){
                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $docketConstantValue){
                                                        if ($docketConstantValue['isShow'] == 1){
                                                            array_push($gridRow, $docketConstantValue['csvHeader']);
                                                        }
                                                    }
                                                }
                                            }

                                        }elseif($docketFieldData->docket_field_category_id == 20){
                                            $sentDocketManualTimer = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimer;
                                            if($sentDocketManualTimer){
                                                foreach ($sentDocketManualTimer as $sentDocketManualTimers){
                                                    if( $sentDocketManualTimers->docketManualTimer->is_show == 1){
                                                        if($sentDocketManualTimers->value != 0 && $sentDocketManualTimers->value != 'n/a'  && $sentDocketManualTimers->value != 'N/a'){
                                                            array_push($gridRow,   Carbon::parse($sentDocketManualTimers->value)->format('d-M.-Y g:i A'));
                                                        }else{
                                                            array_push($gridRow,  $sentDocketManualTimers->value);

                                                        }

                                                    }
                                                }
                                            }else{
                                                foreach ($docketFieldData->docketManualTimer as $docketManualTimers){
                                                    if( $docketManualTimers->is_show == 1){
                                                        array_push($gridRow, "");
                                                    }
                                                }
                                            }

                                            $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
                                            if($sentDocketManualTimerBreak){
                                                foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                                    if( $sentDocketManualTimerBreaks->docketManualTimerBreak->is_show == 1){
                                                        array_push($gridRow, $sentDocketManualTimerBreaks->value);
                                                    }
                                                }
                                            }else{
                                                foreach ($docketFieldData->docketManualTimerBreak as $docketManualTimerBreaks){
                                                    if( $docketManualTimerBreaks->is_show == 1){
                                                        array_push($gridRow,"");
                                                    }
                                                }
                                            }
                                            $sentDocketManualTimerBreak = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketManualTimerBreak;
                                            if($sentDocketManualTimerBreak){
                                                foreach ($sentDocketManualTimerBreak as $sentDocketManualTimerBreaks){
                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
                                                        if($explaination['label'] == "Explanation"){
                                                            if ($explaination['isShow'] == 1){
                                                                array_push($gridRow, $sentDocketManualTimerBreaks->reason);
                                                            }
                                                        }
                                                    }
                                                }
                                            }else{
                                                foreach ( unserialize($docketFieldData->exportMapping->value) as $explaination){
                                                    if($explaination['label'] == "Explanation"){
                                                        if ($explaination['isShow'] == 1){
                                                            array_push($gridRow, " ");
                                                        }
                                                    }
                                                }
                                            }

                                            foreach ( unserialize($docketFieldData->exportMapping->value) as $totalHrs){
                                                if ($totalHrs['label'] == "Total Hours"){
                                                    if ($explaination['isShow'] == 1){
                                                        if($docketFieldData->time_format == "Hours&Minutes"){
                                                            array_push($gridRow, @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
                                                        }else{
                                                            if(@$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value!= null || @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value!= "N/a"){
                                                                $decimal = str_replace("Total: ","",@$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->value);
                                                                $hours = explode(" ",$decimal)[0];
                                                                $minutes = explode(" ",$decimal)[2] * (1/60);
                                                                array_push($gridRow, $hours+$minutes);
                                                            }else{
                                                                array_push($gridRow, " ");
                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                        }elseif($docketFieldData->docket_field_category_id == 18){
                                            array_push($gridRow, $docketFieldData->label);
                                            foreach ( $docketFieldData->yesNoField as $yesNoField){
                                                if ($yesNoField->is_show == 1){
                                                    if($yesNoField->explanation == 1){
                                                        array_push($gridRow, $yesNoField->label);
                                                        $SentDocValYesNoValueInfo = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->SentDocValYesNoValueInfo;
                                                        if($SentDocValYesNoValueInfo || $SentDocValYesNoValueInfo != null){
                                                            if(count($SentDocValYesNoValueInfo)!=0){
                                                                foreach($SentDocValYesNoValueInfo  as $SentDocValYesNoValueInfos){
                                                                    if($SentDocValYesNoValueInfos->YesNoDocketsField->is_show  == 1){
                                                                        if($SentDocValYesNoValueInfos->YesNoDocketsField->docket_field_category_id == 5){
                                                                            $imageValue = unserialize($SentDocValYesNoValueInfos->value);
                                                                            $toArray = array();
                                                                            foreach ($imageValue as $imageValues) {
                                                                                $toArray[] = AmazoneBucket::url() . $imageValues;
                                                                            }

                                                                            array_push($gridRow, implode(";",$toArray));
                                                                        }else{
                                                                            array_push($gridRow, $SentDocValYesNoValueInfos->value);
                                                                        }
                                                                    }
                                                                }
                                                            }else{
                                                                foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                                    if($yesNoDocketsField->is_show  == 1){
                                                                        if($yesNoDocketsField->docket_field_category_id == 5){
                                                                            array_push($gridRow, "");
                                                                        }else{
                                                                            array_push($gridRow, "");
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }else{

                                                            foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsField){
                                                                if($yesNoDocketsField->is_show  == 1){
                                                                    if($yesNoDocketsField->docket_field_category_id == 5){
                                                                        array_push($gridRow, "");
                                                                    }else{
                                                                        array_push($gridRow, "");
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }else{
                                                        array_push($gridRow, "");
                                                    }
                                                }
                                            }



                                        }elseif($docketFieldData->docket_field_category_id == 5 || $docketFieldData->docket_field_category_id == 9 || $docketFieldData->docket_field_category_id == 14 ){
                                            $docketImageValues = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketImageValue;
                                            $toArray = array();
                                            if($docketImageValues){
                                                foreach ($docketImageValues as $docketImageValue) {
                                                    $toArray[] = AmazoneBucket::url() . $docketImageValue->value;
                                                }
                                                array_push($gridRow,  implode("; ",$toArray));
                                            }else{
                                                array_push($gridRow,  " ");
                                            }

                                        }elseif($docketFieldData->docket_field_category_id == 7 ){
                                            $docketUnitRate = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketUnitRateValue;
                                            if($docketUnitRate){
                                                foreach ($docketUnitRate as $sentDocketUnitRateValue){
                                                    if($sentDocketUnitRateValue->docketUnitRateInfo->is_show == 1){
                                                        array_push($gridRow,  $sentDocketUnitRateValue->value);
                                                    }
                                                }
                                            }else{
                                                foreach ($docketFieldData->unitRate as $docketUnitRatess){
                                                    if($docketUnitRatess->is_show == 1){
                                                        array_push($gridRow,  " ");
                                                    }

                                                }
                                            }

                                        }elseif($docketFieldData->docket_field_category_id == 24){
                                            $DocketTallyable = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first()->sentDocketTallyableUnitRateValue;
                                            if($DocketTallyable){
                                                foreach ($DocketTallyable as $sentDocketTallyableUnitRateValue){
                                                    if($sentDocketTallyableUnitRateValue->docketUnitRateInfo->is_show == 1){
                                                        array_push($gridRow,  $sentDocketTallyableUnitRateValue->value);
                                                    }
                                                }


                                            }else{
                                                foreach ($docketFieldData->tallyUnitRate as $docketUnitRate){
                                                    if($docketUnitRate->is_show== 1){
                                                        array_push($gridRow,  " ");
                                                    }
                                                }
                                            }
                                        }elseif($docketFieldData->docket_field_category_id == 8){
                                            $checkBoxValue = @$docketFieldData->docketFieldValueBySentDocketId($sendDocVal->id)->first();
                                            if($checkBoxValue != null){
                                                if($checkBoxValue->value == 1){
                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
                                                        if ($checkBox['isShow'] == 1) {
                                                            if ($checkBox["label"] == "Checked") {
                                                                array_push($gridRow, $checkBox["csvHeader"]);
                                                            }
                                                        }
                                                    }
                                                }else if($checkBoxValue->value == 0){
                                                    foreach ( unserialize($docketFieldData->exportMapping->value) as $checkBox){
                                                        if ($checkBox['isShow'] == 1) {
                                                            if ($checkBox["label"] == "Unchecked") {

                                                                array_push($gridRow, $checkBox["csvHeader"]);
                                                            }
                                                        }
                                                    }
                                                }
                                            }else{
                                                array_push($gridRow, " ");

                                            }




                                        }elseif($docketFieldData->docket_field_category_id == 22){
                                            foreach($docketFieldData->girdFields as $girdFields ){
                                                if($girdFields->is_show == 1) {
                                                    if($girdFields->docket_field_category_id == 20 || $girdFields->docket_field_category_id == 8){
                                                        foreach ( unserialize($girdFields->export_value) as $exportValue){
                                                            if ($exportValue['isShow'] == 1) {
                                                                array_push($gridRow, " ");


                                                            }
                                                        }
                                                    }else{
                                                        array_push($gridRow, " ");
                                                    }
                                                }
                                            }



                                        }
                                    }
                                }

                            }
                            $sentDocketValues['nongrid'][] = $gridRow;
                        }
                    }
                }

                //insert the header
                $csv->insertOne($sentDocketHeader);



                //insert all the record
                foreach($sentDocketValues as $key=>$sentDocketVal){
                    if($key === "nongrid"){
                        foreach($sentDocketVal as $nogridValue){
                            $csv->insertOne($nogridValue);
                        }

                    }else{

                        foreach($sentDocketVal as $data){
                            $csv->insertOne($data);
                        }
                    }

                }

                $csv->insertOne(array(""));

            }
        }
        $csv->output('Export-Docket-'.$date.'.csv');




    }






    //only for daycrs
    public  function exportDaycrsDocket(Request $request){
        if ($request->ed != null){
            $date=Carbon::now()->format('d-M-Y');
            $selectEmailDocketIds = $request->ed;

            $emailSentDocket = EmailSentDocket::whereIn('id', array_unique($selectEmailDocketIds))->get();
            $employeeIds = Employee::where('company_id', Session::get('company_id'))->pluck('user_id')->toArray();
            $employeeIds[] = Company::find(Session::get('company_id'))->user_id;
            $totalEmployee = array_unique(array_merge($employeeIds));
            $checkEmailDocketId = array();
            foreach ($emailSentDocket as $row) {
                //sender user id  : user_id
                if ($row->where('user_id', $totalEmployee)) {
                    $id_get = EmailSentDocket::where('id', $row->id)->pluck('id');
                    $checkEmailDocketId[] = $id_get;
                } else {
                    flash('Download Invalid', 'warning');
                    // return redirect()->back();
                }

            }
            $emailSentDockets = EmailSentDocket::whereIn('id', array_unique($checkEmailDocketId))->get();

            $csv = Writer::createFromString('');
            $sentDocketHeader = array("Docket Number", "Site Location", "Start Date", "End Date", "Item", "Total", "Docket Line Item", "Client Representitive");
            $csv->insertOne($sentDocketHeader);

            foreach ($emailSentDockets as $emailSentDocket) {

                $sent_dockets_value = EmailSentDocketValue::where('email_sent_docket_id', $emailSentDocket->id)->orderBy('created_at', 'asc')->get();
                $docketValArray     = array();

                if($emailSentDocket->docket_id==1163){
                    foreach ($sent_dockets_value as $value) {
                        if($value->docket_field_id==14170){
                            $gridMaxRow     =    $value->emailSentDocketFieldGridValues->max('index')+1;
                        }
                    }
                    for($i=0; $i<$gridMaxRow;$i++){
                        $docketValue = array();
                        array_push($docketValue, $emailSentDocket->formatted_id);
                        foreach ($sent_dockets_value as $value) {
                            if($value->docket_field_id==14171){
                                $docketValArray[0] = $value->value;
                            }
                            if($value->docket_field_id==14170){
                                foreach($value->emailSentDocketFieldGridLabels as $gridFieldLabels){
                                    if($gridFieldLabels->docketFieldGrid->docket_field_category_id ==20){
                                        $manualTimerGrid =  DocketFieldGridValue::where('index',$i)->where('docket_id',$emailSentDocket->id)->where('docket_field_id',$value->docketFieldInfo->id)->where('docket_field_grid_id',$gridFieldLabels->docket_field_grid_id)->where('is_email_docket', 1)->first()->value;
                                        if($manualTimerGrid != ""){
                                            $totalDuration = json_decode($manualTimerGrid , true)['totalDuration'];
                                            $breakDuration =json_decode($manualTimerGrid , true)['breakDuration'];
                                            $docketValArray[4]  =$this->convertHrsMin($totalDuration);
                                            $docketValArray[1] = json_decode($manualTimerGrid , true)['from'];
                                            $docketValArray[2] = json_decode($manualTimerGrid , true)['to'];
                                        }else{
                                            $docketValArray[4] = "N/a";
                                            $docketValArray[1] = "N/a";
                                            $docketValArray[2] = "N/a";
                                        }
                                    }
                                    if($gridFieldLabels->docketFieldGrid->docket_field_category_id ==1){
                                        $docketValArray[3] = DocketFieldGridValue::where('index',$i)->where('docket_field_id',$value->docketFieldInfo->id)->where('docket_id',$emailSentDocket->id)->where('docket_field_grid_id',$gridFieldLabels->docket_field_grid_id)->where('is_email_docket', 1)->first()->value;
                                    }
                                }
                                $docketValArray[5] = $i+1;
                            }
                        }
                        array_push($docketValue, $docketValArray[0]);
                        array_push($docketValue, $docketValArray[1]);
                        array_push($docketValue, $docketValArray[2]);
                        array_push($docketValue, $docketValArray[3]);
                        array_push($docketValue, $docketValArray[4]);
                        array_push($docketValue, $docketValArray[5]);

                        //client representative
                        if($emailSentDocket->recipientInfo){
                            $recipients =   "";
                            foreach($emailSentDocket->recipientInfo as $recipient){
                                $recipients= ($recipients!="")?$recipients.",".$recipient->receiver_full_name:$recipient->receiver_full_name;
                            }
                            $docketValArray[6]  =   $recipients;
                            array_push($docketValue, $docketValArray[6]);
                        }
                        $csv->insertOne($docketValue);
                    }

                }elseif($emailSentDocket->docket_id==1155){
                    foreach ($sent_dockets_value as $value) {
                        if($value->docket_field_id==14063){
                            $gridMaxRow     =    $value->emailSentDocketFieldGridValues->max('index')+1;
                        }
                    }
                    for($i=0; $i<$gridMaxRow;$i++){
                        $docketValue = array();
                        array_push($docketValue, $emailSentDocket->formatted_id);
                        foreach ($sent_dockets_value as $value) {
                            if($value->docket_field_id==14064){
                                $docketValArray[0] = $value->value;
                            }
                            if($value->docket_field_id==14063){
                                foreach($value->emailSentDocketFieldGridLabels as $gridFieldLabels){
                                    $gridValue = DocketFieldGridValue::where('index',$i)->where('docket_field_id',$value->docketFieldInfo->id)->where('docket_id',$emailSentDocket->id)->where('docket_field_grid_id',$gridFieldLabels->docket_field_grid_id)->where('is_email_docket', 1)->first();

                                    if($gridValue->docket_field_grid_id==1172){
                                        $docketValArray[3] = $gridValue->value;
                                    }
                                    if($gridValue->docket_field_grid_id==1174){
                                        $docketValArray[1] = $gridValue->value;
                                    }
                                    if($gridValue->docket_field_grid_id==1175){
                                        $docketValArray[2] = $gridValue->value;
                                    }
                                    if($gridValue->docket_field_grid_id==1176){
                                        $docketValArray[4] = $gridValue->value;
                                    }

                                }
                                $docketValArray[5] = $i+1;
                            }
                        }
                        array_push($docketValue, $docketValArray[0]);
                        array_push($docketValue, $docketValArray[1]);
                        array_push($docketValue, $docketValArray[2]);
                        array_push($docketValue, $docketValArray[3]);
                        array_push($docketValue, $docketValArray[4]);
                        array_push($docketValue, $docketValArray[5]);

                        //client representative
                        if($emailSentDocket->recipientInfo){
                            $recipients =   "";
                            foreach($emailSentDocket->recipientInfo as $recipient){
                                $recipients= ($recipients!="")?$recipients.",".$recipient->receiver_full_name:$recipient->receiver_full_name;
                            }
                            $docketValArray[6]  =   $recipients;
                            array_push($docketValue, $docketValArray[6]);
                        }
                        $csv->insertOne($docketValue);
                    }

                }



            }
            $csv->output('Export-Docket-'.$date.'.csv');

        }
    }

    public  function exportDaycrsMU2(Request $request){
        if ($request->ed != null){
            $date=Carbon::now()->format('d-M-Y');
            $selectEmailDocketIds = $request->ed;

            $emailSentDocket = EmailSentDocket::whereIn('id', array_unique($selectEmailDocketIds))->get();
            $employeeIds = Employee::where('company_id', Session::get('company_id'))->pluck('user_id')->toArray();
            $employeeIds[] = Company::find(Session::get('company_id'))->user_id;
            $totalEmployee = array_unique(array_merge($employeeIds));
            $checkEmailDocketId = array();
            foreach ($emailSentDocket as $row) {
                //sender user id  : user_id
                if ($row->where('user_id', $totalEmployee)) {
                    $id_get = EmailSentDocket::where('id', $row->id)->pluck('id');
                    $checkEmailDocketId[] = $id_get;
                } else {
                    flash('Download Invalid', 'warning');
                    // return redirect()->back();
                }

            }
            $emailSentDockets = EmailSentDocket::whereIn('id', array_unique($checkEmailDocketId))->get();

            $csv = Writer::createFromString('');
            $sentDocketHeader = array("Docket Number", "Site Location", "Start Date", "End Date", "Item", "Total", "Docket Line Item", "Client Representitive");
            $csv->insertOne($sentDocketHeader);

            foreach ($emailSentDockets as $emailSentDocket) {

                $sent_dockets_value = EmailSentDocketValue::where('email_sent_docket_id', $emailSentDocket->id)->orderBy('created_at', 'asc')->get();
                $docketValArray     = array();

                if($emailSentDocket->docket_id==1439){
                    foreach ($sent_dockets_value as $value) {
                        if($value->docket_field_id==18978){
                            $gridMaxRow     =    $value->emailSentDocketFieldGridValues->max('index')+1;
                        }
                    }
                    for($i=0; $i<$gridMaxRow;$i++){
                        $docketValue = array();
                        array_push($docketValue, $emailSentDocket->formatted_id);
                        foreach ($sent_dockets_value as $value) {
                            if($value->docket_field_id==18979){
                                $docketValArray[0] = $value->value;
                            }
                            if($value->docket_field_id==18978){
                                foreach($value->emailSentDocketFieldGridLabels as $gridFieldLabels){
                                    if($gridFieldLabels->docketFieldGrid->docket_field_category_id ==20){
                                        $manualTimerGrid =  DocketFieldGridValue::where('index',$i)->where('docket_id',$emailSentDocket->id)->where('docket_field_id',$value->docketFieldInfo->id)->where('docket_field_grid_id',$gridFieldLabels->docket_field_grid_id)->where('is_email_docket', 1)->first()->value;
                                        if($manualTimerGrid != ""){
                                            $totalDuration = json_decode($manualTimerGrid , true)['totalDuration'];
                                            $breakDuration =json_decode($manualTimerGrid , true)['breakDuration'];
                                            $docketValArray[4]  =$this->convertHrsMin($totalDuration);
                                            $docketValArray[1] = json_decode($manualTimerGrid , true)['from'];
                                            $docketValArray[2] = json_decode($manualTimerGrid , true)['to'];
                                        }else{
                                            $docketValArray[4] = "N/a";
                                            $docketValArray[1] = "N/a";
                                            $docketValArray[2] = "N/a";
                                        }
                                    }
                                    if($gridFieldLabels->docketFieldGrid->docket_field_category_id ==1){
                                        $docketValArray[3] = DocketFieldGridValue::where('index',$i)->where('docket_field_id',$value->docketFieldInfo->id)->where('docket_id',$emailSentDocket->id)->where('docket_field_grid_id',$gridFieldLabels->docket_field_grid_id)->where('is_email_docket', 1)->first()->value;
                                    }
                                }
                                $docketValArray[5] = $i+1;
                            }
                        }

                        array_push($docketValue, $docketValArray[0]);
                        array_push($docketValue, $docketValArray[1]);
                        array_push($docketValue, $docketValArray[2]);
                        array_push($docketValue, $docketValArray[3]);
                        array_push($docketValue, $docketValArray[4]);
                        array_push($docketValue, $docketValArray[5]);

                        //client representative
                        if($emailSentDocket->recipientInfo){
                            $recipients =   "";
                            foreach($emailSentDocket->recipientInfo as $recipient){
                                $recipients= ($recipients!="")?$recipients.",".$recipient->receiver_full_name:$recipient->receiver_full_name;
                            }
                            $docketValArray[6]  =   $recipients;
                            array_push($docketValue, $docketValArray[6]);
                        }
                        $csv->insertOne($docketValue);
                    }
                }
            }
            $csv->output('Export-Docket-'.$date.'.csv');

        }
    }

    public function exportEmailDocket(Request $request){
        $date=Carbon::now()->format('d-M-Y');
        $selectEmailDocketIds = $request->emailDocketId;

        $emailSentDocket = EmailSentDocket::whereIn('id', array_unique($selectEmailDocketIds))->get();
        $employeeIds = Employee::where('company_id', Session::get('company_id'))->pluck('user_id')->toArray();
        $employeeIds[] = Company::find(Session::get('company_id'))->user_id;
        $totalEmployee = array_unique(array_merge($employeeIds));
        $checkEmailDocketId = array();
        foreach ($emailSentDocket as $row) {
            //sender user id  : user_id
            if ($row->where('user_id', $totalEmployee)) {
                $id_get = EmailSentDocket::where('id', $row->id)->pluck('id');
                $checkEmailDocketId[] = $id_get;
            } else {
                flash('Download Invalid', 'warning');
                return redirect()->back();
            }

        }
        $emailSentDockets = EmailSentDocket::whereIn('id', array_unique($checkEmailDocketId))->get();
        $data = array();
        $csv = Writer::createFromString('');
        $csv->setNewline("\r\n");
        $newline = $csv->getNewline();
        foreach ($emailSentDockets as $emailSentDocket) {
            $sent_dockets_value = EmailSentDocketValue::where('email_sent_docket_id', $emailSentDocket->id)->orderBy('created_at', 'asc')->get();

            $data['template_name'] = $emailSentDocket->docketInfo->title;
            $data['docket_id'] = $emailSentDocket->id;
            $data['from'] = $emailSentDocket->senderUserInfo->first_name . ' ' . $emailSentDocket->senderUserInfo->last_name . $newline . $emailSentDocket->senderCompanyInfo->name . $newline . $emailSentDocket->senderCompanyInfo->address . $newline . 'ABN: ' . $emailSentDocket->senderCompanyInfo->abn;

            $sentDocketValues = array();
            $sentDocketHeader = array();

            array_push($sentDocketHeader, 'Docket Id');
            array_push($sentDocketValues, $data['docket_id']);
            array_push($sentDocketHeader, 'From');
            array_push($sentDocketValues, $data['from']);

            $emailgroup= array();
            $recipientInfos = $emailSentDocket->recipientInfo;
//            foreach ($recipientInfos as $recipientInfo) {
//                $emailgroup[] = @$recipientInfo->emailUserInfo->email;
//            }
//            array_push($sentDocketHeader, 'To');
//            array_push($sentDocketValues, implode("\r\n",$emailgroup));

            foreach ($recipientInfos as $recipientInfo) {

                $emailgroup[] =array(
                    "email"=> @$recipientInfo->emailUserInfo->email,
                    "company_name" =>@$recipientInfo->receiver_company_name,
                );
            }


            $toEmailName = array();

            foreach ($emailgroup as $emailgroups){
                if ($emailgroups['company_name'] == null){
                    $toEmailName[]= 'Email: '.$emailgroups['email']."\r\n" ;

                }else{
                    $toEmailName[]= 'Email: '.$emailgroups['email']."\r\n" .'Company Name: '.$emailgroups['company_name']."\r\n";

                }
            }

            $finalEmail =implode("\r\n",$toEmailName);


            array_push($sentDocketHeader, 'To');
            array_push($sentDocketValues, $finalEmail);


            # code...
            foreach ($sent_dockets_value as $value) {

                if ($value->docketFieldInfo->docket_field_category_id == 5 || $value->docketFieldInfo->docket_field_category_id == 9 || $value->docketFieldInfo->docket_field_category_id == 14) {

                    $imageValue = implode(" ", $value->sentDocketImageValue->pluck("value")->toArray());
                    if($imageValue==""){
                        array_push($sentDocketValues, "");
                    }else{
                        array_push($sentDocketValues, AmazoneBucket::url() . $imageValue);

                    }
                    array_push($sentDocketHeader, $value->label);

                } elseif ($value->docketFieldInfo->docket_field_category_id == 8) {

                    if ($value == '1') {

                        array_push($sentDocketValues, 'Yes');
                        array_push($sentDocketHeader, $value->label);

                    } else {

                        array_push($sentDocketValues, 'No');
                        array_push($sentDocketHeader, $value->label);
                    }

                } elseif ($value->docketFieldInfo->docket_field_category_id == 15) {

                    $documentValue = implode(" ", $value->sentEmailAttachment->pluck("url")->toArray());
                    if($documentValue==""){
                        array_push($sentDocketValues, "");
                    }else{
                        array_push($sentDocketValues, AmazoneBucket::url() . $documentValue);

                    }


                    array_push($sentDocketHeader, $value->label);

                } elseif ($value->docketFieldInfo->docket_field_category_id == 7) {
                    array_push($sentDocketHeader, "Unit Rate");
                    array_push($sentDocketValues, @$value->sentDocketUnitRateValue->first()->docketUnitRateInfo->label . ": " . @$value->sentDocketUnitRateValue->first()->value . $newline . @$value->sentDocketUnitRateValue->last()->docketUnitRateInfo->label . ": " . @$value->sentDocketUnitRateValue->last()->value . $newline . "Total" . ": " . @$value->sentDocketUnitRateValue->last()->value * @$value->sentDocketUnitRateValue->first()->value);

                } elseif ($value->docketFieldInfo->docket_field_category_id == 20) {
                    array_push($sentDocketHeader, $value->label);
                    $sentDocketValuess = array();

                    foreach ($value->sentDocketManualTimer as $rows) {
                        $sentDocketValuess[] = array(
                            'type' => 1,
                            'label' => $rows->label,
                            'value' => $rows->value,
                            'reason_for_break' => ''
                        );
                    }
                    foreach ($value->sentDocketManualTimerBreak as $items) {
                        $sentDocketValuess[] = array(
                            'type' => 2,
                            'label' => $items->label,
                            'value' => $items->value,
                            'reason_for_break' => $items->reason
                        );
                    }

                    $r = array();
                    foreach ($sentDocketValuess as $item) {
                        $r[] = $item['label'] . ": " . $item['value'];


                    }
                    $s = array();
                    foreach ($sentDocketValuess as $rowdata) {
                        if ($rowdata['type'] == 2) {
                            $s[] = $rowdata['reason_for_break'];
                        }

                    }

                    array_push($sentDocketValues, $r[0] . $newline . $r[1] . $newline . $r[2] . $newline . 'Reason for break: ' . $s[0] . $newline . 'Total Time: ' . $value->value);

                } elseif ($value->docketFieldInfo->docket_field_category_id == 18) {
                    $yesno = unserialize($value->label);
                    array_push($sentDocketHeader, @$yesno['title']);
                    if (@$yesno['label_value'][$value->value]['label_type'] == 1) {
                        $yesNoValue = AmazoneBucket::url() . @$yesno['label_value'][$value->value]['label'];
                    } else {
                        $yesNoValue = @$yesno['label_value'][$value->value]['label'];

                    }
                    $yesnoNa = array();
                    if (count($value->SentEmailDocValYesNoValueInfo) != 0) {

                        foreach ($value->SentEmailDocValYesNoValueInfo as $rowData) {
                            if ($rowData->YesNoDocketsField->docket_field_category_id == 5) {
                                $imageData = unserialize($rowData->value);
                                $yesnoNa[] = array(

                                    'label' => $rowData->label,
                                    'value' => implode("\r\n", $imageData)

                                );
                            }
                            if ($rowData->YesNoDocketsField->docket_field_category_id == 1) {
                                $yesnoNa[] = array(

                                    'label' => $rowData->label,
                                    'value' => $rowData->value,

                                );
                            }
                        }

                    }
                    $rt = array();
                    foreach ($yesnoNa as $itemss) {
                        $rt[] = $itemss['label'] . ': ' . $itemss['value'] . "\r\n\r\n";

                    }
                    $test = implode("\n", $rt);


                    array_push($sentDocketValues, $yesNoValue . $newline . $newline . "Explanation" . $newline . $test);


                } else {
                    array_push($sentDocketValues, $value->value);
                    array_push($sentDocketHeader, $value->label);
                }

            }


            $csv->insertOne(array($data['template_name']));

            //insert the header
            $csv->insertOne($sentDocketHeader);

            //insert all the records
            $csv->insertAll(array($sentDocketValues));

            $csv->insertOne(array(""));

            //die;
        }
        return $csv->output('Export-Docket-'.$date.'.csv');




    }

    public function exportInvoice(Request $request)
    {
//        $invoices   =   SentInvoice::where('company_id',Session::get('company_id'))->get();
        $date=Carbon::now()->format('d-M-Y');
        $selectInvoiceIds = $request->invoiceId;
        $checkinvoiceId = array();
        foreach ($selectInvoiceIds as $selectInvoiceId) {
            $id_get = SentInvoice::where('id', $selectInvoiceId)->where('company_id', Session::get('company_id'))->pluck('id');
            $checkinvoiceId[] = $id_get;
        }
        $invoices = SentInvoice::whereIn('id', array_unique($checkinvoiceId))->get();

        $data = array();
        $csv = Writer::createFromString('');
        $csv->setNewline("\r\n");
        $newline = $csv->getNewline();

        foreach ($invoices as $invoice) {
            $sent_invoices_desc = $invoice->invoiceDescription;
            $sent_invoices_value = SentInvoiceValue::where('sent_invoice_id', $invoice->id)->orderBy('created_at','asc')->get();

            $data['template_name'] = $invoice->invoiceInfo->title;
            $data['invoice_id'] = $invoice->id;
            $data['from'] =  $invoice->senderUserInfo->first_name . ' ' . $invoice->senderUserInfo->last_name . $newline . $invoice->senderCompanyInfo->name . $newline . $invoice->senderCompanyInfo->address . $newline . 'ABN: ' . $invoice->senderCompanyInfo->abn;
            $data['to'] = $invoice->receiverUserInfo->first_name . ' ' . $invoice->receiverUserInfo->last_name . $newline . $invoice->receiverCompanyInfo->name . $newline . $invoice->receiverCompanyInfo->address . $newline . 'ABN: ' . $invoice->receiverCompanyInfo->abn;

            $sentInvoiceValues   =    array();
            $sentInvoiceHeader   =    array();

            array_push($sentInvoiceHeader, 'ID');
            array_push($sentInvoiceValues, $data['invoice_id']);
            array_push($sentInvoiceHeader, 'Date');
            array_push($sentInvoiceValues, Carbon::parse($invoice->created_at)->format('d/M/Y'));
            array_push($sentInvoiceHeader, 'From');
            array_push($sentInvoiceValues, $data['from']);
            array_push($sentInvoiceHeader, 'To');

            array_push($sentInvoiceValues, $data['to']);

            $n = 1;
            foreach ($sent_invoices_desc as $sent_invoice_desc) {

                array_push($sentInvoiceHeader, 'Description '. $n++);
                array_push($sentInvoiceValues,$sent_invoice_desc->description);

                array_push($sentInvoiceHeader, 'Value');
                array_push($sentInvoiceValues, $sent_invoice_desc->amount);
            }

            array_push($sentInvoiceHeader, 'Sub Total');
            array_push($sentInvoiceValues, $invoice->amount);

            array_push($sentInvoiceHeader, $invoice->invoiceInfo->gst_label);
            array_push($sentInvoiceValues, round($invoice->gst,2).'%');

            array_push($sentInvoiceHeader, 'Total');
            array_push($sentInvoiceValues, $invoice->amount + ($invoice->amount * $invoice->gst/100));
            # code...
            foreach ($sent_invoices_value as $value) {

                if($value->invoiceFieldInfo->invoice_field_category_id == 5 || $value->invoiceFieldInfo->invoice_field_category_id == 9){

                    $imageValue     =   implode(" ",$value->sentInvoiceImageValue->pluck("value")->toArray());
                    array_push($sentInvoiceValues, AmazoneBucket::url() . $imageValue);
                    array_push($sentInvoiceHeader, $value->label);

                }elseif($value->invoiceFieldInfo->invoice_field_category_id == 12){

                    array_push($sentInvoiceValues, $value->value);
                    array_push($sentInvoiceHeader, $value->label);

                }else{

                    array_push($sentInvoiceValues, $value->value);
                    array_push($sentInvoiceHeader, $value->label);
                }

            }



            $csv->insertOne(array($data['template_name']));

            //insert the header
            $csv->insertOne($sentInvoiceHeader);

            //insert all the records
            $csv->insertAll(array($sentInvoiceValues));

            $csv->insertOne(array(""));

            //die;
        }

        $csv->output('Export-Invoices-'.$date.'.csv');
    }

    public function exportEmailDockets(Request $request)

    {
//        $emailSentDockets    =   EmailSentDocket::where('company_id',Session::get('company_id'))->get();
        $date=Carbon::now()->format('d-M-Y');
        $selectDocketIds = $request->docketId;
        $checkDocketId = array();
        foreach ($selectDocketIds as $selectDocketId) {
            $id_get = EmailSentDocket::where('id', $selectDocketId)->where('company_id', Session::get('company_id'))->pluck('id');
            $checkDocketId[] = $id_get;
        }
        $emailSentDockets = EmailSentDocket::whereIn('id', array_unique($checkDocketId))->get();

        $data = array();
        $csv = Writer::createFromString('');

        foreach ($emailSentDockets as $emailSentDocket) {
            $email_sent_dockets_value = EmailSentDocketValue::where('email_sent_docket_id', $emailSentDocket->id)->orderBy('created_at','asc')->get();

            $data['template_name'] = $emailSentDocket->docketInfo->title;
            $data['id'] = $emailSentDocket->id;

            $sentEmailDocketValue   =    array();
            $sentEmailDocketHeader   =    array();

            array_push($sentEmailDocketHeader, 'Id');
            array_push($sentEmailDocketValue, $data['id']);

            //dd($data);
            # code...
            foreach ($email_sent_dockets_value as $value) {

                if($value->docketFieldInfo->docket_field_category_id == 5 || $value->docketFieldInfo->docket_field_category_id == 9 || $value->docketFieldInfo->docket_field_category_id == 14){

                    $imageValue     =   implode(" ",$value->sentDocketImageValue->pluck("value")->toArray());
                    array_push($sentEmailDocketValue, AmazoneBucket::url() . $imageValue);
                    array_push($sentEmailDocketHeader, $value->label);

                }elseif($value->docketFieldInfo->docket_field_category_id == 8){

                    if($value == '1'){

                        array_push($sentEmailDocketValue, 'Yes');
                        array_push($sentEmailDocketHeader, $value->label);

                    }else{

                        array_push($sentEmailDocketValue, 'No');
                        array_push($sentEmailDocketHeader, $value->label);
                    }

                }elseif($value->docketFieldInfo->docket_field_category_id == 15){

                    $documentValue     =   implode(" ",$value->sentDocketAttachment->pluck("value")->toArray());
                    array_push($sentEmailDocketValue, AmazoneBucket::url() . $documentValue);
                    array_push($sentEmailDocketHeader, $value->label);

                }elseif($value->docketFieldInfo->docket_field_category_id == 7){

                    array_push($sentEmailDocketValue, @$value->sentDocketUnitRateValue->first()->value);
                    array_push($sentEmailDocketHeader, @$value->sentDocketUnitRateValue->first()->docketUnitRateInfo->label);

                    array_push($sentEmailDocketValue, @$value->sentDocketUnitRateValue->last()->value);
                    array_push($sentEmailDocketHeader, @$value->sentDocketUnitRateValue->last()->docketUnitRateInfo->label);

                    array_push($sentEmailDocketValue, @$value->sentDocketUnitRateValue->last()->value*@$value->sentDocketUnitRateValue->first()->value);
                    array_push($sentEmailDocketHeader, "Total");

                }else{
                    array_push($sentEmailDocketValue, $value->value);
                    array_push($sentEmailDocketHeader, $value->label);
                }

            }



            $csv->insertOne(array($data['template_name']));

            //insert the header
            $csv->insertOne($sentEmailDocketHeader);

            //insert all the records
            $csv->insertAll(array($sentEmailDocketValue));

             $csv->insertOne(array(""));

            //die;
        }
        $csv->output('Email-Dockets-'.$date.'.csv');
    }

    public function exportEmailInvoice(Request $request)
    {
        //$email_sent_invoices   =   EmailSentInvoice::where('company_id',Session::get('company_id'))->get();
//        $email_sent_invoices   =   EmailSentInvoice::where('id',52)->get();

        $date=Carbon::now()->format('d-M-Y');
        $selectInvoiceIds = $request->invoiceId;
        $checkInvoiceId = array();
        foreach ($selectInvoiceIds as $selectInvoiceId) {
            $id_get = EmailSentInvoice::where('id', $selectInvoiceId)->where('company_id', Session::get('company_id'))->pluck('id');
            $checkInvoiceId[] = $id_get;
        }
        $email_sent_invoices = EmailSentInvoice::whereIn('id', array_unique($checkInvoiceId))->get();

        $data = array();
        $csv = Writer::createFromString('');
        $csv->setNewline("\r\n");
        $newline = $csv->getNewline();

        foreach ($email_sent_invoices as $email_sent_invoice) {

            $email_sent_invoices_desc = $email_sent_invoice->invoiceDescription;
            $email_sent_invoices_value = EmailSentInvoiceValue::where('email_sent_invoice_id', $email_sent_invoice->id)->orderBy('created_at','asc')->get();

            $data['template_name'] = $email_sent_invoice->invoiceInfo->title;
            $data['invoice_id'] = $email_sent_invoice->id;
            $data['from'] =  $email_sent_invoice->senderUserInfo->first_name . ' ' . $email_sent_invoice->senderUserInfo->last_name . $newline . $email_sent_invoice->senderCompanyInfo->name . $newline . $email_sent_invoice->senderCompanyInfo->address . $newline . 'ABN: ' . $email_sent_invoice->senderCompanyInfo->abn;
            $data['to'] = $email_sent_invoice->receiver_full_name  . $newline . $email_sent_invoice->receiver_company_name . $newline . $email_sent_invoice->receiver_company_address;

            $emailSentInvoiceValues   =    array();
            $emailSentInvoiceHeader   =    array();

            array_push($emailSentInvoiceHeader, 'ID');
            array_push($emailSentInvoiceValues, $data['invoice_id']);
            array_push($emailSentInvoiceHeader, 'Date');
            array_push($emailSentInvoiceValues, Carbon::parse($email_sent_invoice->created_at)->format('d/M/Y'));
            array_push($emailSentInvoiceHeader, 'From');
            array_push($emailSentInvoiceValues, $data['from']);
            array_push($emailSentInvoiceHeader, 'To');
            array_push($emailSentInvoiceValues, $data['to']);

            $n = 1;
            foreach ($email_sent_invoices_desc as $email_sent_invoice_desc) {

                array_push($emailSentInvoiceHeader, 'Description '. $n++);
                array_push($emailSentInvoiceValues,$email_sent_invoice_desc->description);

                array_push($emailSentInvoiceHeader, 'Value');
                array_push($emailSentInvoiceValues, $email_sent_invoice_desc->amount);
            }

            array_push($emailSentInvoiceHeader, 'Sub Total');
            array_push($emailSentInvoiceValues, $email_sent_invoice->amount);

            array_push($emailSentInvoiceHeader, $email_sent_invoice->invoiceInfo->gst_label);
            array_push($emailSentInvoiceValues, round($email_sent_invoice->gst,2).'%');

            array_push($emailSentInvoiceHeader, 'Total');
            array_push($emailSentInvoiceValues, $email_sent_invoice->amount + ($email_sent_invoice->amount * $email_sent_invoice->gst/100));
            # code...
            foreach ($email_sent_invoices_value as $value) {

                if($value->invoiceFieldInfo->invoice_field_category_id == 5 || $value->invoiceFieldInfo->invoice_field_category_id == 9){

                    $imageValue     =   implode(" ",$value->emailSentInvoiceImageValue->pluck("value")->toArray());
                    array_push($emailSentInvoiceValues, AmazoneBucket::url() . $imageValue);
                    array_push($emailSentInvoiceHeader, $value->invoiceFieldInfo->label);

                }elseif($value->invoiceFieldInfo->invoice_field_category_id == 12){

                    array_push($emailSentInvoiceValues, $value->value);
                    array_push($emailSentInvoiceHeader, $value->label);

                }else{

                    array_push($emailSentInvoiceValues, $value->value);
                    array_push($emailSentInvoiceHeader, $value->label);
                }

            }



            $csv->insertOne(array($data['template_name']));

            //insert the header
            $csv->insertOne($emailSentInvoiceHeader);

            //insert all the records
            $csv->insertAll(array($emailSentInvoiceValues));

            $csv->insertOne(array(""));

            //die;
        }

        $csv->output('Email-Invoices-'.$date.'.csv');
    }

    public function downloadDocketPdfZip(Request $request){
        ini_set('max_execution_time','300');


        $selectDocketIds = $request->d;
        $selectEmailDocketIds = $request->ed;
        $dir =  'files/docket/pdf/'.Carbon::now();
        $result = File::makeDirectory($dir);
        if($selectDocketIds){
            $checkDocketId = array();
            foreach ($selectDocketIds as $selectDocketId) {
                $id_get = SentDockets::where('id', $selectDocketId)->pluck('id');
                $checkDocketId[] = $id_get;
            }
            $sentDockets = SentDockets::whereIn('id', array_unique($checkDocketId))->get();
            foreach ($sentDockets as $sentDocket) {
                $recipientIds   =   $sentDocket->recipientInfo->pluck('user_id');
                $companyEmployeeQuery   =    Employee::whereIn('user_id',$recipientIds)->pluck('company_id');
                $empCompany    =    Company::whereIn('id',$companyEmployeeQuery)->pluck('id')->toArray();
                $adminCompanyQuery   =    Company::whereIn('user_id',$recipientIds)->pluck('id')->toArray();
                $company    =   Company::whereIn('id',array_unique(array_merge($empCompany,$adminCompanyQuery)))->get();
                $docketFields   =   SentDocketsValue::where('sent_docket_id',$sentDocket->id)->get();
                // return view('pdfTemplate.docketForward',compact('sentDocket','company','docketFields'));
                $pdf = PDF::loadView('pdfTemplate.docketForward',compact('sentDocket','company','docketFields'))->setOptions(['dpi'=> 150,'isRemoteEnabled'=>true]);
                $pdf->setOptions(['dpi' => 150, 'defaultFont' => 'sans-serif', 'isRemoteEnabled' => true]);

                $fileName=preg_replace('/\s+/', '', $sentDocket->docketInfo->title."".str_replace("-","",$sentDocket->formatted_id));
                $output = $pdf->output();

                if(Session::get('company_id') == 1){
                    $gridValuefirstRow = array();
                    if($sentDocket->sentDocketValue){
                        foreach($sentDocket->sentDocketValue as $key=>$sentDocketValue){
                            if($sentDocketValue->docketFieldInfo->docket_field_category_id == 22){
                                $docketGridField = DocketFieldGrid::where('docket_field_id',$sentDocketValue->docket_field_id)->first();
                                $sentDocketGridValue  = DocketFieldGridValue::where('docket_field_grid_id',$docketGridField->id)->where('docket_id',$sentDocket->id)->where('is_email_docket',0)->where('index',0)->first();
                                if (@$docketGridField->preview_value == 1){
                                    $gridValuefirstRow[] = $sentDocketGridValue->value;
                                }
                            }
                        }
                    }
                    if(count($gridValuefirstRow) != 0){
                        $path = base_path($dir.'/'.implode('',$gridValuefirstRow).$fileName.'.pdf');
                    }else{

                        $path = base_path($dir.'/'.$fileName.'.pdf');
                    }
                }else{

                    $path = base_path($dir.'/'.$fileName.'.pdf');
                }

                file_put_contents($path, $output);
            }
        }

        if($selectEmailDocketIds){
            $checkDocketId = array();
            foreach ($selectEmailDocketIds as $selectDocketId) {
                $id_get = EmailSentDocket::where('id', $selectDocketId)->where('company_id', Session::get('company_id'))->pluck('id');
                $checkDocketId[] = $id_get;
            }
            $sentDockets = EmailSentDocket::whereIn('id', array_unique($checkDocketId))->get();

            foreach ($sentDockets as $sentDocket) {
                $approval_type = array();
                foreach ($sentDocket->recipientInfo as $items){
                    $approval_type[] = array(
                        'id' => $items->id,
                        'status' =>$items->status,
                        'email' => $items->emailUserInfo->email,
                        'approval_time' =>$items->approval_time,
                        'name'=>$items->name,
                        'signature'=>AmazoneBucket::url() . $items->signature
                    );
                }
                $docketFields   =   EmailSentDocketValue::where('email_sent_docket_id',$sentDocket->id)->get();
                $docketTimer = SentDcoketTimerAttachment::where('sent_docket_id',$sentDocket->id)->where('type',2)->get();
                $isFromBackend  =   true;
                $pdf = PDF::loadView('pdfTemplate.emailedDocketForward',compact('sentDocket','docketFields','docketTimer','approval_type','isFromBackend'))->setOptions(['dpi'=> 150,'isRemoteEnabled'=>true]);
                $pdf->setOptions(['dpi' => 150, 'defaultFont' => 'sans-serif', 'isRemoteEnabled' => true]);
                $fileName=preg_replace('/\s+/', '', $sentDocket->docketInfo->title."".str_replace("-","",$sentDocket->formatted_id));
                $output = $pdf->output();


                if(Session::get('company_id') == 1){
                    $gridValuefirstRow = array();
                    if($sentDocket->sentDocketValue){
                        foreach($sentDocket->sentDocketValue as $key=>$sentDocketValue){
                            if($sentDocketValue->docketFieldInfo->docket_field_category_id == 22){
                                $docketGridField = DocketFieldGrid::where('docket_field_id',$sentDocketValue->docket_field_id)->first();
                                $sentDocketGridValue  = DocketFieldGridValue::where('docket_field_grid_id',$docketGridField->id)->where('docket_id',$sentDocket->id)->where('is_email_docket',1)->where('index',0)->first();
                                if (@$docketGridField->preview_value == 1){
                                    $gridValuefirstRow[] = $sentDocketGridValue->value;
                                }
                            }
                        }
                    }
                    if(count($gridValuefirstRow) != 0){
                        $path = base_path($dir.'/'.implode('',$gridValuefirstRow).$fileName.'.pdf');
                    }else{

                        $path = base_path($dir.'/'.$fileName.'.pdf');
                    }
                }else{

                    $path = base_path($dir.'/'.$fileName.'.pdf');
                }


                file_put_contents($path, $output);
            }
        }

        $files = base_path($dir.'/');
        $now = Carbon::now();
        $zipper = new \Chumper\Zipper\Zipper;
        $zipper->make('zipFile/'.$now.'/record-time-docktes.zip')->add($files)->close();
        File::deleteDirectory(base_path($dir));

        return redirect('zipFile/'.$now.'/record-time-docktes.zip');

    }



    public function makePdfEmailedDocket(Request $request){

//        $sentDockets    =   EmailSentDocket::where('company_id',Session::get('company_id'))->take(10)->get();
        $selectDocketIds = $request->docketId;
        $checkDocketId = array();
        foreach ($selectDocketIds as $selectDocketId) {
            $id_get = EmailSentDocket::where('id', $selectDocketId)->where('company_id', Session::get('company_id'))->pluck('id');
            $checkDocketId[] = $id_get;
        }
        $sentDockets = EmailSentDocket::whereIn('id', array_unique($checkDocketId))->get();

        $dir =  'files/docket/pdf/'.Carbon::now();
        $result = File::makeDirectory($dir);
        foreach ($sentDockets as $sentDocket) {
            $docketFields   =   EmailSentDocketValue::where('email_sent_docket_id',$sentDocket->id)->get();
            $pdf = PDF::loadView('pdfTemplate.emailedDocketForward',compact('sentDocket','docketFields'))->setOptions(['dpi'=> 150,'isRemoteEnabled'=>true]);
            $pdf->setOptions(['dpi' => 150, 'defaultFont' => 'sans-serif', 'isRemoteEnabled' => true]);
            $fileName=preg_replace('/\s+/', '-', $sentDocket->docketInfo->title."-".$sentDocket->formatted_id);
            $output = $pdf->output();
            $path = public_path($dir.'/'.$fileName.'.pdf');
            file_put_contents($path, $output);
        }

        $files = public_path($dir.'/');
        $now = Carbon::now();
        $zipper = new \Chumper\Zipper\Zipper;
        $zipper->make($now.'/email-dockets.zip')->add($files)->close();
        File::deleteDirectory(public_path($dir));

        return redirect($now.'/email-dockets.zip');

    }

    public function makePdfInvoice(Request $request){
        $selectInvoiceIds = $request->invoiceId;
        $selectEmailInvoice = $request->emailInvoiceId;

        if($selectInvoiceIds || $selectEmailInvoice){
            $dir =  'files/invoice/pdf/'.Carbon::now();
            $result = File::makeDirectory($dir);


            if($selectEmailInvoice){
                $checkInvoiceId = array();
                foreach ($selectEmailInvoice as $selectInvoiceId) {
                    $id_get = EmailSentInvoice::where('id', $selectInvoiceId)->where('company_id', Session::get('company_id'))->pluck('id');
                    $checkInvoiceId[] = $id_get;
                }
                $sentInvoices = EmailSentInvoice::whereIn('id', array_unique($checkInvoiceId))->get();

                foreach ($sentInvoices as $sentInvoice) {
                    $sentInvoiceValueQuery    =    EmailSentInvoiceValue::where('email_sent_invoice_id',$selectEmailInvoice)->get();
                    $sentInvoiceValue    = array();
                    foreach ($sentInvoiceValueQuery as $row){
                        $subFiled   =   [];
                        $sentInvoiceValue[]    =     array('id' => $row->id,
                            'invoice_field_category_id'  =>  $row->invoiceFieldInfo->invoice_field_category_id,
                            'invoice_field_category' =>  $row->label,
                            'label' => $row->label,
                            'value' => $row->value,
                            'subFiled' => $subFiled);
                    }
                    $invoice     =     EmailSentInvoice::where('id',$selectEmailInvoice)->first();
                    $companyDetails =   Company::where('id',$sentInvoice->company_id)->first();
                    $invoiceDescription     =    EmailSentInvoiceDescription::where('email_sent_invoice_id',$sentInvoice->id)->get();
                    $invoiceSetting =   array();
                    //check invoice payment info
                    if(EmailSentInvoicePaymentDetail::where('email_sent_invoice_id',$sentInvoice->id)->count()==1){
                        $invoiceSetting =   EmailSentInvoicePaymentDetail::where('email_sent_invoice_id',$sentInvoice->id)->first();
                    }

                    $pdf = PDF::loadView('pdfTemplate.emailedInvoiceForward',compact('sentInvoiceValue','companyDetails','sentInvoice','invoiceDescription','invoiceSetting','invoice'));
                    $pdf->setOptions(['dpi' => 150, 'defaultFont' => 'sans-serif', 'isRemoteEnabled' => true]);
                    $fileName=preg_replace('/\s+/', '-einv-',$sentInvoice->invoiceInfo->title."-".$sentInvoice->formatted_id);
                    $output = $pdf->output();
                    $path = base_path($dir.'/'.$fileName.'.pdf');
                    file_put_contents($path, $output);
                }

            }

            if($selectInvoiceIds){

                $checkInvoiceId = array();
                foreach ($selectInvoiceIds as $selectInvoiceId) {
                    $id_get = SentInvoice::where('id', $selectInvoiceId)->pluck('id');
                    $checkInvoiceId[] = $id_get;
                }
                $sentInvoices = SentInvoice::whereIn('id', array_unique($checkInvoiceId))->get();
                foreach ($sentInvoices as $sentInvoice) {
                    $invoiceDescription     =    SentInvoiceDescription::where('sent_invoice_id',$sentInvoice->id)->get();
                    $sentInvoiceValueQuery    =    SentInvoiceValue::where('sent_invoice_id',$sentInvoice->id)->get();
                    $sentInvoiceValue    = array();
                    foreach ($sentInvoiceValueQuery as $row){
                        $subFiled   =   [];
                        $sentInvoiceValue[]    =     array('id' => $row->id,
                            'invoice_field_category_id'  =>  $row->invoiceFieldInfo->invoice_field_category_id,
                            'invoice_field_category' =>  $row->label,
                            'label' => $row->label,
                            'value' => $row->value,
                            'subFiled' => $subFiled);
                    }

                    $invoiceSetting =   array();
                    if(SentInvoicePaymentDetail::where('sent_invoice_id',$selectInvoiceIds)->count()==1){
                        $invoiceSetting =   SentInvoicePaymentDetail::where('sent_invoice_id',$sentInvoice->id)->first();
                    }
                    $pdf = PDF::loadView('pdfTemplate.invoiceForward',compact('invoiceSetting','sentInvoice','invoiceDescription','sentInvoiceValue'));
                    $pdf->setOptions(['dpi' => 150, 'defaultFont' => 'sans-serif', 'isRemoteEnabled' => true]);
                    $fileName=preg_replace('/\s+/', '-inv-',$sentInvoice->invoiceInfo->title."-".$sentInvoice->formatted_id);
                    $output = $pdf->output();
                    $path = base_path($dir.'/'.$fileName.'.pdf');
                    file_put_contents($path, $output);
                }
            }
            $files = base_path($dir.'/');
            $now = Carbon::now();
            $zipper = new \Chumper\Zipper\Zipper;
            $zipper->make('zipFile/'.$now.'/record-time-invoices.zip')->add($files)->close();
            File::deleteDirectory(base_path($dir));
            return redirect('zipFile/'.$now.'/record-time-invoices.zip');
        }
    }

    public function makePdfEmailedInvoice(Request $request){
        $selectEmailInvoice = $request->emailInvoiceId;
        $checkInvoiceId = array();
        foreach ($selectEmailInvoice as $selectInvoiceId) {
            $id_get = EmailSentInvoice::where('id', $selectInvoiceId)->where('company_id', Session::get('company_id'))->pluck('id');
            $checkInvoiceId[] = $id_get;
        }
        $sentInvoices = EmailSentInvoice::whereIn('id', array_unique($checkInvoiceId))->get();
        $dir =  'files/invoice/pdf/'.Carbon::now();
        $result = File::makeDirectory($dir);
        foreach ($sentInvoices as $sentInvoice) {
            $sentInvoiceValueQuery    =    EmailSentInvoiceValue::where('email_sent_invoice_id',$selectEmailInvoice)->get();
            $sentInvoiceValue    = array();
            foreach ($sentInvoiceValueQuery as $row){
                $subFiled   =   [];
                $sentInvoiceValue[]    =     array('id' => $row->id,
                    'invoice_field_category_id'  =>  $row->invoiceFieldInfo->invoice_field_category_id,
                    'invoice_field_category' =>  $row->label,
                    'label' => $row->label,
                    'value' => $row->value,
                    'subFiled' => $subFiled);
            }
            $invoice     =     EmailSentInvoice::where('id',$selectEmailInvoice)->first();
            $companyDetails =   Company::where('id',$sentInvoice->company_id)->first();
            $invoiceDescription     =    EmailSentInvoiceDescription::where('email_sent_invoice_id',$sentInvoice->id)->get();
            $invoiceSetting =   array();
            //check invoice payment info
            if(EmailSentInvoicePaymentDetail::where('email_sent_invoice_id',$sentInvoice->id)->count()==1){
                $invoiceSetting =   EmailSentInvoicePaymentDetail::where('email_sent_invoice_id',$sentInvoice->id)->first();
            }

            $pdf = PDF::loadView('pdfTemplate.emailedInvoiceForward',compact('sentInvoiceValue','companyDetails','sentInvoice','invoiceDescription','invoiceSetting','invoice'));
            $pdf->setOptions(['dpi' => 150, 'defaultFont' => 'sans-serif', 'isRemoteEnabled' => true]);
            $fileName=preg_replace('/\s+/', '-einv-',$sentInvoice->invoiceInfo->title."-".$sentInvoice->formatted_id);
            $output = $pdf->output();
            $path = base_path($dir.'/'.$fileName.'.pdf');
            file_put_contents($path, $output);


        }
        $files = base_path($dir.'/');
        $now = Carbon::now();
        $zipper = new \Chumper\Zipper\Zipper;
        $zipper->make('zipFile/'.$now.'/record-time-invoices.zip')->add($files)->close();
        File::deleteDirectory(base_path($dir));
        return redirect('zipFile/'.$now.'/record-time-invoices.zip');


    }

    public function downloadViewemailed($id){
        ini_set('memory_limit','256M');
        set_time_limit(0);
        $sentDocket     =   EmailSentDocket::findOrFail($id);
        $approval_type = array();
        foreach ($sentDocket->recipientInfo as $items){
            $approval_type[] = array(
                'id' => $items->id,
                'status' =>$items->status,
                'email' => $items->emailUserInfo->email,
                'approval_time' =>$items->approval_time,
                'name'=>$items->name,
                'signature'=>AmazoneBucket::url() . $items->signature
            );
        }
        $docketTimer = SentDcoketTimerAttachment::where('sent_docket_id',$sentDocket->id)->where('type',2)->get();
        $docketFields   =  EmailSentDocketValue::where('email_sent_docket_id',$sentDocket->id)->get();
        $isFromBackend  =   true;

        // return view('pdfTemplate.emailedDocketForward',compact('sentDocket','docketFields','docketTimer','approval_type','isFromBackend'));
        $pdf = PDF::loadView('pdfTemplate.emailedDocketForward',compact('sentDocket','docketFields','docketTimer','approval_type','isFromBackend'))->setPaper('a4','landscape')->setOptions(['dpi'=> 150,'isRemoteEnabled'=>true,'defaultFont' => 'sans-serif','isHtml5ParserEnabled'=>true]);
        $fileName=preg_replace('/\s+/', '', $sentDocket->docketInfo->title."".$sentDocket->id);
        if(Session::get('company_id') == 1){
            $gridValuefirstRow = array();
            if($sentDocket->sentDocketValue){
                foreach($sentDocket->sentDocketValue as $key=>$sentDocketValue){
                    if($sentDocketValue->docketFieldInfo->docket_field_category_id == 22){
                        $docketGridField = DocketFieldGrid::where('docket_field_id',$sentDocketValue->docket_field_id)->get();
                        foreach($docketGridField as $docketGridFields){
                            $sentDocketGridValue  = DocketFieldGridValue::where('docket_field_grid_id',$docketGridFields->id)->where('docket_id',$sentDocket->id)->where('is_email_docket',1)->first();
                            if (@$docketGridFields->preview_value == 1){
                                $gridValuefirstRow[] = $sentDocketGridValue->value;
                            }
                        }

                    }
                }
            }

            if(count($gridValuefirstRow) != 0){
                return $pdf->download(implode('',$gridValuefirstRow).$fileName.'.pdf');
            }else{
                return $pdf->download($fileName.'.pdf');
            }
        }else{
            return $pdf->download($fileName.'.pdf');
        }

    }

    public function downloadViewInvoice($id){
      $sentInvoice     =   SentInvoice::findOrFail($id);
      $invoiceDescription     =    SentInvoiceDescription::where('sent_invoice_id',$sentInvoice->id)->get();
      $sentInvoiceValueQuery    =    SentInvoiceValue::where('sent_invoice_id',$id)->get();
      $sentInvoiceValue    = array();
        foreach ($sentInvoiceValueQuery as $row){
              $subFiled   =   [];
              $sentInvoiceValue[]    =     array('id' => $row->id,
                  'invoice_field_category_id'  =>  $row->invoiceFieldInfo->invoice_field_category_id,
                  'invoice_field_category' =>  $row->label,
                  'label' => $row->label,
                  'value' => $row->value,
                  'subFiled' => $subFiled);
        }

      $invoiceSetting =   array();
      //check invoice payment info
      if(SentInvoicePaymentDetail::where('sent_invoice_id',$id)->count()==1){
          $invoiceSetting =   SentInvoicePaymentDetail::where('sent_invoice_id',$id)->first();
      }
        if (SentInvoice::where('id',$id)->first()->theme_document_id == 0){
            $pdf = PDF::loadView('pdfTemplate.invoiceForward',compact('invoiceSetting','sentInvoice','invoiceDescription','sentInvoiceValue'));
            $pdf->setOptions(['dpi' => 150, 'defaultFont' => 'sans-serif', 'isRemoteEnabled' => true]);
            $fileName=preg_replace('/\s+/', '-',$sentInvoice->invoiceInfo->title."-".$sentInvoice->id);
            return $pdf->download($fileName.'.pdf');
        }else{
            $theme = DocumentTheme::where('id', SentInvoice::where('id',$id)->first()->theme_document_id)->first();
            $pdf = PDF::loadView('dashboard/company/theme/'.$theme->slug.'/pdf',compact('invoiceSetting','sentInvoice','invoiceDescription','sentInvoiceValue'));
            $pdf->setOptions(['dpi' => 150, 'defaultFont' => 'sans-serif', 'isRemoteEnabled' => true]);
            $fileName=preg_replace('/\s+/', '-',$sentInvoice->invoiceInfo->title."-".$sentInvoice->id);
            return $pdf->download($fileName.'.pdf');


        }




    }

    public function downloadViewInvoiceEmail($id){
          $sentInvoice     =   EmailSentInvoice::findOrFail($id);
          $sentInvoiceValueQuery    =    EmailSentInvoiceValue::where('email_sent_invoice_id',$id)->get();
          $sentInvoiceValue    = array();
          foreach ($sentInvoiceValueQuery as $row){
              $subFiled   =   [];
              $sentInvoiceValue[]    =     array('id' => $row->id,
                  'invoice_field_category_id'  =>  $row->invoiceFieldInfo->invoice_field_category_id,
                  'invoice_field_category' =>  $row->label,
                  'label' => $row->label,
                  'value' => $row->value,
                  'subFiled' => $subFiled);
          }

          $invoice     =     EmailSentInvoice::where('id',$id)->first();
          $companyDetails =   Company::where('id',$invoice->company_id)->first();
          $invoiceDescription     =    EmailSentInvoiceDescription::where('email_sent_invoice_id',$invoice->id)->get();
          $invoiceSetting =   array();
          //check invoice payment info
          if(EmailSentInvoicePaymentDetail::where('email_sent_invoice_id',$id)->count()==1){
              $invoiceSetting =   EmailSentInvoicePaymentDetail::where('email_sent_invoice_id',$id)->first();
          }

          $pdf = PDF::loadView('pdfTemplate.emailedInvoiceForward',compact('sentInvoiceValue','companyDetails','invoice','invoiceDescription','invoiceSetting'));
          $pdf->setOptions(['dpi' => 150, 'defaultFont' => 'sans-serif', 'isRemoteEnabled' => true]);
          $fileName=preg_replace('/\s+/', '-',$sentInvoice->invoiceInfo->title."-".$sentInvoice->id);
          return $pdf->download($fileName.'.pdf');


    }
    public function companySendDocket(Request $request){
        $key=$request->key;
        $employees      =   Employee::where('company_id',Session::get('company_id'))->get();
        $dockets    =   Docket::where('company_id',Session::get('company_id'))->orderBy('created_at','desc')->get();
        $docketField= DocketField::where('docket_id',$request->docketTemplate)->get();
        return view('dashboard.company.docketManager.docket.sendDocket',compact('dockets','employees','docketField','key'));

    }

    public function docketTemplete($id){
        $docketField= DocketField::where('docket_id',$id)->orderBy('order','asc')->get();
        return view('dashboard.company.docketManager.sendDocketTemplate',compact('dockets','employees','docketField'));


    }

    public function companySendInvoice(Request $request){
        $employees      =   Employee::where('company_id',Session::get('company_id'))->get();
        $invoices    =   Invoice::where('company_id',Session::get('company_id'))->orderBy('created_at','desc')->get();
        $invoiceField= InvoiceField::where('invoice_id',$request->docketTemplate)->get();
        return view('dashboard.company.invoiceManager.invoices.sendInvoice',compact('employees','invoices','invoiceField'));
    }

    public function invoiceTemplate($id){
        $invoiceField =InvoiceField::where('invoice_id',$id)->orderBy('order','asc')->get();
        $invoices    =   Invoice::where('id',$id)->orderBy('created_at','desc')->first();
        return view('dashboard.company.invoiceManager.invoices.sendInvoiceTemplate',compact('invoiceField','invoices'));
    }

    public function allUser(){

        $activeUser = User::where("isActive", 1)->orderBy('id', 'desc')->get();


//        $something = User::where("isActive", 1)->get(['id', 'updated_at'])->groupBy(function($date) {
//            return Carbon::parse($date->updated_at)->format('M');
//        });
//        dd($something);




        return view('dashboard.company.allUser', compact('activeUser'));
    }


    public function exportSql()
    {
        $sendDocketValue= SentDocketsValue::orderBy('order','asc')->get();
    }


    //Company Document Theme
    public function companyDocumentTheme()
    {
        $themes = DocumentTheme::where('is_active', 1)->orderBy('created_at','DESC')->get();
        $company = Company::where('id', Session::get('company_id'))->first();
        return view('dashboard.company.docketManager.documentTheme.index',compact('themes', 'company'));
    }
    public function companyDocumentThemeScreensot(Request $request){
        $themes = DocumentTheme::where('is_active', 1)->where('id',$request->themeId)->orderBy('created_at','DESC')->first();
        return view('dashboard.company.docketManager.documentTheme.screenshot',compact('themes', 'company'));

    }
    public function companyDocketThemePreview(Request $request){
        $themes = DocumentTheme::where('is_active', 1)->where('id',$request->themeId)->orderBy('created_at','DESC')->first();
        return view('dashboard.company.docketManager.documentTheme.docketThemePreview',compact('themes', 'company'));

    }

    public function purchaseTheme(Request $request)
    {
        $theme = DocumentTheme::where('id', $request->id)->first();
        $company = Company::where('id', Session::get('company_id'))->first();
        Stripe::setApiKey('sk_test_nyksk5lrV3jOZmX8K7V2ltaN');
        $stripe_customer = Customer::retrieve($company->stripe_user);

        $card = $stripe_customer->sources->all(array('limit'=>3, 'object' => 'card'))->data;
        $card1 = $stripe_customer->sources->retrieve($card[0]->id);

        $charge = \Stripe\Charge::create(array(
          "amount" => $theme->price * 100,
          "currency" => "aud",
          "customer" => $stripe_customer->id,
          "source" => $card1->id,
        ));

        $themePurchase = new ThemePurchase();

        $themePurchase->theme_id = $theme->id;
        $themePurchase->company_id = $company->id;
        $themePurchase->charge_id = $charge->id;

        $themePurchase->save();

        flash('Theme purchased successfully.','success');
        return redirect()->back();
    }

    public function docketYesNoExplanation(Request $request){
        $this->validate($request,['docket_field_id'=>'required','id'=>'required','explanation'=>'required']);
        $saveYesNoExpalnation = YesNoFields::findOrFail($request->id);
        $saveYesNoExpalnation->explanation = $request->explanation;
        $saveYesNoExpalnation->save();

        if(YesNoDocketsField::where('yes_no_field_id',$request->id)->count()==0):
            $subDocketFields   =   $this->insertSubDocketTempalte($request);
        endif;
        $subDocketFields=  YesNoDocketsField::where('yes_no_field_id',$request->id)->orderBy('order','asc')->get();

        if (YesNoFields::where('id',$request->id)->where('docket_field_id',$request->docket_field_id)->count()==1){
            $yesNoExplanations = YesNoFields::where('id',$request->id)->where('docket_field_id',$request->docket_field_id)->first();
        }
        $tempSubDocket = YesNoDocketsField::where('yes_no_field_id',$request->id)->orderBy('order','asc')->get();
        return view('dashboard.company.docketManager.yesNoExplanation',compact('yesNoExplanations','subDocketFields','tempSubDocket'));
    }

    public function yesNoExplanationUncheck(Request $request){
        $this->validate($request,['docket_field_id'=>'required','id'=>'required','explanation'=>'required']);
        $saveYesNoExpalnation = YesNoFields::findOrFail($request->id);
        $saveYesNoExpalnation->explanation = $request->explanation;
        $saveYesNoExpalnation->save();
    }
    public function insertSubDocketTempalte(Request $request){
        $subDocketFields   =   YesNoDocketsField::insert ([
            ['yes_no_field_id'    =>  $request->id,
                'docket_field_category_id' =>  '1',
                'order' =>  1,
                'required'=>1,
                'csv_header'=>'Short Text',
                 'is_show'=>1,
                'label' => 'Short Text'],
            ['yes_no_field_id'    =>  $request->id,
                'docket_field_category_id' =>  '5',
                'order' =>  2,
                'required'=>1,
                'is_show'=>1,
                'csv_header'=>'Images',
                'label' => 'Images'],

        ]);

        return $subDocketFields;
    }

    public function addSubDocketField(Request $request){
        $this->validate($request,['fieldType'   => 'required']);
            $order  =   YesNoDocketsField::where('yes_no_field_id',$request->yes_no_field_id)->count();
            $fieldDetails   =   DocketFiledCategory::where('id',$request->fieldType)->firstOrFail();
                $newField               =   new YesNoDocketsField();
                $newField->yes_no_field_id    =   $request->yes_no_field_id;
                $newField->docket_field_category_id =   $request->fieldType;
                $newField->required =   $request->required;
                $newField->order                    =   $order+1;
                $newField->label                    =   $fieldDetails->title;
                $newField->csv_header                    =   $fieldDetails->title;
               $newField->is_show                    =   1;
                $newField->save();
           return $this->defaultSubDocketElementTemplate( $request,$newField);


    }

    public function defaultSubDocketElementTemplate(Request $request,$newField){
        $item = YesNoDocketsField::where('docket_field_category_id',$request->fieldType)->where('id',$newField->id)->firstOrFail();
//        $item = YesNoDocketsField::where('yes_no_field_id',$request->id)->get();
        return view('dashboard.company.docketManager.subDocketElementTemplate',compact('item'));
    }
    public function subDocketFieldLabelUpdate(Request $request){
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        YesNoDocketsField::where('id',$request->pk)->update(['label'  => $request->value]);
    }

    public function deleteSubDocketField(Request $request){
        $this->validate($request,['fieldId'   => 'required']);
        if (YesNoDocketsField::where('yes_no_field_id',$request->yesnoFieldId)->count() == 1){
            return response()->json(array("status" => false));
        }else{
            YesNoDocketsField::where('id',$request->fieldId)->delete();
        }
    }

    public function subDocketFieldUpdatePosition(Request $request){
        $this->validate($request,['params'   => 'required']);
            for($i=0;$i<count($request->params);$i++):
                YesNoDocketsField::where('id',$request->params[$i])->update(['order'=>$i+1]);
            endfor;


    }


    public function subDocketRequiredField(Request $request){
        $this->validate($request,['data'   => 'required|Int','requiredDocketFieldId'   => 'required']);
        $docketField = YesNoDocketsField::where('id',$request->requiredDocketFieldId)->firstOrFail();
        $docketField->required = $request->data;
        $docketField->save();
    }

    public  function UpdateSubDocketColour(Request $request){
        $this->validate($request,['id'   => 'required','colour'   => 'required']);
        $yesNoDocketField = YesNoFields::where('id',$request->id)->firstOrFail();
        $yesNoDocketField->colour = $request->colour;
        $yesNoDocketField->save();
        $colours =$request->colour;
        $ids = $request->id;
        return response()->json(['status' => true, 'colour' => $colours,'id'=>$ids]);


    }

    public function updateLabelType(Request $request){
        $this->validate($request,['docket_field_id'   => 'required','label_type'   => 'required']);
        $updateLabelType = YesNoFields::where('docket_field_id',$request->docket_field_id)->get();
        foreach ($updateLabelType as $items){
            $yesNoDocketField = YesNoFields::where('id',$items->id)->firstOrFail();
            $yesNoDocketField->label_type = $request->label_type;
            $yesNoDocketField->save();
        }
        return response()->json(['status' => true]);

    }

    public  function  YesNoIconImage(Request $request){
       $yesNoExplanations = YesNoFields::where('id',$request->id)->where('docket_field_id',$request->docket_field_id)->first();
        return view('dashboard.company.docketManager.labelType',compact('yesNoExplanations'));
    }

    public function yesNoIconImageUpdate(Request $request){
        $this->validate($request,['id'   => 'required','icon_image'   => 'required']);
        $updateLabelType = YesNoFields::where('id',$request->id)->first();
        $updateLabelType->icon_image = $request->icon_image;
        $updateLabelType->save();
        return redirect()->back();

    }


//    public function search(Request $request){
//        $users = User::search($request()->all())->get();
//        dd($users);
//    }


    public function updateFieldNumber(Request $request){
        $this->validate($request,['pk'   => 'required']);
        $updateDocketFeieldNumber = DocketFieldNumber::where('id',$request->pk)->first();
        if ($request->name == 1){
            $updateDocketFeieldNumber->min = $request->value;
        }elseif ($request->name == 2) {
            $updateDocketFeieldNumber->max = $request->value;

        }elseif ($request->name == 3){
            $updateDocketFeieldNumber->tolerance = $request->value;
        }
        $updateDocketFeieldNumber->save();



    }


    public function docketImageNameFieldRequired(Request $request){
        $this->validate($request,['value'   => 'required|Int','requiredImageNameFieldId'   => 'required']);
        if(DocketFieldSignatureOption::where('id',$request->requiredImageNameFieldId)->count()!=0){
            $docketField = DocketFieldSignatureOption::where('id',$request->requiredImageNameFieldId)->firstOrFail();
            $docketField->name = $request->value;
            $docketField->save();
        }else{
            $addDocketFieldSignatureOption = new DocketFieldSignatureOption();
            $addDocketFieldSignatureOption->name = $request->value;
            $addDocketFieldSignatureOption->docket_field_id =  $request->requiredImageNameFieldId;
            $addDocketFieldSignatureOption->save();
        }


    }

    public function docketDateTimeRequired(Request $request){
        $this->validate($request,['time'   => 'required|Int','docketDatefieldId'   => 'required']);
        if(DocketFieldDateOption::where('id',$request->docketDatefieldId)->count()!=0){
            $docketField = DocketFieldDateOption::where('id',$request->docketDatefieldId)->withTrashed()->firstOrFail();
            $docketField->time = $request->time;
            $docketField->save();
        }else{
            $adddocketFieldDateOption = new DocketFieldDateOption();
            $adddocketFieldDateOption->time = $request->time;
            $adddocketFieldDateOption->docket_field_id =  $request->docketDatefieldId;
            $adddocketFieldDateOption->save();
        }
    }


    public function designMobileViewInvoice($id){
        $invoiceFields=  InvoiceField::where('invoice_id',$id)->orderBy('order','asc')->get();
        return view('dashboard.company.invoiceManager.mobileView', compact('invoiceFields'));

    }

    public function saveDefaultRecipient(Request $request)
    {
        if ($request->type == 1) {
            //rt user
            $this->validate($request, ['templateType' => 'required|Int', 'templateId' => 'required', 'id' => 'required']);
            foreach ($request->id as $recipient) {
                if (DefaultRecipient::where('type', 1)->where('user_type', 1)->where('recipient_id', $recipient)->where('template_id',$request->templateId)->count() == 0) {
                    $defaultRecipent = new DefaultRecipient();
                    $defaultRecipent->template_id = $request->templateId;
                    $defaultRecipent->type = $request->templateType;
                    $defaultRecipent->user_type = $request->type;
                    $defaultRecipent->recipient_id = $recipient;
                    $defaultRecipent->save();
                }
            }
        } elseif ($request->type == 2) {
            //emailUser
            $this->validate($request, ['templateType' => 'required|Int', 'templateId' => 'required', 'emailId' => 'required']);
            foreach ($request->emailId as $recipient) {
                if (DefaultRecipient::where('type', 1)->where('user_type', 2)->where('recipient_id', $recipient)->where('template_id',$request->templateId)->count() == 0) {
                    $defaultRecipent = new DefaultRecipient();
                    $defaultRecipent->template_id = $request->templateId;
                    $defaultRecipent->type = $request->templateType;
                    $defaultRecipent->user_type = $request->type;
                    $defaultRecipent->recipient_id = $recipient;
                    $defaultRecipent->save();
                }
            }
        }
        flash('Default Recipient Added Successfully.', 'success');
        return redirect()->back();
    }

    public function deleteDefaultRecipient(Request $request){
        $this->validate($request, ['template_id' => 'required|Int', 'user_type' => 'required', 'type' => 'required', 'recipient_id' => 'required']);
        DefaultRecipient::where('template_id',$request->template_id)->where('user_type',$request->user_type)->where('type',$request->type)->where('recipient_id',$request->recipient_id)->delete();
        flash('Default Rercipient Delete Successfully.', 'success');
        return redirect()->back();
    }



    public function prefillerDefaultCheckMark(Request $request){

         $prefillerId[] = $request->value;


        if ( DocketField::where('id',$request->docketFieldId)->where('docket_id',$request->docket_id)->count()==0 ){
            return response()->json(array("status" => false, "messages" =>"Invalid Request!"));

        }else{
            if ($request->checked == 1){

                $docketFiled = DocketField::where('id',$request->docketFieldId)->where('docket_id',$request->docket_id)->first();
                if ($docketFiled->default_prefiller_id == null){
                    DocketField::where('id',$request->docketFieldId)->where('docket_id',$request->docket_id)->update(['default_prefiller_id'=>serialize($prefillerId)]);
                }else{
                    $oldData = unserialize($docketFiled->default_prefiller_id);
                     array_push($oldData, $request->value);
                    DocketField::where('id',$request->docketFieldId)->where('docket_id',$request->docket_id)->update(['default_prefiller_id'=>serialize($oldData)]);
                }

                return response()->json(array("status" => true));
            }


            else{
                $docketFiled = DocketField::where('id',$request->docketFieldId)->where('docket_id',$request->docket_id)->first();
                $updateDefaultPrefiller = unserialize($docketFiled->default_prefiller_id);
                $finalArray = array_diff($updateDefaultPrefiller,$prefillerId);
                if (count($finalArray)== 0){
                    DocketField::where('id',$request->docketFieldId)->where('docket_id',$request->docket_id)->update(['default_prefiller_id'=>null]);

                }else{
                    DocketField::where('id',$request->docketFieldId)->where('docket_id',$request->docket_id)->update(['default_prefiller_id'=>serialize($finalArray)]);

                }

                return response()->json(array("status" => true));
            }


        }
    }


    public  function prefillerCheckMark(Request $request){
        $docketPrefiller = DocketPrefiller::where('company_id',Session::get('company_id'))->where('is_integer',$request->is_integer)->get();
        $label = "";
        foreach ($docketPrefiller as $items){
            $label .= '<option value="'.$items->id.'">'.$items->title.'</option>';
        }
        $finalView = '<div class="col-md-1"><div class="form-group float-left"><label style="margin: 9px 0 0 0;font-size: 15px;" class="control-label" for="title" >Prefiller:</label></div></div><div class="col-md-11" style="padding-top: 19px;"><select style="    margin-bottom: -9px;" class="form-control " name="typeValue" id="typeValue" >'.$label.'</select></div>';
        return response()->json(array("status" => true, "finalView" =>$finalView));

    }

    public  function prefillerCheckMarkSingle(Request $request){
        $docketPrefiller = DocketPrefiller::where('company_id',Session::get('company_id'))->where('is_integer',$request->is_integer)->get();
        $label = "";
        foreach ($docketPrefiller as $items){
            $label .= '<option value="'.$items->id.'">'.$items->title.'</option>';
        }
        $finalView = '<div class="col-md-1"><div class="form-group float-left"><label style="margin: 9px 0 0 0;font-size: 15px;" class="control-label" for="title" >Prefiller:</label></div></div><div class="col-md-11" style="padding-top: 19px; padding-left: 28px;"><select style="    margin-bottom: -9px;" class="form-control typeValueSingle" name="typeValue"  >'.$label.'</select></div>';
        return response()->json(array("status" => true, "finalView" =>$finalView));

    }

    public function checkParentPrefiller(Request $request)
    {
        if ($request->is_integer== 0){
            $docketprefiller = DocketFiledPreFiller::where('docket_field_id', $request->docket_field_id)->get();
            $treeArray = array();
            foreach ($docketprefiller as $test) {
                $treeArray[] = array(
                    'id' => $test->id,
                    'parent_id' => $test->root_id,
                    'name' => $test->value,
                    'slug' => str_slug($test->value),
                    'docket_field_id' => $test->docket_field_id,
                    'index' => $test->index,
                );
            }
            $txtTree[0]="";
            $txtTrees[0]="";
            foreach($treeArray as $branch){
                if(isset($txtTree[$branch['parent_id']])) {
                    $txtTree[$branch['id']] = $txtTree[$branch['parent_id']] . $branch['slug'] . "/";
                    $txtTrees[$branch['id']]  =  $branch['index'];
                }
            }


            $datas = array();
            if(@$txtTree){
                foreach ($txtTree as $key => $value){
                    foreach ($txtTrees as $keys => $values) {
                        if ($key != 0) {
                            if ($keys == $key ){
                                $datas[] = array(
                                    "id" => $key,
                                    "value" => rtrim($value, '/'),
                                    "space" => str_repeat('&nbsp;', count(explode('/', $value)) - 2),
                                    'name' => array_slice(explode('/', $value), -2, 1),
                                     'index' => $values
                                );
                            }

                        }
                    }
                }
            }



            $data= (new Collection($datas))->sortBy('value');
            $selectValue = "";
            foreach ($data as $items){
                $selectValue .= '<option value="'.$items['id'].'"dataindex="'.$items['index'].'" >'.'/'.$items['value'].'</option>';
            }

            $finalSelectParentValue = '<div class="col-md-1"><div class="form-group float-left"><label style="font-size: 15px;" class="control-label" for="title">Parent:</label></div></div><div class="col-md-11"><div class="form-group float-right"><select style="    margin-bottom: -9px;" class="form-control" name="parent" id="parentid"><option value="0"  dataindex="0" >/</option> '.$selectValue.'</select></div></div>';
            return response()->json(array("status" => true, "finalSelectParentValue" =>$finalSelectParentValue));
        }else if ($request->is_integer== 1){
            $finalSelectParentValue = '<div class="col-md-1"><div class="form-group float-left"><label style="font-size: 15px;" class="control-label" for="title">Parent:</label></div></div><div class="col-md-11"><div class="form-group float-right"><select style="    margin-bottom: -9px;" class="form-control" name="parent" id="parentid"><option value="0" dataindex="0">/</option></select></div></div>';
            return response()->json(array("status" => true, "finalSelectParentValue" =>$finalSelectParentValue));
        }




    }

    public function gridTable($key)
    {

        if (Session::get('company_id')==1){
            $categoryId = [1,2,3,4,5,6,8,9,14,21,26,20,29];

        }else{
            $categoryId = [1,2,3,4,5,6,8,9,14,21,26,20,29];

        }

        $items = DocketFiledCategory::whereIn('id',$categoryId )->get();
        $column = $key;
        for ($j = 0; $j < $column; $j++) {
            $td = '<td style="    border-right: 1px solid #ddd;">';
            $select = '<select style=   " margin: 0px 52px 0px 1px;    min-width: 95px;" class ="form-control"';
            $name = "name=";
            $end = '>';
            //echo $td.$select.'name="field_cat_ids'.$j+1.'"';
            echo  $td.$select.$name.($j+1).$end;
           // echo '<select class="form-control" name="field_cat_ids">';
            foreach ($items as $item){
                echo '<option value="'.$item->id.'">';
                echo $item->title;
                echo '</option>';
            }
            echo '<input style="background-color: #fbfcfb;border: 1px solid #E7EAF0;text-indent: 14px;    margin-top: 16px;"  disabled class="form-control"></ul>';
            echo '</td>';

        }
    }

    public function gridTableSave(Request $request)
    {
        if($request->number_of_column > 0) {

            $docket_field_category = DocketFiledCategory::find($request->grid_id);
            $existing_docket_fields_count = DocketField::where('docket_id', $request->docket_id)->withTrashed()->count();

            //dd($request->all());

            $docket_field = new DocketField();
            $docket_field->docket_id = $request->docket_id;
            $docket_field->docket_field_category_id = $request->grid_id;
            $docket_field->order = $existing_docket_fields_count + 1;
            $docket_field->label = $docket_field_category->title;
            $docket_field->csv_header = $docket_field_category->title;
            $docket_field->is_show = 1;
            $docket_field->required = 0;

            if($docket_field->save()) {

                $count = $request->number_of_column;
                $field_ids = array();
                for ($i = 0; $i < $count; $i++) {
                    $ids = $request[$i + 1];
                    array_push($field_ids, $ids);
                }

                $i = 0;
                foreach ($field_ids as $id) {
                    $field = DocketFiledCategory::where('id', $id)->first();
                    $docket_grid_field = new DocketFieldGrid();
                    $docket_grid_field->docket_field_id = $docket_field->id;
                    $docket_grid_field->docket_field_category_id = $field->id;
                    $docket_grid_field->order = ++$i;
                    $docket_grid_field->label = $field->title;
                    if($docket_grid_field->save()){
                        $normalArray = array();
                        if ($field->id == 20 ){
                            $normalArray[] = array(
                                'csvHeader' =>"From",
                                'label' => "From",
                                'id'=>$docket_grid_field->id,
                                'isShow'=>"1",
                            );
                            $normalArray[] = array(
                                'csvHeader' =>"To",
                                'label' => "To",
                                'id'=>$docket_grid_field->id,
                                'isShow'=>"1",

                            );
                            $normalArray[] = array(
                                'csvHeader' =>"Total Break",
                                'label' => "Total Break",
                                'id'=>$docket_grid_field->id,
                                'isShow'=>"1",

                            );
                            $normalArray[] = array(
                                'csvHeader' =>"Explanation",
                                'label' => "Explanation",
                                'id'=>$docket_grid_field->id,
                                'isShow'=>"1",
                            );
                            $normalArray[] = array(
                                'csvHeader' =>"Total Hours",
                                'label' => "Total Hours",
                                'id'=>$docket_grid_field->id,
                                'isShow'=>"1",

                            );

                            DocketFieldGrid::where('id',$docket_grid_field->id)->update(['csv_header' => $field->title,'export_value'=>serialize($normalArray), 'is_show' => 1]);
                        }else if($field->id == 8){
                            $normalArray[] = array(
                                'csvHeader' =>"Checked",
                                'label' => "Checked",
                                'id'=>$docket_grid_field->id,
                                'isShow'=>"1",
                            );
                            $normalArray[] = array(
                                'csvHeader' =>"Unchecked",
                                'label' => "Unchecked",
                                'id'=>$docket_grid_field->id,
                                'isShow'=>"1",

                            );
                            DocketFieldGrid::where('id',$docket_grid_field->id)->update(['csv_header' => $field->title,'export_value'=>serialize($normalArray), 'is_show' => 1]);
                        }else{
                            DocketFieldGrid::where('id',$docket_grid_field->id)->update(['csv_header' => $field->title,'export_value'=>serialize($normalArray), 'is_show' => 1]);
                        }
                        $values = array();
                        $newExportMapping = new ExportMapping();
                        $newExportMapping->docket_field_id = $docket_field->id;
                        $newExportMapping->value = serialize($values);
                        $newExportMapping->save();

                    }
                }

                Docket::where('id',$request->docket_id)->update(['created_at'=>Carbon::now()]);

                flash('Modular Grid added successfully', 'success');
                return redirect()->back();
            }
        }
    }

    public function gridTableUpdate(Request $request)
    {
        $this->validate($request,['docket_id'   => 'required', 'docket_field_id' =>  'required','number_of_column'=>'required']);
        if($request->number_of_column > 0) {
            $docket_field = DocketField::find($request->docket_field_id);

            $count = $request->number_of_column;
            $field_ids = array();
            for ($i = 0; $i < $count; $i++) {
                $ids = $request[$i + 1];
                array_push($field_ids, $ids);
            }

            $fields = DocketFiledCategory::whereIn('id', $field_ids)->get();

            $count_existing = DocketFieldGrid::where('docket_field_id', $docket_field->id)->count();

            foreach ($field_ids as $id) {
                $field = DocketFiledCategory::where('id', $id)->first();
                $docket_grid_field = new DocketFieldGrid();
                $docket_grid_field->docket_field_id = $docket_field->id;
                $docket_grid_field->docket_field_category_id = $field->id;
                $docket_grid_field->order = $count_existing + 1;
                $docket_grid_field->label = $field->title;
                $docket_grid_field->csv_header = $field->title;
                $docket_grid_field->is_show = 1;


                $docket_grid_field->save();
            }

            Docket::where('id',$request->docket_id)->update(['created_at'=>Carbon::now()]);

            flash('Modular Grid updated successfully', 'success');
            return redirect()->back();
        }
    }

    public function  gridTableLableUpdate(Request $request)
    {
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        $temp = DocketFieldGrid::find($request->pk);
        $tempDocketId = DocketField::where('id', $temp->docket_field_id)->first();
        $tempDocket     =   Docket::where('id',$tempDocketId->docket_id)->firstOrFail();
        if($tempDocket->company_id==Session::get('company_id')){
           $docket_field_grid =  DocketFieldGrid::find($request->pk);
           $docket_field_grid->label = $request->value;
           if ($docket_field_grid->update()){
               Docket::where('id',$tempDocketId->docket_id)->update(['created_at'=>Carbon::now()]);
           }
        }else{
            echo "<script>alert('Invalid attempt!')</script>";
        }
    }

    public  function gridColumnDelete(Request $request)
    {
        $this->validate($request,['column_id'   => 'required']);
        if (DocketFieldGrid::where('docket_field_id',DocketFieldGrid::find($request->column_id)->docket_field_id)->count() ==1){
            return response()->json(array('status' => false, 'message' => 'invalid error'));

        }else{
            if(SentDocketsValue::where('docket_field_id', DocketFieldGrid::find($request->column_id)->docket_field_id)->count()> 0){
                return response()->json(array('status' => false, 'message' => 'invalid error'));
            }else{
                GridFieldFormula::where('docket_field_grid_id',$request->column_id)->delete();
                DocketFieldGridValue::where('docket_field_grid_id',$request->column_id)->delete();
                DocketFieldGridLabel::where('docket_field_grid_id',$request->column_id)->delete();

                DocketFieldGrid::find($request->column_id)->delete();
                return response()->json(array('status' => true, 'message' => 'deleted'));
            }
        }


    }

    public function gridColumnOrderUpdate(Request $request)
    {
        for ($i = 0; $i < count($request->order); $i++) {
            DocketFieldGrid::where('id', $request->order[$i])->update(['order' => $i + 1]);
        }
    }



    public  function vue(){

        return view('dashboard.vue');

    }

    public  function  docketReject(Request $request){



        $this->validate($request,['docket_id' =>     'required','explanation'=>'required']);
        $sentDocketRecipientApprovalQuery = SentDocketRecipientApproval::where('sent_docket_id', $request->docket_id)->Where('user_id', Auth::user()->id)->where('status', 0);
        $sentDocketRecipientApproval     =   SentDocketRecipientApproval::findOrFail($sentDocketRecipientApprovalQuery->first()->id);
        $sentDocketRecipientApproval->status     =   3;
        $sentDocketRecipientApproval->approval_time =Carbon::now()->toDateTimeString();
        if ($sentDocketRecipientApproval->save()){
            $sentDocketExplanation = new SentDocketReject();
            $sentDocketExplanation->sent_docket_id =  $request->docket_id;
            $sentDocketExplanation->explanation =  $request->explanation;
            $sentDocketExplanation->user_id =  Auth::user()->id;
            $sentDocketExplanation->save();
        }
        SentDockets::where('id',$request->docket_id)->update(['status'=> 3]);



        // push notification
        $sentDocketRecipientApp= SentDocketRecipientApproval::where('sent_docket_id', $request->docket_id)->pluck('user_id')->toArray();
        if (in_array(Auth::user()->id, $sentDocketRecipientApp)){
            $companyAdminUser = Company::where('id',Session::get('company_id'))->first()->userInfo;
            $sentDocket = SentDockets::where('id',$request->docket_id)->first();
            $userNotification   =   new UserNotification();
            $userNotification->sender_user_id   =   Auth::user()->id;
            $userNotification->receiver_user_id = $sentDocket->user_id;
            $userNotification->type     =   1;
            $userNotification->title    =   'Docket Rejected';
            $userNotification->message  =   "Your Docket has been rejected by";
            $userNotification->key      =   $request->docket_id;
            $userNotification->status   =   0;
            if ($userNotification->save()) {
                if ($sentDocket->senderUserInfo->deviceToken != "") {
                    if ($sentDocket->senderUserInfo->device_type == 2) {
                        $this->sendiOSNotification($sentDocket->senderUserInfo->deviceToken, $userNotification->title, $userNotification->message);
                    }
                    if ($sentDocket->senderUserInfo->device_type == 1) {
                        $this->sendAndroidNotification($sentDocket->senderUserInfo->deviceToken, $userNotification->title, $userNotification->message);
                    }
                }
            }

            if ($sentDocket->user_id != $companyAdminUser->id){
                $userNotification   =   new UserNotification();
                $userNotification->sender_user_id   =   Auth::user()->id;
                $userNotification->receiver_user_id = $companyAdminUser->id;
                $userNotification->type     =   1;
                $userNotification->title    =   'Docket Rejected';
                $userNotification->message  =   "Your Docket has been rejected by ".User::where('id',Auth::user()->id)->first_name.' '.User::where('id',Auth::user()->id)->last_name ;
                $userNotification->key      =   $request->docket_id;
                $userNotification->status   =   0;
                if ($userNotification->save()) {
                    if ($companyAdminUser->deviceToken != "") {
                        if ($companyAdminUser->device_type == 2) {
                            $this->sendiOSNotification($companyAdminUser->deviceToken, $userNotification->title, $userNotification->message);
                        }
                        if ($companyAdminUser->device_type == 1) {
                            $this->sendAndroidNotification($companyAdminUser->deviceToken, $userNotification->title, $userNotification->message);
                        }
                    }
                }
            }


        }
        $sentDocketReject = SentDocketReject::where('sent_docket_id', $request->docket_id)->get();
        $data ="<h5 style='font-weight: 800;'>Rejected By:</h5><ul>";
        foreach ($sentDocketReject as $sentDocketRejects) {
            $data .='<li><b>'.$sentDocketRejects->userInfo->first_name.' </b>'. $sentDocketRejects->explanation.' '.$sentDocketRejects->created_at.'</li>';
        }
        $data .= "</ul>";
        return response()->json(array('data'=>$data));

    }


    public function addIndPrefiller(Request $request){

        $tempDocketId = $request->docket_id;
//        if (DocketFiledPreFiller::where('value', $request->value)->where('docket_field_id', $request->docket_field_id)->count() != 0) {
//            $message = 'The title "' . $request->value . '" has already been taken.';
//            return response()->json(['status' => false, 'message' => $message]);
//
//        } else {

        $checkCategoryField = DocketField::where('id',$request->docketfieldid)->where('docket_id',$tempDocketId)->first();
        if ($checkCategoryField->docket_field_category_id == 3){
            $docketFieldCategory = 1;
        }else{
            $docketFieldCategory = 0;
        }
        $index = DocketFiledPreFiller::where('docket_field_id',$request->docketfieldid)->pluck('index')->toArray();
        if (count($index)!=0){
            $maxIndex = max($index);
        }else{
            $maxIndex = 0;
        }
        if ($request->prefillerValue != null){
            $docketFiledPreFiller = new DocketFiledPreFiller();
            $docketFiledPreFiller->value = $request->prefillerValue;
            $docketFiledPreFiller->root_id = $request->prefillerId;
            $docketFiledPreFiller->docket_field_id = $request->docketfieldid;
            $docketFiledPreFiller->index = $request->index + 1;
            if ($docketFiledPreFiller->save()){
                if ($maxIndex < $docketFiledPreFiller->index ){
                    DocketField::where('id',$request->docketfieldid)->where('docket_id',$tempDocketId)->update(['default_prefiller_id'=> null]);
                }
            }
        }else{
            $docket_prefiller=DocketPrefiller::where('id',$request->value_category_id)->firstOrFail();
            foreach($docket_prefiller->docketPrefillerValue as $row){
                $docketFiledPreFiller = new DocketFiledPreFiller;
                $docketFiledPreFiller->value = $row->label;
                $docketFiledPreFiller->root_id = $request->prefillerId;
                $docketFiledPreFiller->docket_field_id = $request->docketfieldid;
                $docketFiledPreFiller->index = $request->index + 1;
                if ($docketFiledPreFiller->save()){
                    if ($maxIndex < $docketFiledPreFiller->index ){
                        DocketField::where('id',$request->docketfieldid)->where('docket_id',$tempDocketId)->update(['default_prefiller_id'=> null]);
                    }
                }
            }
        }

        $prefiller = array();
        $docketPreFiller = DocketFiledPreFiller::where('docket_field_id',$request->docketfieldid)->get();

        foreach($docketPreFiller as $subRow):
            $prefiller[]   =  array(
                'id'=> $subRow->id,
                'value'=> $subRow->value,
                'root_id'=> $subRow->root_id,
                'index'=> $subRow->index,
                'docket_field_id'=> $subRow->docket_field_id,
                'docket_field_name'=>$subRow->docketField->label,

            );
        endforeach;

        $urlUpdatePreFiller = url('dashboard/company/docketBookManager/designDocket/updatePreFiller');
        $datas = $this->buildTreeArray($prefiller);
        $finalPrefillerView = array();
        foreach ($datas as $row){

            $prefillerForMaxIndex = DocketFiledPreFiller::where('docket_field_id',$row['docket_field_id'])->pluck('index')->toArray();
            $finalPrefillerMaxIndex =max($prefillerForMaxIndex);

            $docketField = DocketField::where('id',$row['docket_field_id'])->where('docket_id',$tempDocketId)->first();
            $defaultPrefillerId =unserialize($docketField->default_prefiller_id);


            $final = "";
            $this->prefillerFirstRow    =   true;
            $final .= '<tr><td>';
            if ($finalPrefillerMaxIndex == $row['index']) {
                if ($defaultPrefillerId != null) {
                    if (in_array($row['id'], $defaultPrefillerId)) {
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" value="' . $row['id'] . '" items="' . $row["docket_field_id"] . '"  checked  ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="' . $row['id'] . '" data-docketfieldid ="' . $request->docket_field_id . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none; top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>';

                    }else{
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" value="' . $row['id'] . '" items="' . $row["docket_field_id"] . '"    ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="' . $row['id'] . '" data-docketfieldid ="' . $request->docket_field_id . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none; top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';

                    }
                }else{
                    $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" value="' . $row['id'] . '" items="' . $row["docket_field_id"] . '"    ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="' . $row['id'] . '" data-docketfieldid ="' . $request->docket_field_id . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none; top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
                }
            }else{
                $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMark" disabled  ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a  data-toggle="modal" data-target="#deleteLabel" data-id="' . $row['id'] . '" data-docketfieldid ="' . $request->docket_field_id . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none; top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
            }

            if(count($row["prefiller"])>0){
                $final .=  $this->getPrefillerChild($row["prefiller"],$finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory);
            }

            $finalPrefillerView[] = array(
                'id'=>$row['docket_field_id'],
                'final'=>$final
            );
        }



        $message = 'Filler Added successfully.';
        return response()->json(['status' => true, 'message' => $message, 'finalPrefillerView' => $finalPrefillerView]);

    }



    public function previewDescription(Request $request){
        $this->validate($request,['invoiceId' =>     'required','isPreview'=>'required']);
        Invoice::where('id', $request->invoiceId)->update(['preview'=>$request->isPreview]);
       return response()->json(['data'=>$request->isPreview]);
    }



    public function isEmailSubjectdDocketFieldId(Request $request){
        $this->validate($request,['data' =>     'required','requiredDocketFieldId'=>'required']);
         $docketField =  DocketField::where('id', $request->requiredDocketFieldId)->withTrashed()->update(['is_emailed_subject'=>$request->data]);
        return response()->json(['data'=>$docketField]);

    }

    public function saveTallyable(Request $request){
        $this->validate($request,['talleyableType'   => 'required',"docket_id" => 'required']);
        $tempDocketId = $request->docket_id;
      if ($request->talleyableType == 1){
          $tempDocket     =   Docket::where('id',$tempDocketId)->firstOrFail();
          if($tempDocket->company_id==Session::get('company_id')) {
              $tallyableValue = 25;
              $order = DocketField::where('docket_id', $tempDocketId)->withTrashed()->count();
              $fieldDetails = DocketFiledCategory::where('id', $tallyableValue)->firstOrFail();
              $newField = new DocketField();
              $newField->docket_id = $tempDocketId;
              $newField->docket_field_category_id = $tallyableValue;
              $newField->required = 0;
              $newField->order = $order + 1;
              $newField->label = $fieldDetails->title;
              if($newField->save()){
                  Docket::where('id',$tempDocketId)->update(['created_at'=>Carbon::now()]);
              }
              return $this->defaultDocketElementTemplate($newField->id, $tempDocketId);
          }
      }elseif ($request->talleyableType == 2){
          $tempDocket     =   Docket::where('id',$tempDocketId)->firstOrFail();
          if($tempDocket->company_id==Session::get('company_id')) {
              $tallyableValue = 24;
              $order = DocketField::where('docket_id', $tempDocketId)->count();
              $fieldDetails = DocketFiledCategory::where('id', $tallyableValue)->firstOrFail();
              $newField = new DocketField();
              $newField->docket_id = $tempDocketId;
              $newField->docket_field_category_id = $tallyableValue;
              $newField->required = 0;
              $newField->order = $order + 1;
              $newField->label = $fieldDetails->title;
              if ($newField->save()){
                  DocketTallyableUnitRate::insert([
                      ['docket_field_id'  =>  $newField->id, 'type'  =>  1,  'label'  =>  'Per Unit Rate'],
                      ['docket_field_id'  =>  $newField->id, 'type'  =>  2, 'label'  =>  'Total Unit']]);
                  Docket::where('id',$tempDocketId)->update(['created_at'=>Carbon::now()]);

              }
              return $this->defaultDocketElementTemplate($newField->id, $tempDocketId);
          }
      }


    }

    public function docketTallyableUnitRateLabelUpdate(Request $request){
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        $tempDocketTallyable   =   DocketTallyableUnitRate::where('id',$request->pk)->firstOrFail();
        $tempDocket     =   Docket::where('id',$tempDocketTallyable->docketFieldInfo->docket_id)->firstOrFail();
        if($tempDocket->company_id==Session::get('company_id')){
            DocketTallyableUnitRate::where('id',$request->pk)->update(['label'  => $request->value]);
        }else{
            echo "<script>alert('Invalid attempt!')</script>";

        }
    }

    public  function gridFormulaSet(Request $request){
        $this->validate($request,['field_id'   => 'required']);
        $docketField = DocketField::where('id',$request->field_id)->first();
        $docketGridField= DocketFieldGrid::where('id', $request->grid_field_id)->first();

        $docketFieldGrid = DocketFieldGrid::where('docket_field_id',$request->field_id)->with('gridFieldFormula')->get();
        $cell = array();
        $timecell = array();
        foreach ($docketFieldGrid as $rows){
          if ($request->grid_field_id != $rows->id) {
              if ($rows->docket_field_category_id == 3 && $rows->gridFieldFormula == null) {
                  $cell[] = array(
                      'id' => $rows->id,
                      'label' => $rows->label,

                  );

              }
              if ($rows->docket_field_category_id == 26) {
                  $timecell[] = array(
                      'id' => $rows->id,
                      'label' => $rows->label,

                  );

              }
          }
        }



        $filterCell = $cell;

        $filterTimeCell = $timecell;




        if ($docketGridField->gridFieldFormula != null){
            $formulaValue = unserialize($docketGridField->gridFieldFormula->formula);
            $formulaArray = array();
            $sn = 0;
            foreach ($formulaValue as $formulaValues){
                if (is_numeric($formulaValues)){
                    $formulaArray[] = array(
                        "value" => $formulaValues,
                        "type" => "number",
                         "index"=> $sn
                    );
                }elseif (preg_match("/TDiff/i", $formulaValues)) {



                    $formulaArray[] = array(
                        "value" => $formulaValues,
                        "type" => "function",
                         "index"=> $sn
                    );
                } elseif (preg_match("/cell/i", $formulaValues)) {
                    $formulaArray[] = array(
                        "value" => ltrim($formulaValues, 'cell'),
                        "type" => "cell",
                        "index"=> $sn
                    );
                }else{
                    $formulaArray[] = array(
                        "value" => $formulaValues,
                        "type" => "operator",
                        "index"=> $sn
                    );
                }

                $sn++;

            }

        }else{
            $formulaArray = array();
        }



        return view('dashboard/company/docketManager/gridFormula/gridFormulaSet', compact('docketField','docketGridField','formulaArray','filterCell','filterTimeCell'));

    }

    public function  formulaSet(Request  $request){
        $categoryType =  $request->type;
        $docketFieldId = $request->id;
        $docketGridFieldId = $request->gridid;

        $docketFieldGrid = DocketFieldGrid::where('docket_field_id',$docketFieldId)->where('id',$docketGridFieldId)->first();

        $gridNumberField = DocketFieldGrid::where('docket_field_id',$docketFieldId)->get();

        $timecell = array();
        foreach ($gridNumberField as $rows) {
            if ($docketGridFieldId != $rows->id){
                if ($rows->docket_field_category_id == 26) {
                    $timecell[] = array(
                        'id' => $rows->id,
                        'label' => $rows->label,

                    );

                }
          }
        }


        $filterTimeCell = $timecell;
         $filterCell = $docketFieldGrid;

        return view('dashboard/company/docketManager/gridFormula/gridFormulaCategory',compact('categoryType','docketFieldId','filterCell','filterTimeCell'));


    }


    public  function  saveFormula(Request $request){
       if ($request->has('arrayValue')== false){
           $this->validate($request,['docketGridFieldId' =>  'required']);
           if (GridFieldFormula::where('docket_field_grid_id',$request->docketGridFieldId)->count()!= 0) {
               $gridFieldFormula = GridFieldFormula::where('docket_field_grid_id', $request->docketGridFieldId)->first();
               GridFieldFormula::where('id', $gridFieldFormula->id)->delete();
           }
       }else{
           $this->validate($request,['arrayValue'   => 'required', 'docketGridFieldId' =>  'required']);
           $gridFieldFormula = GridFieldFormula::where('docket_field_grid_id',$request->docketGridFieldId)->count();
           if ($gridFieldFormula == 1){
               GridFieldFormula::where('docket_field_grid_id',$request->docketGridFieldId)->update(['formula'=> serialize($request->arrayValue),'user_id'=>Auth::user()->id]);
           }else{
               $gridFieldFormulas = new GridFieldFormula();
               $gridFieldFormulas->docket_field_grid_id = $request->docketGridFieldId;
               $gridFieldFormulas->user_id = Auth::user()->id;
               $gridFieldFormulas->formula = serialize($request->arrayValue);
               $gridFieldFormulas->save();

           }
       }
       $docketFieldId = $request->docketFieldId;
       if (GridFieldFormula::where('docket_field_grid_id',$request->docketGridFieldId)->count()!= 0){
           $gridFieldFormula = GridFieldFormula::where('docket_field_grid_id',$request->docketGridFieldId)->first();
           return view('dashboard/company/docketManager/gridFormula/demoView',compact('docketFieldId','gridFieldFormula'));
       }

    }



    public function getGridPrefillerChild($prefiller,$finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory){
        $child = "";
        $urlUpdatePreFiller = url('dashboard/company/docketBookManager/designDocket/updateGridPreFiller');


        foreach ($prefiller as $item){
            $prefillerForMaxIndex = DocketGridPrefiller::where('docket_field_grid_id',$item['docket_field_grid_id'])->pluck('index')->toArray();
            $finalPrefillerMaxIndex =max($prefillerForMaxIndex);

            $docketGridField = DocketFieldGrid::where('id',$item['docket_field_grid_id'])->where('docket_field_id',$tempDocketId)->first();

            $defaultPrefillerId =unserialize($docketGridField->default_prefiller_id);


            if(!$this->prefillerFirstRow){
                $child .= "<tr>";
                for($i=1; $i<$item['index'];$i++){ $child .= "<td></td>"; }
            }
            if ($finalPrefillerMaxIndex == $item['index']){
                if ($defaultPrefillerId != null) {
                    if (in_array($item['id'], $defaultPrefillerId)) {
                        $child .= '<td><div class="prefillercontent"> <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="' . $item['id'] . '" items="' . $item["docket_field_grid_id"] . '" datatype="0"  checked><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a   id="deleteGridLabel"  data-id="' . $item['id'] . '" data-docketfieldid="' . $item['docket_field_grid_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_grid_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $item['index'].'"  data-labels="'.$item["docket_field_name"].'"  data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div>  </td>';
                    } else {
                        $child .= '<td><div class="prefillercontent"> <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="' . $item['id'] . '" items="' . $item["docket_field_grid_id"] . '" datatype="0" ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a  id="deleteGridLabel"  data-id="' . $item['id'] . '" data-docketfieldid="' . $item['docket_field_grid_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_grid_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $item['index'].'"  data-labels="'.$item["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>   </td>';

                    }
                }else{
                    $child .= '<td><div class="prefillercontent"> <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="' . $item['id'] . '" items="' . $item["docket_field_grid_id"] . '" datatype="0"><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a  id="deleteGridLabel"  data-id="' . $item['id'] . '" data-docketfieldid="' . $item['docket_field_grid_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_grid_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $item['index'].'"  data-labels="'.$item["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>  </td>';

                }
            }else{
                $child .= '<td><div class="prefillercontent"> <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" disabled  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$item['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $item['value'] .'</a> <a  id="deleteGridLabel"  data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin : 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_grid_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $item['index'].'"  data-labels="'.$item["docket_field_name"].'"  class="btn btn-raised btn-danger btn-xs btnprefiller" data-prefillertype="'.$docketFieldCategory.'"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>  </td>';

            }
            if(count($item['prefiller'])>0){
                $this->prefillerFirstRow = true;
                $child .= $this->getGridPrefillerChild($item['prefiller'],$finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory);
            }else{
                $this->prefillerFirstRow = false;
                $child .="</tr>";
            }
        }
        return $child;
    }

    public function gridPrefillerSet(Request $request){

        $docketField = DocketField::where('id',$request->field_id)->first();
        $tempDocketId =  $request->field_id;
        $docketGridField = DocketFieldGrid::where('id',$request->grid_field_id)->where('docket_field_id',$request->field_id)->first();
        $prefiller = array();
            foreach($docketGridField->gridFieldPreFiller as $subRow):
                $prefiller[]   =  array(
                    'id'=> $subRow->id,
                    'value'=> $subRow->value,
                    'root_id'=> $subRow->root_id,
                    'index'=> $subRow->index,
                    'docket_field_grid_id'=> $subRow->docket_field_grid_id,
                    'docket_field_name'=>$subRow->docketField->label,
                );
            endforeach;
        $urlUpdatePreFiller = url('dashboard/company/docketBookManager/designDocket/updateGridPreFiller');
        $datas = $this->buildTreeArray($prefiller);
        $finalPrefillerView = array();
        $finalSelectBox =  array();
        $categoryId = [1,2,3,4,29];
        $items = DocketFieldGrid::where('docket_field_id',$tempDocketId)->whereIn('docket_field_category_id',$categoryId )->get();
        $docketAutoPrefilereCheck = DocketGridAutoPrefiller::where('docket_field_id',$tempDocketId)->pluck('link_grid_field_id')->toArray();
        foreach ($items as $dd){
            if ($request->grid_field_id != $dd->id){
                if ($dd->docket_field_category_id == 3){
                    if ($dd->gridFieldFormula == null) {
                        if (count($dd->gridFieldPreFiller) == 0) {
                            if (in_array($dd->id, $docketAutoPrefilereCheck)) {
                                $finalSelectBox[] = array(
                                    'id' => $dd->id,
                                    'label' => $dd->label,
                                    'status' => true
                                );
                            } else {
                                $finalSelectBox[] = array(
                                    'id' => $dd->id,
                                    'label' => $dd->label,
                                    'status' => false,
                                );
                            }
                        } else {
                            $finalSelectBox[] = array(
                                'id' => $dd->id,
                                'label' => $dd->label,
                                'status' => true
                            );
                        }
                    }else{
                        $finalSelectBox[] = array(
                            'id'=>$dd->id,
                            'label'=>$dd->label,
                            'status'=> true
                        );
                    }
                }else{
                    if (count($dd->gridFieldPreFiller) == 0) {
                        if(in_array($dd->id,$docketAutoPrefilereCheck)){
                            $finalSelectBox[] = array(
                                'id'=>$dd->id,
                                'label'=>$dd->label,
                                'status'=> true
                            );
                        }else{
                            $finalSelectBox[] = array(
                                'id'=>$dd->id,
                                'label'=>$dd->label,
                                'status'=> false
                            );
                        }

                    }else{
                        $finalSelectBox[] = array(
                            'id'=>$dd->id,
                            'label'=>$dd->label,
                            'status'=> true
                        );
                    }
                }
            }
        }

        $prefillerMaxIndex = DocketFieldGrid::where('id',$request->grid_field_id)->first();
        if ($prefillerMaxIndex->gridFieldPreFiller->count()!=0){
            $finalPrefilMaxIndex =max($prefillerMaxIndex->gridFieldPreFiller->pluck('index')->toArray());
        }else{
            $finalPrefilMaxIndex =0;
        }
        foreach ($datas as $row){
            $checkCategoryField = DocketFieldGrid::where('id',$request->grid_field_id)->where('docket_field_id',$request->field_id)->first();
            if ($checkCategoryField->docket_field_category_id == 3){
                $docketFieldCategory = 1;
            }else{
                $docketFieldCategory = 0;
            }
            $final = "";
            $this->prefillerFirstRow    =   true;
            $final .= '<tr><td>';
            $prefillerForMaxIndex = DocketGridPrefiller::where('docket_field_grid_id',$row['docket_field_grid_id'])->pluck('index')->toArray();
            $finalPrefillerMaxIndex =max($prefillerForMaxIndex);
            $docketGridField = DocketFieldGrid::where('id',$request->grid_field_id)->where('docket_field_id',$request->field_id)->first();
            $defaultPrefillerId =unserialize($docketGridField->default_prefiller_id);
            if ($finalPrefillerMaxIndex == $row['index']){
                if ($defaultPrefillerId != null){
                    if (in_array($row['id'],$defaultPrefillerId)){
                        if ($docketGridField->default_auto_fill_prefiller == $row["id"] ){
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" checked class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"  checked  datatype="0" > <a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel"  data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true" /></a>  <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a>  </div> </td>' ;

                        }else{
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"  class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"  checked  datatype="0" > <a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel"  data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true" /></a>  <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a>  </div> </td>' ;
                        }
                    }else{
                        if ($docketGridField->default_auto_fill_prefiller == $row["id"] ){
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" checked class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0"  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel"  data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                        }else{
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"  class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0"  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel"  data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                        }
                    }
                }else{
                    if ($docketGridField->default_auto_fill_prefiller == $row["id"] ){
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" checked class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"  datatype="0" ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'"  data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;
                    }else{
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"  datatype="0" ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'"  data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;
                    }
                }
            }else{
                if ($docketGridField->default_auto_fill_prefiller == $row["id"] ){
                    $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" checked class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark"  disabled  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                }else{
                    $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"  class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark"  disabled  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                }
            }
            if(count($row["prefiller"])>0){
                $final .=  $this->getGridPrefillerChild($row["prefiller"],$finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory);
            }
            $finalPrefillerView[] = array(
                'id'=>$row['docket_field_grid_id'],
                'final'=>$final
            );
        }
        return view('dashboard/company/docketManager/gridPrefiller/index', compact('docketField','finalPrefillerView','docketGridField','finalPrefilMaxIndex','finalSelectBox'));
    }



    public function saveGridPrefiller(Request $request)
    {
        $docketFieldId = $request->docket_field_id;
        $textValue = $request->value;
        $parentId = $request->parent_id;
        $valueCategoryId = $request->value_category_id;
        $isInteger = $request->isInteger;
        $index = $request->index;
        $gridId = $request->gridId;
        $tempDocketId =$request->docket_field_id;
        $docketField = DocketField::where('id',$docketFieldId)->first();


        $index1 = DocketGridPrefiller::where('docket_field_grid_id',$gridId)->pluck('index')->toArray();
        if (count($index1)!=0){
            $maxIndex = max($index1);
        }else{
            $maxIndex = 0;
        }
        if ($textValue != null){
            $docketFiledPreFiller = new DocketGridPrefiller();
            $docketFiledPreFiller->value = $textValue;
            $docketFiledPreFiller->root_id = $parentId;
            $docketFiledPreFiller->docket_field_grid_id = $gridId;
            $docketFiledPreFiller->index = $index + 1;
            if ($docketFiledPreFiller->save()){
                if ($maxIndex < $docketFiledPreFiller->index ){
                    DocketFieldGrid::where('id',$gridId)->where('docket_field_id',$docketFieldId)->update(['default_prefiller_id'=> null]);
                }
            }
        }else{

            $docket_prefiller=DocketPrefiller::where('id',$valueCategoryId)->firstOrFail();

            foreach($docket_prefiller->docketPrefillerValue as $row){
                $docketFiledPreFiller = new DocketGridPrefiller;
                $docketFiledPreFiller->value = $row->label;
                $docketFiledPreFiller->root_id = $parentId;
                $docketFiledPreFiller->docket_field_grid_id = $gridId;
                $docketFiledPreFiller->index = $index + 1;
                if ($docketFiledPreFiller->save()){
                    if ($maxIndex < $docketFiledPreFiller->index ){
                        DocketFieldGrid::where('id',$gridId)->where('docket_field_id',$docketFieldId)->update(['default_prefiller_id'=> null]);
                    }
                }
            }
        }



        $docketGridField = DocketFieldGrid::where('id',$gridId)->where('docket_field_id',$docketFieldId)->first();


        $prefiller = array();


        $finalPrefillerView = array();
        $finalSelectBox = array();
//        $finalSelectBox .= '<div><select><option>Select Grid Cell</option>';
        $categoryId = [1,2,3,4,29];
        $items = DocketFieldGrid::where('docket_field_id',$tempDocketId)->whereIn('docket_field_category_id',$categoryId )->get();
        $docketAutoPrefilereCheck = DocketGridAutoPrefiller::where('docket_field_id',$tempDocketId)->pluck('link_grid_field_id')->toArray();

        foreach ($items as $dd){
//            if ($request->gridId != $dd->id){
//                $finalSelectBox[] = array(
//                    'id'=>$dd->id,
//                    'label'=>$dd->label
//                );
//            }

            if ($request->gridId != $dd->id){
                if ($dd->docket_field_category_id == 3){
                    if ($dd->gridFieldFormula == null) {
                        if(in_array($dd->id,$docketAutoPrefilereCheck)){
                            $finalSelectBox[] = array(
                                'id'=>$dd->id,
                                'label'=>$dd->label,
                                'status'=> true
                            );
                        }else{
                            $finalSelectBox[] = array(
                                'id'=>$dd->id,
                                'label'=>$dd->label,
                                'status'=> false
                            );
                        }
                    }else{
                        $finalSelectBox[] = array(
                            'id'=>$dd->id,
                            'label'=>$dd->label,
                            'status'=> true
                        );
                    }

                }else {
                    if (count($dd->gridFieldPreFiller) == 0) {
                        if(in_array($dd->id,$docketAutoPrefilereCheck)){
                            $finalSelectBox[] = array(
                                'id'=>$dd->id,
                                'label'=>$dd->label,
                                'status'=> true
                            );
                        }else{
                            $finalSelectBox[] = array(
                                'id' => $dd->id,
                                'label' => $dd->label,
                                'status' => false,
                            );
                        }

                    } else {
                        $finalSelectBox[] = array(
                            'id' => $dd->id,
                            'label' => $dd->label,
                            'status' => true,
                        );
                    }
                }
            }
        }
//        $finalSelectBox .= '</select></div>';
        $prefillerMaxIndex = DocketFieldGrid::where('id',$gridId)->first();
        if ($prefillerMaxIndex->gridFieldPreFiller->count()!=0){
            $finalPrefilMaxIndex =max($prefillerMaxIndex->gridFieldPreFiller->pluck('index')->toArray());

        }else{
            $finalPrefilMaxIndex =0;

        }

        foreach($docketGridField->gridFieldPreFiller as $subRow):
            $prefiller[]   =  array(
                'id'=> $subRow->id,
                'value'=> $subRow->value,
                'root_id'=> $subRow->root_id,
                'index'=> $subRow->index,
                'docket_field_grid_id'=> $subRow->docket_field_grid_id,
                'docket_field_name'=>$subRow->docketField->label,
            );
        endforeach;
        $urlUpdatePreFiller = url('dashboard/company/docketBookManager/designDocket/updateGridPreFiller');
        $datas = $this->buildTreeArray($prefiller);
        $finalPrefillerView = array();
        foreach ($datas as $row){
            $checkCategoryField = DocketFieldGrid::where('id',$gridId)->where('docket_field_id',$docketFieldId)->first();
            if ($checkCategoryField->docket_field_category_id == 3){
                $docketFieldCategory = 1;
            }else{
                $docketFieldCategory = 0;
            }
            $final = "";
            $this->prefillerFirstRow    =   true;
            $final .= '<tr><td>';
            $prefillerForMaxIndex = DocketGridPrefiller::where('docket_field_grid_id',$row['docket_field_grid_id'])->pluck('index')->toArray();
            $finalPrefillerMaxIndex =max($prefillerForMaxIndex);
            $docketGridField = DocketFieldGrid::where('id',$gridId)->where('docket_field_id',$docketFieldId)->first();
            $defaultPrefillerId =unserialize($docketGridField->default_prefiller_id);
            if ($finalPrefillerMaxIndex == $row['index']){
                if ($defaultPrefillerId != null){
                    if (in_array($row['id'],$defaultPrefillerId)){
                        if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" checked class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0"  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                        }else{
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"  class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0" checked  > <a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true" /></a>  <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a>  </div> </td>' ;

                        }
                    }else{
                        if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" checked class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0"  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                        }else{
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0"  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                        }
                    }
                }else{
                    if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" checked class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"  datatype="0"  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'"  data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;
                    }else{
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"  datatype="0"  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'"  data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;
                    }
                }
            }else{
                if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                    $final .= '<div class="prefillercontent"> <input  style="margin-right: 4px;" type="checkbox" checked class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" > <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark"  disabled  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                }else{
                    $final .= '<div class="prefillercontent"> <input  style="margin-right: 4px;" type="checkbox" class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" > <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark"  disabled  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                }
            }
            if(count($row["prefiller"])>0){
                $final .=  $this->getGridPrefillerChild($row["prefiller"],$finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory);
            }
            $finalPrefillerView[] = array(
                'id'=>$row['docket_field_grid_id'],
                'final'=>$final
            );
        }

        $autoCheckFieldArray= DocketGridAutoPrefiller::where('grid_field_id',$gridId)->pluck('link_grid_field_id')->toArray();


        return view('dashboard/company/docketManager/gridPrefiller/prefiller', compact('docketField','finalPrefilMaxIndex','finalSelectBox','docketGridField','finalPrefillerView','autoCheckFieldArray'));

    }


    public function getChildGridPrefillerId($root_id){
        $prefillerId  =   array();
        $prefillerId[]    =   intval($root_id);
        $query= DocketGridPrefiller::where('root_id',$root_id);
        if ($query->count()>0){
            foreach ($query->get() as $items){
                $prefillerId[]    =   $items->id;
                if(DocketGridPrefiller::where('root_id',$items->id)->count()>0) {
                    $prefillerId = array_merge($prefillerId, $this->getChildGridPrefillerId($items->id));
                }
            }
        }else{
            $prefillerId[]    =     $root_id;
        }
        return $prefillerId;

    }




    public function deleteGridPrefiller(Request $request){
        $tempDocketId = DocketFieldGrid::where('id',$request->docket_grid_field_id)->first()->docket_field_id;

        $gridId = $request->docket_grid_field_id;
        $root_id= $request->prefiller_id;
        $prefillerId=$this->getChildGridPrefillerId($root_id);
        $getIndexValue= array_unique(DocketGridPrefiller::whereIn('id',array_unique($prefillerId))->pluck('index')->toArray());
        DocketGridPrefiller::whereIn('id',array_unique($prefillerId))->delete();
        if(count(DocketGridPrefiller::whereIn('index',$getIndexValue)->where('docket_field_grid_id',$request->docket_grid_field_id)->get()) == 0){
            DocketGridAutoPrefiller::whereIn('index',$getIndexValue)->where('grid_field_id',$request->docket_grid_field_id)->delete();
        }
        $docketGridField = DocketFieldGrid::where('id',$gridId)->where('docket_field_id',$tempDocketId)->first();
        $prefiller = array();
        foreach($docketGridField->gridFieldPreFiller as $subRow):
            $prefiller[]   =  array(
                'id'=> $subRow->id,
                'value'=> $subRow->value,
                'root_id'=> $subRow->root_id,
                'index'=> $subRow->index,
                'docket_field_grid_id'=> $subRow->docket_field_grid_id,
                'docket_field_name'=>$subRow->docketField->label,
            );
        endforeach;
        $urlUpdatePreFiller = url('dashboard/company/docketBookManager/designDocket/updateGridPreFiller');
        $datas = $this->buildTreeArray($prefiller);
        $finalPrefillerView = array();
        $finalSelectBox = array();
        $categoryId = [1,2,3,4,29];
        $items = DocketFieldGrid::where('docket_field_id',$tempDocketId)->whereIn('docket_field_category_id',$categoryId )->get();
        $docketAutoPrefilereCheck = DocketGridAutoPrefiller::where('docket_field_id',$tempDocketId)->pluck('link_grid_field_id')->toArray();
        foreach ($items as $dd){
            if ($request->docket_grid_field_id != $dd->id){
                if ($dd->docket_field_category_id == 3){
                    if ($dd->gridFieldFormula == null) {
                        if(in_array($dd->id,$docketAutoPrefilereCheck)){
                            $finalSelectBox[] = array(
                                'id'=>$dd->id,
                                'label'=>$dd->label,
                                'status'=> true
                            );
                        }else{
                            $finalSelectBox[] = array(
                                'id' => $dd->id,
                                'label' => $dd->label,
                                'status' => false,
                            );
                        }
                    }else{
                        $finalSelectBox[] = array(
                            'id'=>$dd->id,
                            'label'=>$dd->label,
                            'status'=> true
                        );
                    }

                }else {
                    if (count($dd->gridFieldPreFiller) == 0) {
                        if(in_array($dd->id,$docketAutoPrefilereCheck)){
                            $finalSelectBox[] = array(
                                'id'=>$dd->id,
                                'label'=>$dd->label,
                                'status'=> true
                            );
                        }else{
                            $finalSelectBox[] = array(
                                'id' => $dd->id,
                                'label' => $dd->label,
                                'status' => false,
                            );
                        }
                    } else {
                        $finalSelectBox[] = array(
                            'id' => $dd->id,
                            'label' => $dd->label,
                            'status' => true,
                        );
                    }
                }
            }
        }
        $docketField = DocketField::where('id',$tempDocketId)->first();
        $prefillerMaxIndex = DocketFieldGrid::where('id',$gridId)->first();
        if ($prefillerMaxIndex->gridFieldPreFiller->count()!=0){
            $finalPrefilMaxIndex =max($prefillerMaxIndex->gridFieldPreFiller->pluck('index')->toArray());

        }else{
            $finalPrefilMaxIndex =0;

        }
        foreach ($datas as $row){
            $checkCategoryField = DocketFieldGrid::where('id',$gridId)->where('docket_field_id',$tempDocketId)->first();

            if ($checkCategoryField->docket_field_category_id == 3){
                $docketFieldCategory = 1;
            }else{
                $docketFieldCategory = 0;
            }
            $final = "";
            $this->prefillerFirstRow    =   true;
            $final .= '<tr><td>';
            $prefillerForMaxIndex = DocketGridPrefiller::where('docket_field_grid_id',$row['docket_field_grid_id'])->pluck('index')->toArray();
            $finalPrefillerMaxIndex =max($prefillerForMaxIndex);
            $docketGridField = DocketFieldGrid::where('id',$gridId)->where('docket_field_id',$tempDocketId)->first();
            $defaultPrefillerId =unserialize($docketGridField->default_prefiller_id);
            if ($finalPrefillerMaxIndex == $row['index']){
                if ($defaultPrefillerId != null){
                    if (in_array($row['id'],$defaultPrefillerId)){
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"  checked datatype="0" > <a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true" /></a>  <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a>  </div> </td>' ;
                    }else{
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"  datatype="0" ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;
                    }
                }else{
                    $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"   datatype="0"><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'"  data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;
                }
            }else{
                $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark"  disabled  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;
            }
            if(count($row["prefiller"])>0){
                $final .=  $this->getGridPrefillerChild($row["prefiller"],$finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory);
            }
            $finalPrefillerView[] = array(
                'id'=>$row['docket_field_grid_id'],
                'final'=>$final
            );
        }

        $autoCheckFieldArray= DocketGridAutoPrefiller::where('grid_field_id',$request->docket_grid_field_id)->pluck('link_grid_field_id')->toArray();

        return view('dashboard/company/docketManager/gridPrefiller/prefiller',compact('docketField','finalSelectBox','finalPrefilMaxIndex','finalPrefillerView','docketGridField','autoCheckFieldArray'));
    }



    public  function  updateGridPreFiller(Request $request){
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        $docketupdatePreFiller   =   DocketGridPrefiller::where('id',$request->pk)->firstOrFail();
        $docketupdatePreFiller->value =$request->value;
        $docketupdatePreFiller->save();
    }

    public  function  gridprefillerDefaultCheckMark(Request $request){

        $prefillerId[] = $request->value;
        if ( DocketFieldGrid::where('id',$request->docketFieldId)->count()==0 ){
            return response()->json(array("status" => false, "messages" =>"Invalid Request!"));
        }else{
            if ($request->checked == 1){
                $docketFiled = DocketFieldGrid::where('id',$request->docketFieldId)->first();
                if ($docketFiled->default_prefiller_id == null){
                    DocketFieldGrid::where('id',$request->docketFieldId)->update(['default_prefiller_id'=>serialize($prefillerId)]);
                }else{
                    $oldData = unserialize($docketFiled->default_prefiller_id);
                    array_push($oldData, $request->value);
                    DocketFieldGrid::where('id',$request->docketFieldId)->update(['default_prefiller_id'=>serialize($oldData)]);
                }
                return response()->json(array("status" => true));
            }else{

                $docketFiled = DocketFieldGrid::where('id',$request->docketFieldId)->first();
                $updateDefaultPrefiller = unserialize($docketFiled->default_prefiller_id);
                $finalArray = array_diff($updateDefaultPrefiller,$prefillerId);
                if (count($finalArray)== 0){
                    DocketFieldGrid::where('id',$request->docketFieldId)->update(['default_prefiller_id'=>null]);

                }else{
                    DocketFieldGrid::where('id',$request->docketFieldId)->update(['default_prefiller_id'=>serialize($finalArray)]);
                }
                return response()->json(array("status" => true));
            }
        }

    }



    public  function  gridaddIndPrefiller(Request $request){

        $docketFieldId = $request->docket_field_id;
        $textValue = $request->prefillerValue;
        $parentId = $request->prefillerId;
        $valueCategoryId = $request->value_category_id;
        $isInteger = $request->isInteger;
        $index = $request->index;
        $gridId = $request->docketGridId;
        $tempDocketId =$request->docket_field_id;
        $docketField = DocketField::where('id',$docketFieldId)->first();
        $index1 = DocketGridPrefiller::where('docket_field_grid_id',$gridId)->pluck('index')->toArray();
        if (count($index1)!=0){
            $maxIndex = max($index1);
        }else{
            $maxIndex = 0;
        }
        if ($textValue != null){
            $docketFiledPreFiller = new DocketGridPrefiller();
            $docketFiledPreFiller->value = $textValue;
            $docketFiledPreFiller->root_id = $parentId;
            $docketFiledPreFiller->docket_field_grid_id = $gridId;
            $docketFiledPreFiller->index = $index + 1;
            if ($docketFiledPreFiller->save()){
                if ($maxIndex < $docketFiledPreFiller->index ){
                    DocketFieldGrid::where('id',$gridId)->where('docket_field_id',$docketFieldId)->update(['default_prefiller_id'=> null]);
                }
            }
        }else{
            $docket_prefiller=DocketPrefiller::where('id',$valueCategoryId)->firstOrFail();
            foreach($docket_prefiller->docketPrefillerValue as $row){
                $docketFiledPreFiller = new DocketGridPrefiller;
                $docketFiledPreFiller->value = $row->label;
                $docketFiledPreFiller->root_id = $parentId;
                $docketFiledPreFiller->docket_field_grid_id = $gridId;
                $docketFiledPreFiller->index = $index + 1;
                if ($docketFiledPreFiller->save()){
                    if ($maxIndex < $docketFiledPreFiller->index ){
                        DocketFieldGrid::where('id',$gridId)->where('docket_field_id',$docketFieldId)->update(['default_prefiller_id'=> null]);
                    }
                }
            }
        }


        $docketGridField = DocketFieldGrid::where('id',$gridId)->where('docket_field_id',$docketFieldId)->first();


        $prefiller = array();

        foreach($docketGridField->gridFieldPreFiller as $subRow):
            $prefiller[]   =  array(
                'id'=> $subRow->id,
                'value'=> $subRow->value,
                'root_id'=> $subRow->root_id,
                'index'=> $subRow->index,
                'docket_field_grid_id'=> $subRow->docket_field_grid_id,
                'docket_field_name'=>$subRow->docketField->label,
            );
        endforeach;


        $urlUpdatePreFiller = url('dashboard/company/docketBookManager/designDocket/updateGridPreFiller');
        $datas = $this->buildTreeArray($prefiller);
        $finalPrefillerView = array();

        $finalSelectBox = array();
//        $finalSelectBox .= '<div><select><option>Select Grid Cell</option>';
        $categoryId = [1,2,3,4,29];
        $items = DocketFieldGrid::where('docket_field_id',$tempDocketId)->whereIn('docket_field_category_id',$categoryId )->get();
        $docketAutoPrefilereCheck = DocketGridAutoPrefiller::where('docket_field_id',$tempDocketId)->pluck('link_grid_field_id')->toArray();

        foreach ($items as $dd){
            if ($gridId != $dd->id){
                if ($dd->docket_field_category_id == 3){
                    if ($dd->gridFieldFormula == null) {
                        if(in_array($dd->id,$docketAutoPrefilereCheck)){
                            $finalSelectBox[] = array(
                                'id'=>$dd->id,
                                'label'=>$dd->label,
                                'status'=> true
                            );
                        }else{
                            $finalSelectBox[] = array(
                                'id' => $dd->id,
                                'label' => $dd->label,
                                'status' => false,
                            );
                        }
                    }else{
                        $finalSelectBox[] = array(
                            'id'=>$dd->id,
                            'label'=>$dd->label,
                            'status'=> true
                        );
                    }

                }else {
                    if (count($dd->gridFieldPreFiller) == 0) {
                        if(in_array($dd->id,$docketAutoPrefilereCheck)){
                            $finalSelectBox[] = array(
                                'id'=>$dd->id,
                                'label'=>$dd->label,
                                'status'=> true
                            );
                        }else{
                            $finalSelectBox[] = array(
                                'id' => $dd->id,
                                'label' => $dd->label,
                                'status' => false,
                            );
                        }
                    } else {
                        $finalSelectBox[] = array(
                            'id' => $dd->id,
                            'label' => $dd->label,
                            'status' => true,
                        );
                    }
                }
            }


        }
//        $finalSelectBox .= '</select></div>';
        $prefillerMaxIndex = DocketFieldGrid::where('id',$gridId)->first();
        $finalPrefilMaxIndex =max($prefillerMaxIndex->gridFieldPreFiller->pluck('index')->toArray());


        foreach ($datas as $row){
            $checkCategoryField = DocketFieldGrid::where('id',$gridId)->where('docket_field_id',$docketFieldId)->first();

            if ($checkCategoryField->docket_field_category_id == 3){
                $docketFieldCategory = 1;
            }else{
                $docketFieldCategory = 0;
            }
            $final = "";
            $this->prefillerFirstRow    =   true;

            $final .= '<tr><td>';
            $prefillerForMaxIndex = DocketGridPrefiller::where('docket_field_grid_id',$row['docket_field_grid_id'])->pluck('index')->toArray();
            $finalPrefillerMaxIndex =max($prefillerForMaxIndex);
            $docketGridField = DocketFieldGrid::where('id',$gridId)->where('docket_field_id',$docketFieldId)->first();
            $defaultPrefillerId =unserialize($docketGridField->default_prefiller_id);
            if ($finalPrefillerMaxIndex == $row['index']){
                if ($defaultPrefillerId != null){
                    if (in_array($row['id'],$defaultPrefillerId)){
                        if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0" checked  > <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0" checked  > <a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true" /></a>  <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a>  </div> </td>' ;

                        }else{
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0"   > <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0" checked  > <a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true" /></a>  <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a>  </div> </td>' ;

                        }
                    }else{
                        if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0" checked  > <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"  datatype="0" ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                        }else{
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0"   > <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"  datatype="0" ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                        }
                    }
                }else{
                    if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0" checked  > <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"  datatype="0" ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'"  data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                    }else{
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0"   > <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'"  datatype="0" ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'"  data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                    }
                }
            }else{
                if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                    $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0" checked  > <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark"  disabled  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                }else{
                    $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_field_grid_id"].'" datatype="0"   > <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark"  disabled  ><a href="#" id="shortText" class="editabledocketgridprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteGridLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addGridPrefillerValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_grid_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;

                }
            }
            if(count($row["prefiller"])>0){
                $final .=  $this->getGridPrefillerChild($row["prefiller"],$finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory);
            }
            $finalPrefillerView[] = array(
                'id'=>$row['docket_field_grid_id'],
                'final'=>$final
            );
        }

        $autoCheckFieldArray= DocketGridAutoPrefiller::where('grid_field_id',$gridId)->pluck('link_grid_field_id')->toArray();

        return view('dashboard/company/docketManager/gridPrefiller/prefiller',compact('docketField','finalPrefillerView','finalSelectBox','finalPrefilMaxIndex','docketGridField','autoCheckFieldArray'));
    }



    public function  duplicateGrid(Request $request){
        $categoryId = $request->category_id;
        $docketField = DocketField::where('id',$request->docket_field_id)->withTrashed()->first();
        $existing_docket_fields_count = DocketField::where('docket_id', $request->docket_id)->withTrashed()->count();
        $docket_field = new DocketField();
        $docket_field->docket_id = $docketField->docket_id;
        $docket_field->docket_field_category_id = $docketField->docket_field_category_id;
        $docket_field->order = $existing_docket_fields_count + 1;
        $docket_field->label = $docketField->label;
        $docket_field->required = $docketField->required;
        $docket_field->is_hidden = $docketField->is_hidden;
        $docket_field->is_emailed_subject = $docketField->is_emailed_subject;
        $docket_field->default_prefiller_id = $docketField->default_prefiller_id;
        $docket_field->is_dependent = $docketField->is_dependent;
        $docket_field->docket_prefiller_id = $docketField->docket_prefiller_id;
        $docket_field->csv_header = $docketField->csv_header;
        $docket_field->is_show = $docketField->is_show;
        if ($docket_field->save()){
            if($docketField->exportMapping){
                $exportMapping = new ExportMapping();
                $exportMapping->docket_field_id = $docket_field->id;
                $exportMapping->value = $docketField->exportMapping->value;
                $exportMapping->save();
            }

            if($docketField->docketPreFiller){
                foreach ($docketField->docketPreFiller as $docketPreFillers ){
                    $adddocketPreFiller = new DocketFiledPreFiller();
                    $adddocketPreFiller->docket_field_id = $docket_field->id;
                    $adddocketPreFiller->value = $docketPreFillers->value;
                    $adddocketPreFiller->index = $docketPreFillers->index;
                    $adddocketPreFiller->root_id = $docketPreFillers->root_id;
                    $adddocketPreFiller->save();
                }



            }

            if ($docketField->docketInvoiceField){
                $docketInvoiceField = new DocketInvoiceField();
                $docketInvoiceField->docket_field_id =  $docket_field->id;
                $docketInvoiceField->docket_id = $docketField->docketInvoiceField->docket_id;
                $docketInvoiceField->save();
            }

            if ($docketField->docketPreviewField){
                $docketPreviewFields = new DocketPreviewField();
                $docketPreviewFields->docket_field_id =  $docket_field->id;
                $docketPreviewFields->docket_id = $docketField->docketPreviewField->docket_id;
                $docketPreviewFields->order = $docketField->docketPreviewField->order;
                $docketPreviewFields->save();
            }

            if($docketField->docketFieldDateOption){
                $adddocketFieldDateOption = new DocketFieldDateOption();
                $adddocketFieldDateOption->time = $docketField->docketFieldDateOption->time;
                $adddocketFieldDateOption->date = $docketField->docketFieldDateOption->date;
                $adddocketFieldDateOption->docket_field_id = $docket_field->id;
                $adddocketFieldDateOption->save();
            }

            if($categoryId == 22){
                $formulaArray = array();
                $data = array();

                foreach ($docketField->girdFields as $docketGridField){
                    $docket_grid_field = new DocketFieldGrid();
                    $docket_grid_field->docket_field_id =$docket_field->id;
                    $docket_grid_field->docket_field_category_id =$docketGridField->docket_field_category_id;
                    $docket_grid_field->order =$docketGridField->order;
                    $docket_grid_field->label =$docketGridField->label;
                    $docket_grid_field->default_prefiller_id =$docketGridField->default_prefiller_id;
                    $docket_grid_field->auto_field =$docketGridField->auto_field;
                    $docket_grid_field->is_dependent =$docketGridField->is_dependent;
                    $docket_grid_field->docket_prefiller_id =$docketGridField->docket_prefiller_id;
                    $docket_grid_field->is_deleted =$docketGridField->is_deleted;
                    $docket_grid_field->sumable =$docketGridField->sumable;
                    $docket_grid_field->csv_header =$docketGridField->csv_header;
                    $docket_grid_field->is_show =$docketGridField->is_show;
                    $docket_grid_field->export_value =$docketGridField->export_value;
                    if($docket_grid_field->save()){
                        $data[] = array(
                            'newId'=>$docket_grid_field->id,
                            'oldId'=>$docketGridField->id
                        );

                        if($docketGridField->docket_field_category_id == 3){

//                            if($docketGridField->gridFieldFormula != null){
//                                $gridFormula = new GridFieldFormula();
//                                $gridFormula->docket_field_grid_id = $docket_grid_field->id;
//                                $gridFormula->user_id = $docketGridField->gridFieldFormula->user_id;
//                                $gridFormula->formula = serialize(array());
//                                $gridFormula->save();
//                            }

                            if($docketGridField->gridFieldPreFiller){
                                foreach ($docketGridField->gridFieldPreFiller as $gridFieldPreFillers){
                                    $gridFieldPreFiller = new DocketGridPrefiller();
                                    $gridFieldPreFiller->docket_field_grid_id = $docket_grid_field->id;
                                    $gridFieldPreFiller->value = $gridFieldPreFillers->value;
                                    $gridFieldPreFiller->index = $gridFieldPreFillers->index;
                                    $gridFieldPreFiller->root_id =  $gridFieldPreFillers->root_id;
                                    $gridFieldPreFiller->save();
                                }
                            }
                            if($docketGridField->gridFieldAutoPreFiller){
                                foreach ($docketGridField->gridFieldAutoPreFiller as $gridFieldAutoPreFillers){
                                    $gridFieldPreFiller = new DocketGridAutoPrefiller();
                                    $gridFieldPreFiller->grid_field_id = $docket_grid_field->id;
                                    $gridFieldPreFiller->index = $gridFieldAutoPreFillers->index;
                                    $gridFieldPreFiller->link_grid_field_id = $gridFieldAutoPreFillers->link_grid_field_id;
                                    $gridFieldPreFiller->docket_field_id =  $gridFieldAutoPreFillers->docket_field_id;
                                    $gridFieldPreFiller->save();
                                }
                            }

                        }elseif($docketGridField->docket_field_category_id == 1 || $docketGridField->docket_field_category_id == 2 || $docket_grid_field->docket_field_category_id == 4){
                            if($docketGridField->gridFieldPreFiller){
                                foreach ($docketGridField->gridFieldPreFiller as $gridFieldPreFillers){
                                    $gridFieldPreFiller = new DocketGridPrefiller();
                                    $gridFieldPreFiller->docket_field_grid_id = $docket_grid_field->id;
                                    $gridFieldPreFiller->value = $gridFieldPreFillers->value;
                                    $gridFieldPreFiller->index = $gridFieldPreFillers->index;
                                    $gridFieldPreFiller->root_id =  $gridFieldPreFillers->root_id;
                                    $gridFieldPreFiller->save();
                                }
                            }
                            if($docket_grid_field->gridFieldAutoPreFiller){
                                foreach ($docket_grid_field->gridFieldAutoPreFiller as $gridFieldAutoPreFillers){
                                    $gridFieldPreFiller = new DocketGridAutoPrefiller();
                                    $gridFieldPreFiller->grid_field_id = $docket_grid_field->id;
                                    $gridFieldPreFiller->index = $gridFieldAutoPreFillers->index;
                                    $gridFieldPreFiller->link_grid_field_id = $gridFieldAutoPreFillers->link_grid_field_id;
                                    $gridFieldPreFiller->docket_field_id =  $gridFieldAutoPreFillers->docket_field_id;
                                    $gridFieldPreFiller->save();
                                }
                            }

                        }

                    }
                }

//                foreach ($docketField->girdFields as $docketGridFields){
//                    if($docketGridFields->docket_field_category_id == 3){
//                        if($docketGridFields->gridFieldFormula != null) {
//                            $giridFieldFormula = $docketGridFields->gridFieldFormula->formula;
//                            foreach (unserialize($giridFieldFormula) as $formulaValues) {
//                                if (is_numeric($formulaValues)) {
//                                    $formulaArray[] = array(
//                                        "value" => $formulaValues,
//                                        "type" => "number",
//
//                                    );
//                                } elseif (preg_match("/TDiff/i", $formulaValues)) {
//                                    $formulaArray[] = array(
//                                        "value" => $formulaValues,
//                                        "type" => "function",
//
//                                    );
//                                } elseif (preg_match("/cell/i", $formulaValues)) {
//                                    $formulaArray[] = array(
//                                        "value" => ltrim($formulaValues, 'cell'),
//                                        "type" => "cell",
//
//                                    );
//
//                                } else {
//                                    $formulaArray[] = array(
//                                        "value" => $formulaValues,
//                                        "type" => "operator",
//
//                                    );
//                                }
//                            }
//                        }
//                    }
//                }
//                dd($formulaArray);






            }

            elseif($categoryId == 7){
                foreach ($docketField->unitRate as $row){
                    $docketunitrate = new DocketUnitRate();
                    $docketunitrate->docket_field_id = $docket_field->id;
                    $docketunitrate->label = $row->label;
                    $docketunitrate->type = $row->type;
                    $docketunitrate->csv_header = $row->csv_header;
                    $docketunitrate->is_show = $row->is_show;
                    $docketunitrate->save();
                }
            }
            else if($categoryId == 3){
                if($docketField->docketFieldNumbers){
                    $docketNumberField = new DocketFieldNumber();
                    $docketNumberField->docket_field_id = $docket_field->id;
                    $docketNumberField->min = $docketField->docketFieldNumbers->min;
                    $docketNumberField->max = $docketField->docketFieldNumbers->max;
                    $docketNumberField->tolerance = $docketField->docketFieldNumbers->tolerance;
                    $docketNumberField->save();
                }
            }
            else if($categoryId == 24){
                foreach ($docketField->tallyUnitRate as $tallyableRate){
                    $tallyableUnitRate = new DocketTallyableUnitRate();
                    $tallyableUnitRate->docket_field_id = $docket_field->id;
                    $tallyableUnitRate->label = $tallyableRate->label;
                    $tallyableUnitRate->type = $tallyableRate->type;
                    $tallyableUnitRate->csv_header = $tallyableRate->csv_header;
                    $tallyableUnitRate->is_show = $tallyableRate->is_show;
                    $tallyableUnitRate->save();
                }
            }

            else if($categoryId == 20){
                 foreach ($docketField->docketManualTimer as $row){
                    $docketManulaTimer = new DocketManualTimer();
                    $docketManulaTimer->docket_field_id = $docket_field->id;
                    $docketManulaTimer->type = $row->type;
                    $docketManulaTimer->label = $row->label;
                     $docketManulaTimer->csv_header = $row->csv_header;
                     $docketManulaTimer->is_show = $row->is_show;
                    $docketManulaTimer->save();
                 }
                foreach ($docketField->docketManualTimerBreak as $items){
                    $docketManualTimerBreak = new DocketManualTimerBreak();
                    $docketManualTimerBreak->docket_field_id = $docket_field->id;
                    $docketManualTimerBreak->label = $items->label;
                    $docketManualTimerBreak->type = $items->type;
                    $docketManualTimerBreak->explanation = $items->explanation;
                    $docketManualTimerBreak->csv_header = $items->csv_header;
                    $docketManualTimerBreak->is_show = $items->is_show;
                    $docketManualTimerBreak->save();
                }
            }elseif ($categoryId == 18){
                foreach ($docketField->yesNoField as $items){
                    $yesNoField = new YesNoFields();
                    $yesNoField->docket_field_id = $docket_field->id;
                    $yesNoField->label = $items->label;
                    $yesNoField->type = $items->type;
                    $yesNoField->explanation = $items->explanation;
                    $yesNoField->colour = $items->colour;
                    $yesNoField->icon_image = $items->icon_image;
                    $yesNoField->label_type = $items->label_type;
                    $yesNoField->csv_header = $items->csv_header;
                    $yesNoField->is_show = $items->is_show;
                    if ($yesNoField->save()){
                        foreach ($items->yesNoDocketsField as $row){
                            $yesNoDocketsField = new  YesNoDocketsField();
                            $yesNoDocketsField->yes_no_field_id = $yesNoField->id;
                            $yesNoDocketsField->docket_field_category_id = $row->docket_field_category_id;
                            $yesNoDocketsField->order = $row->order;
                            $yesNoDocketsField->required = $row->required;
                            $yesNoDocketsField->label = $row->label;
                            $yesNoDocketsField->csv_header = $row->csv_header;
                            $yesNoDocketsField->is_show = $row->is_show;
                            $yesNoDocketsField->save();

                        }
                    }
                }

            }
            elseif ($categoryId == 30){
                if($docketField->docketConstantField){
                    $docketFieldConstant = new DocketConstantField();
                    $docketFieldConstant->docket_field_id = $docket_field->id;
                    $docketFieldConstant->label = $docketField->docketConstantField->label;
                    $docketFieldConstant->csv_header = $docketField->docketConstantField->csv_header;
                    $docketFieldConstant->is_show = $docketField->docketConstantField->is_show;
                    $docketFieldConstant->export_mapping_field_category_id = $docketField->docketConstantField->export_mapping_field_category_id;
                    $docketFieldConstant->save();

                }


            }




//           if ($categoryId == 22){
//               foreach ($docketField->girdFields as $docketGridField){
//                   $docket_grid_field = new DocketFieldGrid();
//                   $docket_grid_field->docket_field_id =$docket_field->id;
//                   $docket_grid_field->docket_field_category_id =$docketGridField->docket_field_category_id;
//                   $docket_grid_field->order =$docketGridField->order;
//                   $docket_grid_field->label =$docketGridField->label;
//                   $docket_grid_field->save();
//               }
//           }elseif ($categoryId == 7){
//               foreach ($docketField->unitRate as $row){
//                   $docketunitrate = new DocketUnitRate();
//                   $docketunitrate->docket_field_id = $docket_field->id;
//                   $docketunitrate->label = $row->label;
//                   $docketunitrate->type = $row->type;
//                   $docketunitrate->save();
//               }
//           }elseif ($categoryId == 18){
//               foreach ($docketField->yesNoField as $items){
//                   $yesNoField = new YesNoFields();
//                   $yesNoField->docket_field_id = $docket_field->id;
//                   $yesNoField->label = $items->label;
//                   $yesNoField->type = $items->type;
//                   $yesNoField->explanation = $items->explanation;
//                   $yesNoField->colour = $items->colour;
//                   $yesNoField->icon_image = $items->icon_image;
//                   $yesNoField->label_type = $items->label_type;
//                   if ($yesNoField->save()){
//                       foreach ($items->yesNoDocketsField as $row){
//                           $yesNoDocketsField = new  YesNoDocketsField();
//                           $yesNoDocketsField->yes_no_field_id = $yesNoField->id;
//                           $yesNoDocketsField->docket_field_category_id = $row->docket_field_category_id;
//                           $yesNoDocketsField->order = $row->order;
//                           $yesNoDocketsField->required = $row->required;
//                           $yesNoDocketsField->label = $row->label;
//                           $yesNoDocketsField->save();
//
//                       }
//                   }
//               }
//
//           }elseif ($categoryId == 3){
//               $docketNumberField = new DocketFieldNumber();
//               $docketNumberField->docket_field_id = $docket_field->id;
//               $docketNumberField->save();
//           }elseif ($categoryId == 24){
//               foreach ($docketField->tallyUnitRate as $tallyableRate){
//                   $tallyableUnitRate = new DocketTallyableUnitRate();
//                   $tallyableUnitRate->docket_field_id = $docket_field->id;
//                   $tallyableUnitRate->label = $tallyableRate->label;
//                   $tallyableUnitRate->type = $tallyableRate->type;
//                   $tallyableUnitRate->save();
//               }
//
//           }
//           elseif ($categoryId == 20){
//
//               foreach ($docketField->docketManualTimer as $row){
//                   $docketManulaTimer = new DocketManualTimer();
//                   $docketManulaTimer->docket_field_id = $docket_field->id;
//                   $docketManulaTimer->type = $row->type;
//                   $docketManulaTimer->label = $row->label;
//                   $docketManulaTimer->save();
//               }
//
//               foreach ($docketField->docketManualTimerBreak as $items){
//                   $docketManualTimerBreak = new DocketManualTimerBreak();
//                   $docketManualTimerBreak->docket_field_id = $docket_field->id;
//                   $docketManualTimerBreak->label = $items->label;
//                   $docketManualTimerBreak->type = $items->type;
//                   $docketManualTimerBreak->explanation = $items->explanation;
//                   $docketManualTimerBreak->save();
//               }
//           }





        }


        return $this->defaultDocketElementTemplate($docket_field->id, $request->docket_id);


    }


    public function saveAdvanceHeader(Request $request){
        $this->validate($request,['field_id'   => 'required', 'docket_id' =>  'required']);
        $docketField = DocketField::where('id',$request->field_id)->where('docket_id',$request->docket_id);
        if ($docketField->count() != 0){
            DocketField::where('id',$request->field_id)->where('docket_id',$request->docket_id)->update(['label'=>$request->message]);
            return response()->json(['data'=>$request->message ]);

        }

    }

    public function saveImageInstruction(Request $request){
        $this->validate($request,['field_id'   => 'required', 'docket_id' =>  'required']);
        try{
            $docketField = DocketField::where('id',$request->field_id)->where('docket_id',$request->docket_id);
            if ($docketField->count() != 0){
                $imageInstructionArray = [];
                if($request->has('files')){
                    foreach ($request->files as $files){
                        foreach ($files as $file){
                            // $filename = 'image_instruction' . time() . rand() .'.'. $file->getClientOriginalExtension();
                            // $desc = 'files/image_instruction';
                            // $file->move($desc, $filename);
                            // array_push($imageInstructionArray,asset($desc .'/'.$filename));

                            array_push($imageInstructionArray,FunctionUtils::imageUpload($dest,$file));
                        }
                    }
                }
                if($request->has('oldImageInstruction')){
                    foreach ($request->oldImageInstruction as $oldImageInstruction){
                        array_push($imageInstructionArray,$oldImageInstruction);
                    }
                }
                DocketField::where('id',$request->field_id)->where('docket_id',$request->docket_id)->update(['default_value'=>json_encode($imageInstructionArray)]);
                return response()->json(['status'=>true ]);
            }
        }catch(\Exception $ex){
            return response()->json(['status'=>false ]);
        }
    }



    public static function convertHrsMin($parameter) {
        $minutes =  ($parameter/(1000*60))%60;
        $hours = ($parameter /(1000*60*60))%1000000;
        $hours = ($hours < 10) ? "0" + $hours : $hours;
        $minutes = ($minutes < 10) ? "0" + $minutes : $minutes;

        if ($hours == 1 || $hours == 0 ){
            $hoursParm = " Hour";
        }else{
            $hoursParm = " Hours";
        }

        if ($minutes == 1 || $minutes == 0 ){
            $minutesParm = " Minute";
        }else{
            $minutesParm = " Minutes";
        }

        return $hours.$hoursParm ." ".$minutes.$minutesParm;
    }



    public function templateBank(){
        $matchedIDArray     =   array();
        if (Input::get('search')){
            $searchKey= Input::get('search');
            $templateBank    =   TemplateBank::get();
            foreach ($templateBank as $row){
                $templateValue = json_decode($row->template_value);
                if(preg_match("/".$searchKey."/i",$templateValue->docket[0]->title)){
                    $matchedIDArray[]   =   $row->id;
                    continue;
                }

                if(preg_match("/".$searchKey."/i",$row->company->name)){
                    $matchedIDArray[]   =   $row->id;
                    continue;
                }
                if($row->tag){
                    foreach (json_decode($row->tag, true) as $tags){
                        if(preg_match("/".$searchKey."/i",$tags)){
                            $matchedIDArray[]   =   $row->id;
                            continue;
                        }
                    }
                }

            }

            $templateBank = TemplateBank::whereIn('id',$matchedIDArray)->paginate(8);
            $templateBank->appends(['search' => $searchKey]);
            $templateBank->setPath('templateBank');
        }else{
            $templateBank = TemplateBank::paginate(8);
        }
        return view('dashboard/company/templateBank/index',compact('templateBank'));
    }

    public function searchDocketTemplate(){
        $matchedIDArray     =   array();
        if (Input::get('search')){

            $searchKey= Input::get('search');
            $templateBank    =   TemplateBank::get();
            foreach ($templateBank as $row){
                $templateValue = json_decode($row->template_value);
                if (array_key_exists("docket",$templateValue)){
                    if(preg_match("/".$searchKey."/i",$templateValue->docket[0]->title)){
                        $matchedIDArray[]   =   $row->id;
                        continue;
                    }
                }else{
                    if(preg_match("/".$searchKey."/i",$templateValue->title)){
                        $matchedIDArray[]   =   $row->id;
                        continue;
                    }
                }

                if($row->company){
                    if(preg_match("/".$searchKey."/i",$row->company->name)){
                        $matchedIDArray[]   =   $row->id;
                        continue;
                    }
                }


                if($row->tag){
                    foreach (json_decode($row->tag, true) as $tags){
                        if(preg_match("/".$searchKey."/i",$tags)){
                            $matchedIDArray[]   =   $row->id;
                            continue;
                        }
                    }
                }

            }

            $templateBank = TemplateBank::whereIn('id',$matchedIDArray)->paginate(8);
            $templateBank->appends(['search' => $searchKey]);
            $templateBank->setPath('templateBank');
            return view('dashboard/company/templateBank/filterData',compact('templateBank'));

        }else{
            $templateBank = TemplateBank::paginate(8);
            $templateBank->setPath('templateBank');
            return view('dashboard/company/templateBank/filterData',compact('templateBank'));
        }

    }

    public function templatePreview($id){
        $template   =   TemplateBank::find($id);
        return view('dashboard/company/templateBank/preview',compact('template'));
    }



    public  function templateDataz($docketid){
        $docket  =   Docket::where('id',$docketid)->select('title','invoiceable','docketApprovalType','timer_attachement','xero_timesheet')->get()->toArray();
        $docketfield = DocketField::where('docket_id',$docketid)->select('id','docket_field_category_id','required','order','label')->get();
        $docketFields= array();
        $sn = 1;
        foreach ($docketfield as $row){
            $docketunitrate  =   array();
            $docketFooter=array();
            $breakSubField = array();
            $subFieldTimer = array();
            $docketAttachement=array();
            if($row->docket_field_category_id == 7){
                $docketunitrate    =    DocketUnitRate::select('type','label')->where("docket_field_id",$row->id)->orderBy('type','asc')->get();
                $docketFields[] =   array(
                    'docket_field_category_id'  =>  $row->docket_field_category_id,
                    'label'     =>  $row->label,
                    'order'     =>  $sn,
                    'required'     =>  $row->required,
                    'subField'  =>  $docketunitrate);

            }
            elseif ($row->docket_field_category_id == 13){
                $docketFooter   =    DocketFieldFooter::select('value')->where("field_id",$row->id)->get();
                $docketFields[] =   array(
                    'docket_field_category_id'  =>  $row->docket_field_category_id,
                    'label'     =>  $row->label,
                    'order'     =>  $sn,
                    'required'     =>  $row->required,
                    'subField'  =>  $docketFooter);
            }
            elseif ($row->docket_field_category_id==3){
                $docketFieldNumber = DocketFieldNumber::select('min', 'max','tolerance')->where("docket_field_id", $row->id)->first();
                if ($docketFieldNumber==null){
                    $docketFieldNumbers = array(
                        'min' => null,
                        'max' => null,
                        'tolerance' => null,
                    );
                }else{
                    $docketFieldNumbers= $docketFieldNumber;

                }
                $docketFields[] = array('id' => $row->id,
                    'docket_field_category_id' => $row->docket_field_category_id,
                    'label' => $row->label,
                    'order' => $sn,
                    'required'=>$row->required,
                    'config'=>$docketFieldNumbers,
                    'subField'  =>  array());

            }
            elseif($row->docket_field_category_id == 24){
                $subField = DocketTallyableUnitRate::select('id', 'type', 'label')->where("docket_field_id", $row->id)->orderBy('type', 'asc')->get();
                $docketFields[] =   array(
                    'docket_field_category_id'  =>  $row->docket_field_category_id,
                    'label'     =>  $row->label,
                    'order'     =>  $sn,
                    'required'     =>  $row->required,
                    'subField'  =>  $subField);

            }
            elseif ($row->docket_field_category_id == 22){
                $subField  = array();
                foreach ($row->girdFields as $gridField)
                {
                    $data['id'] = $gridField->id;
                    $data['docket_field_id'] = $gridField->docket_field_id;
                    $data['docket_field_category_id'] = $gridField->docketFieldCategory->id;
                    $data['docket_field_category_label'] = $gridField->docketFieldCategory->title;
                    $data['label'] = $gridField->label;
                    $data['order'] = $gridField->order;
                    $data['required'] = 0;
                    array_push($subField, $data);
                }

                $docketFields[] = array('id' => $row->id,
                    'docket_field_category_id' => $row->docket_field_category_id,
                    'docket_field_category' => $row->fieldCategoryInfo->title,
                    'label' => $row->label,
                    'order' => $row->order,
                    'required'=>$row->required,
                    'subField'  => $subField);
            }
            elseif ($row->docket_field_category_id==20) {
                $subFieldTimer = DocketManualTimer::select('id', 'type', 'label')->where("docket_field_id", $row->id)->orderBy('type', 'asc')->get();
                $breakSubField = DocketManualTimerBreak::select('id','type', 'label','explanation')->where("docket_field_id", $row->id)->orderBy('type', 'asc')->get();
                $docketFields[] = array('id' => $row->id,
                    'docket_field_category_id' => $row->docket_field_category_id,
                    'docket_field_category' => $row->fieldCategoryInfo->title,
                    'label' => $row->label,
                    'order' => $sn,
                    'required'=>$row->required,
                    'subField' => $subFieldTimer,
                    'subFieldBreak'=>$breakSubField);

            }
            elseif ($row->docket_field_category_id == 15){
                $docketAttachement   =    DocketAttachments::select('url','name')->where("docket_field_id",$row->id)->get();
                $docketFields[] =   array(
                    'docket_field_category_id'  =>  $row->docket_field_category_id,
                    'label'     =>  $row->label,
                    'order'     =>  $sn,
                    'required'     =>  $row->required,
                    'subField'  =>  $docketAttachement);
            }
            elseif($row->docket_field_category_id == 18){
                $subFields = array();
                foreach ($row->yesNoField as $subRow):
                    $subDocket = array();
                    foreach ($subRow->yesNoDocketsField as $subRowDocket):
                        $subDocket[] = array(
                            'id' => $subRowDocket->id,
                            'docket_field_category_id' => $subRowDocket->docket_field_category_id,
                            'order' => $subRowDocket->order,
                            'required' => $subRowDocket->required,
                            'label' => $subRowDocket->label,
                        );
                    endforeach;
                    $subFields[] = array(
                        'id' => $subRow->id,
                        'label' => $subRow->label,
                        'type' => $subRow->type,
                        'colour' => $subRow->colour,
                        'explanation' => $subRow->explanation,
                        'docket_field_id' => $subRow->docket_field_id,
                        'label_icon' => $subRow->icon_image,
                        'label_type' => $subRow->label_type,
                        'subDocket' => $subDocket,
                    );
                endforeach;
                $docketFields[] = array(
                    'docket_field_category_id' => $row->docket_field_category_id,
                    'label' => $row->label,
                    'order' => $sn,
                    'required' => $row->required,
                    'subField' => $subFields);

            }
            else{
                $docketFields[] =   array(
                    'docket_field_category_id'  =>  $row->docket_field_category_id,
                    'label'     =>  $row->label,
                    'order'     =>  $sn,
                    'required'     =>  $row->required,
                    'subField'  =>  array(),

                );
            }
            $sn++;

        }
        $exportDocket = array_merge($docket,[$docketFields]);
        $exportDockets["docket"]    =    $docket;
        $exportDockets["docket_field"]    =    $docketFields;
        $data = json_encode($exportDockets);
        return $data;

    }


    public function templateData($docketid){
        $docket =Docket::findOrFail($docketid);
        $docketFields = array();
        $sn = 1;
        foreach ($docket->docketField as $row){
            if($row->docket_field_category_id == 7){
                  ($row->unitRate) ? $row->unitRate->toArray() :  null;
                $docketFields[] = array("docket_field"=>$row->toArray(),
                    'export_rules'=> ($row->exportMapping) ? $row->exportMapping->toArray() :  null,
                );
            }
            elseif($row->docket_field_category_id == 13){
                 ($row->docketFieldFooter) ? $row->docketFieldFooter->toArray() :  null;
                $docketFields[] = array("docket_field"=>$row->toArray(),
                    'export_rules'=> ($row->exportMapping) ? $row->exportMapping->toArray() :  null,
                );
            }
            elseif($row->docket_field_category_id == 3){
                ($row->docketFieldNumbers) ? $row->docketFieldNumbers->toArray() :  null;
                ($row->docketPreFiller) ? $row->docketPreFiller->toArray() :  null;
                ($row->prefillerEcowise) ? $row->prefillerEcowise->toArray() :  null;
                $docketFields[] = array("docket_field"=>$row->toArray(),
                    'export_rules'=> ($row->exportMapping) ? $row->exportMapping->toArray() :  null,
                );

            }
            elseif($row->docket_field_category_id == 24){
                ($row->tallyUnitRate) ? $row->tallyUnitRate->toArray() :  null;
                $docketFields[] = array("docket_field"=>$row->toArray(),
                    'export_rules'=> ($row->exportMapping) ? $row->exportMapping->toArray() :  null,
                );
            }
            elseif($row->docket_field_category_id == 22){

                ($row->girdFields) ? $row->girdFields->toArray() :  null;
                foreach ($row->girdFields as $subRow):
                    ($subRow->gridFieldPreFiller) ? $subRow->gridFieldPreFiller->toArray() :  null;
                    ($subRow->gridFieldAutoPreFiller) ? $subRow->gridFieldAutoPreFiller->toArray() :  null;
                    ($subRow->gridFieldFormula) ? $subRow->gridFieldFormula->toArray() :  null;
                endforeach;
                $docketFields[] = array("docket_field"=>$row->toArray(),
                    'export_rules'=> ($row->exportMapping) ? $row->exportMapping->toArray() :  null,
                );


            }
            elseif($row->docket_field_category_id == 20){
                ($row->docketManualTimer) ? $row->docketManualTimer->toArray() :  null;
                ($row->docketManualTimerBreak) ? $row->docketManualTimerBreak->toArray() :  null;
                $docketFields[] = array("docket_field"=>$row->toArray(),
                    'export_rules'=> ($row->exportMapping) ? $row->exportMapping->toArray() :  null,
                );
            }
            else if($row->docket_field_category_id == 15){
                ($row->docketAttached) ? $row->docketAttached->toArray() :  null;
                $docketFields[] = array("docket_field"=>$row->toArray(),
                    'export_rules'=> ($row->exportMapping) ? $row->exportMapping->toArray() :  null,
                );

            }
            else if($row->docket_field_category_id == 18){
                ($row->yesNoField) ? $row->yesNoField->toArray() :  null;
                foreach ($row->yesNoField as $subRow):
                    ($subRow->yesNoDocketsField) ? $subRow->yesNoDocketsField->toArray() :  null;
                endforeach;
                $docketFields[] = array("docket_field"=>$row->toArray(),
                    'export_rules'=> ($row->exportMapping) ? $row->exportMapping->toArray() :  null,
                );
            }
            else{
                ($row->docketPreFiller) ? $row->docketPreFiller->toArray() :  null;
                $docketFields[] = array("docket_field"=>$row->toArray(),
                    'export_rules'=> ($row->exportMapping) ? $row->exportMapping->toArray() :  null,
                );
            }
        }

        $data = json_encode($docket);
        return $data;
    }


    public function publishDocketTemplate(Request $request){
        $this->validate($request,['docket_id'   => 'required','publish_docket_type'=>'required']);
        if ($request->tag){
            $tag =json_encode(explode(",",$request->tag)) ;
        }else{
            $tag = "";
        }
          $docketid = $request->docket_id;
          if ($request->publish_docket_type == 1){
              $jsonData =  $this->templateData($docketid);
              $template = new TemplateBank();
              $template->template_id = $docketid;
              $template->template_value = $jsonData;
              $template->user_id = Auth::user()->id;
              $template->tag = $tag;
              $template->company_id = Session::get('company_id');
              if($template->save()){
                 Docket::where('id',$docketid)->update(['updated_at'=> Carbon::now()]);
              }
              $html = '<a title="Archive"  class="unpublishDocket" data-toggle="modal" data-target="#unpublishDocket" data-id="'.$docketid.'"><i class="fa fa-share" aria-hidden="true"></i> Unpublish</a>';
              return response()->json(['status'=>true ,'data'=>$html]);
           }else if ($request->publish_docket_type == 2){
//              $templateBank = TemplateBank::where('id',$docketid);
                $temp = TemplateBank::findorFail($request->templateBankId);
                $jsonData =  $this->templateData($docketid);
                $temp->template_value = $jsonData;
                $temp->tag = $tag;
                $temp->save();
                $html = '<a title="Archive"  class="unpublishDocket" data-toggle="modal" data-target="#unpublishDocket" data-id="'.$docketid.'"><i class="fa fa-share" aria-hidden="true"></i> Unpublish</a>';
                return response()->json(['status'=>true ,'data'=>$html]);
            }



    }

    public function unpublishDocketTemplate(Request $request){
        $this->validate($request,['docket_id'   => 'required']);
        $docketid = $request->docket_id;
        $templateBank = TemplateBank::where('template_id',$docketid);
        if ($templateBank->count()==1){
            $templateBank->delete();
            $html = '<a title="Archive"  class="publishDocket" data-toggle="modal" data-target="#publishDocket" data-id="'.$docketid.'"><i class="fa fa-share" aria-hidden="true"></i> Publish</a>';
            return response()->json(['status'=>true ,'data'=>$html]);
        }




    }

    public  function installDocketTemplate(Request $request){
        $templateBank = TemplateBank::where('id',$request->docket_id)->first();
        if ($templateBank != null){
          $templateValue = json_decode($templateBank['template_value'],true);
            foreach ($templateValue['docket'] as $docketObject) {
                $docket = new Docket();
                $docket->title = $docketObject["title"];
                $docket->subTitle = '';
                $docket->user_id = Auth::user()->id;
                $docket->company_id = Session::get('company_id');
                $docket->invoiceable = $docketObject["invoiceable"];
                $docket->docketApprovalType = $docketObject["docketApprovalType"];
                $docket->timer_attachement = $docketObject["timer_attachement"];
//                $docket->theme_document_id = $docketObject["theme_document_id"];
                $docket->theme_document_id = 0;
                $docket->xero_timesheet  =   (array_key_exists("xero_timesheet",$docketObject))?$docketObject["xero_timesheet"]:0;
                if ($docket->save()) {

                    foreach ($templateValue['docket_field'] as $docketfieldObject) {

                        if (DocketFiledCategory::where('id',$docketfieldObject["docket_field_category_id"])->count()) {
                            $docketfield = new DocketField();
                            $docketfield->docket_id = $docket->id;
                            $docketfield->docket_field_category_id = $docketfieldObject["docket_field_category_id"];
                            $docketfield->order = $docketfieldObject["order"];
                            $docketfield->label = $docketfieldObject["label"];
                            $docketfield->required = ($docketfieldObject["required"] == 1) ? 1 : 0;
                            if($docketfield->save()) {

                                if ($docketfield->docket_field_category_id == 7){
                                    if (DocketUnitRate::where('docket_field_id', $docketfield->id)->count()){
                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                            $docketunitrate = new DocketUnitRate();
                                            $docketunitrate->docket_field_id = $docketfield->id;
                                            $docketunitrate->type = $subFieldObject["type"];
                                            $docketunitrate->label = $subFieldObject["label"];
                                            $docketunitrate->save();
                                        }
                                    }else {
                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                            $docketunitrate = new DocketUnitRate();
                                            $docketunitrate->docket_field_id = $docketfield->id;
                                            $docketunitrate->type = $subFieldObject["type"];
                                            $docketunitrate->label = $subFieldObject["label"];
                                            $docketunitrate->save();
                                        }
                                    }
                                }elseif ($docketfield->docket_field_category_id == 13){
                                    if (DocketFieldFooter::where('field_id', $docketfield->id)->count()){
                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                            $docketFieldFooter = new DocketFieldFooter();
                                            $docketFieldFooter->field_id = $docketfield->id;
                                            $docketFieldFooter->docket_id = $docket->id;
                                            $docketFieldFooter->value = $subFieldObject["value"];
                                            $docketFieldFooter->save();
                                        }
                                    }else {
                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                            $docketFieldFooter = new DocketFieldFooter();
                                            $docketFieldFooter->field_id = $docketfield->id;
                                            $docketFieldFooter->docket_id = $docket->id;
                                            $docketFieldFooter->value = $subFieldObject["value"];
                                            $docketFieldFooter->save();
                                        }
                                    }

                                }elseif($docketfield->docket_field_category_id == 20){
                                    if (DocketManualTimer::where('docket_field_id', $docketfield->id)->count()){
                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                            $docketManualTimer = new DocketManualTimer();
                                            $docketManualTimer->docket_field_id = $docketfield->id;
                                            $docketManualTimer->type = $subFieldObject["type"];
                                            $docketManualTimer->label = $subFieldObject["label"];
                                            $docketManualTimer->save();
                                        }
                                        foreach ($docketfieldObject['subFieldBreak'] as $subFieldObjects) {
                                            $docketManualTimerBreak = new DocketManualTimerBreak();
                                            $docketManualTimerBreak->docket_field_id = $docketfield->id;
                                            $docketManualTimerBreak->type = $subFieldObjects["type"];
                                            $docketManualTimerBreak->label = $subFieldObjects["label"];
                                            $docketManualTimerBreak->explanation = $subFieldObjects["explanation"];
                                            $docketManualTimerBreak->save();
                                        }

                                    }else{
                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                            $docketManualTimer = new DocketManualTimer();
                                            $docketManualTimer->docket_field_id = $docketfield->id;
                                            $docketManualTimer->type = $subFieldObject["type"];
                                            $docketManualTimer->label = $subFieldObject["label"];
                                            $docketManualTimer->save();
                                        }
                                        foreach ($docketfieldObject['subFieldBreak'] as $subFieldObjects) {
                                            $docketManualTimerBreak = new DocketManualTimerBreak();
                                            $docketManualTimerBreak->docket_field_id = $docketfield->id;
                                            $docketManualTimerBreak->type = $subFieldObjects["type"];
                                            $docketManualTimerBreak->label = $subFieldObjects["label"];
                                            $docketManualTimerBreak->explanation = $subFieldObjects["explanation"];
                                            $docketManualTimerBreak->save();
                                        }
                                    }
                                }elseif ($docketfield->docket_field_category_id == 15){
                                    if (DocketAttachments::where('docket_field_id', $docketfield->id)->count()){
                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                            $docketAttachment = new DocketAttachments();
                                            $docketAttachment->docket_field_id = $docketfield->id;
                                            $docketAttachment->url = $subFieldObject["url"];
                                            $docketAttachment->name = $subFieldObject["name"];
                                            $docketAttachment->save();
                                        }
                                    }else {
                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                            $docketAttachment = new DocketAttachments();
                                            $docketAttachment->docket_field_id = $docketfield->id;
                                            $docketAttachment->url = $subFieldObject["url"];
                                            $docketAttachment->name = $subFieldObject["name"];
                                            $docketAttachment->save();
                                        }
                                    }

                                }

                                elseif ($docketfield->docket_field_category_id == 24){
                                    if (DocketTallyableUnitRate::where('docket_field_id', $docketfield->id)->count()){
                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                            $docketunitrate = new DocketTallyableUnitRate();
                                            $docketunitrate->docket_field_id = $docketfield->id;
                                            $docketunitrate->type = $subFieldObject["type"];
                                            $docketunitrate->label = $subFieldObject["label"];
                                            $docketunitrate->save();
                                        }
                                    }else {
                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                            $docketunitrate = new DocketTallyableUnitRate();
                                            $docketunitrate->docket_field_id = $docketfield->id;
                                            $docketunitrate->type = $subFieldObject["type"];
                                            $docketunitrate->label = $subFieldObject["label"];
                                            $docketunitrate->save();
                                        }
                                    }

                                }
                                elseif($docketfield->docket_field_category_id == 22){
                                    foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                        $docket_grid_field = new DocketFieldGrid();
                                        $docket_grid_field->docket_field_id = $docketfield['id'];
                                        $docket_grid_field->docket_field_category_id = $subFieldObject['docket_field_category_id'];
                                        $docket_grid_field->order = $subFieldObject['order'];
                                        $docket_grid_field->label = $subFieldObject['label'];
                                        $docket_grid_field->save();

                                    }

                                }
                                elseif ($docketfield->docket_field_category_id == 18){
                                    foreach ($docketfieldObject['subField'] as $subFieldObject) {
                                        $yesnofield = new YesNoFields();
                                        $yesnofield->docket_field_id = $docketfield->id;
                                        $yesnofield->label = $subFieldObject["label"];
                                        $yesnofield->type = $subFieldObject["type"];
                                        $yesnofield->colour = $subFieldObject["colour"];
                                        $yesnofield->explanation = $subFieldObject["explanation"];
                                        $yesnofield->icon_image = $subFieldObject["label_icon"];
                                        $yesnofield->label_type = $subFieldObject["label_type"];
                                        if($yesnofield->save()){
                                            foreach ($subFieldObject["subDocket"] as $subDocket){
                                                $yesnoSubdocket = new YesNoDocketsField();
                                                $yesnoSubdocket->yes_no_field_id = $yesnofield->id;
                                                $yesnoSubdocket->docket_field_category_id = $subDocket["docket_field_category_id"];
                                                $yesnoSubdocket->order = $subDocket["order"];
                                                $yesnoSubdocket->required = $subDocket["required"];
                                                $yesnoSubdocket->label = $subDocket["label"];
                                                $yesnoSubdocket->save();
                                            }


                                        }

                                    }



                                }



                            }

                        }else{
                            flash('Invalid file format', 'warning');
                            return redirect()->back();
                        }
                    }

                   $downloadCount =  $templateBank->downloads;
                    $totalCount = $downloadCount+1;
                    $templateBank->update(['downloads'=>$totalCount]);
                    flash('Template installed successfully. Please click “Docket Book Manager >> Docket Templates” from the menu to view it.', 'success');
                    return redirect()->back();
                }
            }
        }else{
            flash('Invalid Action', 'warning');
            return redirect()->back();
        }

    }

//    public function installDocketTemplate(Request $request ){
//        $templateBank = TemplateBank::where('id',$request->docket_id)->first();
//        if ($templateBank != null){
//            $templateValue = json_decode($templateBank['template_value'],true);
//            if (array_key_exists("docket",$templateValue)){
//                foreach ($templateValue['docket'] as $docketObject) {
//                    $docket = new Docket();
//                    $docket->title = $docketObject["title"];
//                    $docket->subTitle = '';
//                    $docket->user_id = Auth::user()->id;
//                    $docket->company_id = Session::get('company_id');
//                    $docket->invoiceable = $docketObject["invoiceable"];
//                    $docket->docketApprovalType = $docketObject["docketApprovalType"];
//                    $docket->timer_attachement = $docketObject["timer_attachement"];
////                $docket->theme_document_id = $docketObject["theme_document_id"];
//                    $docket->theme_document_id = 0;
//                    $docket->xero_timesheet  =   (array_key_exists("xero_timesheet",$docketObject))?$docketObject["xero_timesheet"]:0;
//                    if ($docket->save()) {
//
//                        foreach ($templateValue['docket_field'] as $docketfieldObject) {
//
//                            if (DocketFiledCategory::where('id',$docketfieldObject["docket_field_category_id"])->count()) {
//                                $docketfield = new DocketField();
//                                $docketfield->docket_id = $docket->id;
//                                $docketfield->docket_field_category_id = $docketfieldObject["docket_field_category_id"];
//                                $docketfield->order = $docketfieldObject["order"];
//                                $docketfield->label = $docketfieldObject["label"];
//                                $docketfield->required = ($docketfieldObject["required"] == 1) ? 1 : 0;
//                                if($docketfield->save()) {
//
//                                    if ($docketfield->docket_field_category_id == 7){
//                                        if (DocketUnitRate::where('docket_field_id', $docketfield->id)->count()){
//                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
//                                                $docketunitrate = new DocketUnitRate();
//                                                $docketunitrate->docket_field_id = $docketfield->id;
//                                                $docketunitrate->type = $subFieldObject["type"];
//                                                $docketunitrate->label = $subFieldObject["label"];
//                                                $docketunitrate->save();
//                                            }
//                                        }else {
//                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
//                                                $docketunitrate = new DocketUnitRate();
//                                                $docketunitrate->docket_field_id = $docketfield->id;
//                                                $docketunitrate->type = $subFieldObject["type"];
//                                                $docketunitrate->label = $subFieldObject["label"];
//                                                $docketunitrate->save();
//                                            }
//                                        }
//                                    }elseif ($docketfield->docket_field_category_id == 13){
//                                        if (DocketFieldFooter::where('field_id', $docketfield->id)->count()){
//                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
//                                                $docketFieldFooter = new DocketFieldFooter();
//                                                $docketFieldFooter->field_id = $docketfield->id;
//                                                $docketFieldFooter->docket_id = $docket->id;
//                                                $docketFieldFooter->value = $subFieldObject["value"];
//                                                $docketFieldFooter->save();
//                                            }
//                                        }else {
//                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
//                                                $docketFieldFooter = new DocketFieldFooter();
//                                                $docketFieldFooter->field_id = $docketfield->id;
//                                                $docketFieldFooter->docket_id = $docket->id;
//                                                $docketFieldFooter->value = $subFieldObject["value"];
//                                                $docketFieldFooter->save();
//                                            }
//                                        }
//
//                                    }elseif($docketfield->docket_field_category_id == 20){
//                                        if (DocketManualTimer::where('docket_field_id', $docketfield->id)->count()){
//                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
//                                                $docketManualTimer = new DocketManualTimer();
//                                                $docketManualTimer->docket_field_id = $docketfield->id;
//                                                $docketManualTimer->type = $subFieldObject["type"];
//                                                $docketManualTimer->label = $subFieldObject["label"];
//                                                $docketManualTimer->save();
//                                            }
//                                            foreach ($docketfieldObject['subFieldBreak'] as $subFieldObjects) {
//                                                $docketManualTimerBreak = new DocketManualTimerBreak();
//                                                $docketManualTimerBreak->docket_field_id = $docketfield->id;
//                                                $docketManualTimerBreak->type = $subFieldObjects["type"];
//                                                $docketManualTimerBreak->label = $subFieldObjects["label"];
//                                                $docketManualTimerBreak->explanation = $subFieldObjects["explanation"];
//                                                $docketManualTimerBreak->save();
//                                            }
//
//                                        }else{
//                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
//                                                $docketManualTimer = new DocketManualTimer();
//                                                $docketManualTimer->docket_field_id = $docketfield->id;
//                                                $docketManualTimer->type = $subFieldObject["type"];
//                                                $docketManualTimer->label = $subFieldObject["label"];
//                                                $docketManualTimer->save();
//                                            }
//                                            foreach ($docketfieldObject['subFieldBreak'] as $subFieldObjects) {
//                                                $docketManualTimerBreak = new DocketManualTimerBreak();
//                                                $docketManualTimerBreak->docket_field_id = $docketfield->id;
//                                                $docketManualTimerBreak->type = $subFieldObjects["type"];
//                                                $docketManualTimerBreak->label = $subFieldObjects["label"];
//                                                $docketManualTimerBreak->explanation = $subFieldObjects["explanation"];
//                                                $docketManualTimerBreak->save();
//                                            }
//                                        }
//                                    }elseif ($docketfield->docket_field_category_id == 15){
//                                        if (DocketAttachments::where('docket_field_id', $docketfield->id)->count()){
//                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
//                                                $docketAttachment = new DocketAttachments();
//                                                $docketAttachment->docket_field_id = $docketfield->id;
//                                                $docketAttachment->url = $subFieldObject["url"];
//                                                $docketAttachment->name = $subFieldObject["name"];
//                                                $docketAttachment->save();
//                                            }
//                                        }else {
//                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
//                                                $docketAttachment = new DocketAttachments();
//                                                $docketAttachment->docket_field_id = $docketfield->id;
//                                                $docketAttachment->url = $subFieldObject["url"];
//                                                $docketAttachment->name = $subFieldObject["name"];
//                                                $docketAttachment->save();
//                                            }
//                                        }
//
//                                    }
//
//                                    elseif ($docketfield->docket_field_category_id == 24){
//                                        if (DocketTallyableUnitRate::where('docket_field_id', $docketfield->id)->count()){
//                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
//                                                $docketunitrate = new DocketTallyableUnitRate();
//                                                $docketunitrate->docket_field_id = $docketfield->id;
//                                                $docketunitrate->type = $subFieldObject["type"];
//                                                $docketunitrate->label = $subFieldObject["label"];
//                                                $docketunitrate->save();
//                                            }
//                                        }else {
//                                            foreach ($docketfieldObject['subField'] as $subFieldObject) {
//                                                $docketunitrate = new DocketTallyableUnitRate();
//                                                $docketunitrate->docket_field_id = $docketfield->id;
//                                                $docketunitrate->type = $subFieldObject["type"];
//                                                $docketunitrate->label = $subFieldObject["label"];
//                                                $docketunitrate->save();
//                                            }
//                                        }
//
//                                    }
//                                    elseif($docketfield->docket_field_category_id == 22){
//                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
//                                            $docket_grid_field = new DocketFieldGrid();
//                                            $docket_grid_field->docket_field_id = $docketfield['id'];
//                                            $docket_grid_field->docket_field_category_id = $subFieldObject['docket_field_category_id'];
//                                            $docket_grid_field->order = $subFieldObject['order'];
//                                            $docket_grid_field->label = $subFieldObject['label'];
//                                            $docket_grid_field->save();
//
//                                        }
//
//                                    }
//                                    elseif ($docketfield->docket_field_category_id == 18){
//                                        foreach ($docketfieldObject['subField'] as $subFieldObject) {
//                                            $yesnofield = new YesNoFields();
//                                            $yesnofield->docket_field_id = $docketfield->id;
//                                            $yesnofield->label = $subFieldObject["label"];
//                                            $yesnofield->type = $subFieldObject["type"];
//                                            $yesnofield->colour = $subFieldObject["colour"];
//                                            $yesnofield->explanation = $subFieldObject["explanation"];
//                                            $yesnofield->icon_image = $subFieldObject["label_icon"];
//                                            $yesnofield->label_type = $subFieldObject["label_type"];
//                                            if($yesnofield->save()){
//                                                foreach ($subFieldObject["subDocket"] as $subDocket){
//                                                    $yesnoSubdocket = new YesNoDocketsField();
//                                                    $yesnoSubdocket->yes_no_field_id = $yesnofield->id;
//                                                    $yesnoSubdocket->docket_field_category_id = $subDocket["docket_field_category_id"];
//                                                    $yesnoSubdocket->order = $subDocket["order"];
//                                                    $yesnoSubdocket->required = $subDocket["required"];
//                                                    $yesnoSubdocket->label = $subDocket["label"];
//                                                    $yesnoSubdocket->save();
//                                                }
//
//
//                                            }
//
//                                        }
//
//
//
//                                    }
//
//
//
//                                }
//
//                            }else{
//                                flash('Invalid file format', 'warning');
//                                return redirect()->back();
//                            }
//                        }
//
//                        $downloadCount =  $templateBank->downloads;
//                        $totalCount = $downloadCount+1;
//                        $templateBank->update(['downloads'=>$totalCount]);
//                        flash('Template installed successfully. Please click “Docket Book Manager >> Docket Templates” from the menu to view it.', 'success');
//                        return redirect()->back();
//                    }
//                }
//            }else{
//                $docket = new Docket();
//                $docket->title = $templateValue['title'];
//                $docket->subTitle = $templateValue['subTitle'];
//                $docket->user_id = Auth::user()->id;
//                $docket->company_id = Session::get('company_id');
//                $docket->invoiceable = $templateValue['invoiceable'];
//                $docket->docketApprovalType = $templateValue['docketApprovalType'];
//                $docket->theme_document_id = $templateValue['theme_document_id'];
//                $docket->timer_attachement = $templateValue['timer_attachement'];
//                $docket->xero_timesheet = $templateValue['xero_timesheet'];
//                $docket->is_archive = $templateValue['is_archive'];
//                $docket->prefix = $templateValue['prefix'];
//                $docket->hide_prefix = $templateValue['hide_prefix'];
//                $docket->is_docket_number = $templateValue['is_docket_number'];
//                if($docket->save()){
//                    foreach ($templateValue['docket_field'] as $key => $row){
//                        $docketField = new DocketField();
//                        $docketField->docket_id = $docket->id;
//                        $docketField->docket_field_category_id = $row['docket_field_category_id'];
//                        $docketField->order = $row['order'];
//                        $docketField->label = $row['label'];
//                        $docketField->required = $row['required'];
//                        $docketField->is_hidden = $row['is_hidden'];
//                        $docketField->default_prefiller_id = $row['default_prefiller_id'];
//                        $docketField->is_emailed_subject = $row['is_emailed_subject'];
//                        $docketField->is_dependent = $row['is_dependent'];
//                        $docketField->docket_prefiller_id = $row['docket_prefiller_id'];
//                        $docketField->csv_header = $row['csv_header'];
//                        $docketField->is_show = $row['is_show'];
//                        $docketField->deleted_at = $row['deleted_at'];
//                        $docketField->send_copy_docket = $row['send_copy_docket'];
//                        $docketField->echowise_id= $row['echowise_id'];
//                        $docketField->selected_index = $row['selected_index'];
//                        $docketField->time_format = $row['time_format'];
//                        if($docketField->save()){
//                            if($row['docket_field_category_id'] == 7){
//                                if(count($row['unit_rate']) != 0){
//                                    foreach ($row['unit_rate'] as $items){
//                                        $unitRate = new  DocketUnitRate();
//                                        $unitRate->docket_field_id = $docketField->id;
//                                        $unitRate->type = $items['type'];
//                                        $unitRate->label = $items['label'];
//                                        $unitRate->csv_header = $items['csv_header'];
//                                        $unitRate->is_show = $items['is_show'];
//                                        $unitRate->save();
//                                    }
//                                }
//                            }
//                            else if($row['docket_field_category_id'] == 13){
//                                if($row['docket_field_footer'] != null){
//                                    $docketFieldFooter = new DocketFieldFooter();
//                                    $docketFieldFooter->value = $row['docket_field_footer']['value'];
//                                    $docketFieldFooter->docket_id = $docket->id;
//                                    $docketFieldFooter->field_id = $docketField->id;
//                                    $docketFieldFooter->save();
//                                }
//                            }
//                            else if($row['docket_field_category_id'] == 3){
//
//                                if($row['docket_field_numbers'] != null){
//                                    $docketFieldNumber =  new DocketFieldNumber();
//                                    $docketFieldNumber->docket_field_id = $docketField->id;
//                                    $docketFieldNumber->min = $row['docket_field_numbers']['min'];
//                                    $docketFieldNumber->max = $row['docket_field_numbers']['max'];
//                                    $docketFieldNumber->tolerance = $row['docket_field_numbers']['tolerance'];
//                                    $docketFieldNumber->save();
//                                }
//                                if($row['docket_pre_filler']){
//                                    $arraygridId = array();
//                                    foreach($row['docket_pre_filler'] as $docket_pre_filler){
//                                        if($docket_pre_filler['root_id'] == 0){
//                                            $docketPrefiller= new DocketFiledPreFiller();
//                                            $docketPrefiller->docket_field_id = $docketField->id;
//                                            $docketPrefiller->value = $docket_pre_filler['value'];
//                                            $docketPrefiller->index = $docket_pre_filler['index'];
//                                            $docketPrefiller->root_id = $docket_pre_filler['root_id'];
//                                            $docketPrefiller->save();
//                                            $arraygridId[$docket_pre_filler['id']] = $docketPrefiller->id;
//                                        }else{
//                                            $checkOldId = $this->checkOldAndNewId($docket_pre_filler['root_id'],$arraygridId);
//                                            $docketPrefiller= new DocketFiledPreFiller();
//                                            $docketPrefiller->docket_field_id = $docketField->id;
//                                            $docketPrefiller->value = $docket_pre_filler['value'];
//                                            $docketPrefiller->index = $docket_pre_filler['index'];
//                                            $docketPrefiller->root_id =$checkOldId;
//                                            $docketPrefiller->save();
//                                            $arraygridId[$docket_pre_filler['id']] = $docketPrefiller->id;
//                                        }
//
//                                    }
//                                }
//
//                            }
//                            else if($row['docket_field_category_id'] == 24){
//                                if(count($row['tally_unit_rate']) != 0){
//                                    foreach ($row['tally_unit_rate'] as $items){
//                                        $docketTallyableUnitRate = new  DocketTallyableUnitRate();
//                                        $docketTallyableUnitRate->docket_field_id = $docketField->id;
//                                        $docketTallyableUnitRate->type = $items['type'];
//                                        $docketTallyableUnitRate->label = $items['label'];
//                                        $docketTallyableUnitRate->csv_header = $items['csv_header'];
//                                        $docketTallyableUnitRate->is_show = $items['is_show'];
//                                        $docketTallyableUnitRate->save();
//                                    }
//                                }
//                            }
//                            else if($row['docket_field_category_id'] == 20){
//                                if ($row['docket_manual_timer']!= null){
//                                    foreach ($row['docket_manual_timer'] as $docketManualTimers){
//                                        $docketManualTimer = new DocketManualTimer();
//                                        $docketManualTimer->docket_field_id = $docketField->id;
//                                        $docketManualTimer->type = $docketManualTimers['type'];
//                                        $docketManualTimer->label = $docketManualTimers['label'];
//                                        $docketManualTimer->csv_header = $docketManualTimers['csv_header'];
//                                        $docketManualTimer->is_show = $docketManualTimers['is_show'];
//                                        $docketManualTimer->save();
//                                    }
//                                }
//                                if($row['docket_manual_timer_break']!= null){
//                                    foreach ($row['docket_manual_timer_break'] as $docketManualTimerBreaks){
//                                        $docketManualTimerBreak = new DocketManualTimerBreak();
//                                        $docketManualTimerBreak->docket_field_id = $docketField->id;
//                                        $docketManualTimerBreak->label = $docketManualTimerBreaks['label'];
//                                        $docketManualTimerBreak->type = $docketManualTimerBreaks['type'];
//                                        $docketManualTimerBreak->explanation = $docketManualTimerBreaks['explanation'];
//                                        $docketManualTimerBreak->csv_header = $docketManualTimerBreaks['csv_header'];
//                                        $docketManualTimerBreak->is_show = $docketManualTimerBreaks['is_show'];
//                                        $docketManualTimerBreak->save();
//                                    }
//
//
//                                }
//
//
//                            }
//                            else if($row['docket_field_category_id'] == 15){
//                                if($row['docket_attached'] != null){
//                                    foreach ($row['docket_attached'] as $docketAttaches){
//                                        $docketAttached = new DocketAttachments();
//                                        $docketAttached->docket_field_id = $docketField->id;
//                                        $docketAttached->name = $docketAttaches['name'];
//                                        $docketAttached->url = $docketAttaches['url'];
//                                        $docketAttached->save();
//                                    }
//                                }
//                            }
//                            else if($row['docket_field_category_id'] == 18){
//                                if($row['yes_no_field'] != null){
//                                    foreach ($row['yes_no_field'] as $yesNoFields){
//                                        $yesNoField = new YesNoFields();
//                                        $yesNoField->docket_field_id = $docketField->id;
//                                        $yesNoField->label = $yesNoFields['label'];
//                                        $yesNoField->type = $yesNoFields['type'];
//                                        $yesNoField->explanation = $yesNoFields['explanation'];
//                                        $yesNoField->colour = $yesNoFields['colour'];
//                                        $yesNoField->icon_image = $yesNoFields['icon_image'];
//                                        $yesNoField->label_type = $yesNoFields['label_type'];
//                                        $yesNoField->csv_header = $yesNoFields['csv_header'];
//                                        $yesNoField->is_show = $yesNoFields['is_show'];
//                                        if($yesNoField->save()){
//                                            if(count($yesNoFields['yes_no_dockets_field'])!=0){
//                                                foreach ($yesNoFields['yes_no_dockets_field'] as $yes_no_dockets_field){
//                                                    $yesNoDocketsField = new YesNoDocketsField();
//                                                    $yesNoDocketsField->yes_no_field_id= $yesNoField->id;
//                                                    $yesNoDocketsField->docket_field_category_id = $yes_no_dockets_field['docket_field_category_id'];
//                                                    $yesNoDocketsField->order = $yes_no_dockets_field['order'];
//                                                    $yesNoDocketsField->required = $yes_no_dockets_field['required'];
//                                                    $yesNoDocketsField->label = $yes_no_dockets_field['label'];
//                                                    $yesNoDocketsField->csv_header = $yes_no_dockets_field['csv_header'];
//                                                    $yesNoDocketsField->is_show = $yes_no_dockets_field['is_show'];
//                                                    $yesNoDocketsField->save();
//                                                }
//                                            }
//
//                                        }
//                                    }
//                                }
//
//
//                            }
//                            else if($row['docket_field_category_id'] == 22){
//                                if($row['gird_fields']){
//                                    $gridFieldId = array();
//                                    foreach ($row['gird_fields'] as $gird_fields){
//
//                                        $gridField = new DocketFieldGrid();
//                                        $gridField->docket_field_id = $docketField->id;
//                                        $gridField->docket_field_category_id = $gird_fields['docket_field_category_id'];
//                                        $gridField->order = $gird_fields['order'];
//                                        $gridField->label = $gird_fields['label'];
//                                        $gridField->auto_field = $gird_fields['auto_field'];
//                                        $gridField->is_dependent = $gird_fields['is_dependent'];
//                                        $gridField->docket_prefiller_id = $gird_fields['docket_prefiller_id'];
//                                        $gridField->default_prefiller_id = $gird_fields['default_prefiller_id'];
//                                        $gridField->is_deleted = $gird_fields['is_deleted'];
//                                        $gridField->sumable = $gird_fields['sumable'];
//                                        $gridField->csv_header = $gird_fields['csv_header'];
//                                        $gridField->is_show = $gird_fields['is_show'];
//                                        $gridField->export_value = $gird_fields['export_value'];
//                                        $gridField->send_copy_docket = $gird_fields['send_copy_docket'];
//                                        $gridField->echowise_id = $gird_fields['echowise_id'];
//                                        $gridField->selected_index_value = $gird_fields['selected_index_value'];
//                                        $gridField->is_emailed_subject = $gird_fields['is_emailed_subject'];
//                                        $gridField->time_format = $gird_fields['time_format'];
//                                        $gridField->required = $gird_fields['required'];
//                                        if($gridField->save()){
//                                            $gridFieldId[$gird_fields['id']] = $gridField->id;
//
//                                            if($gird_fields['grid_field_pre_filler']){
//                                                $arraygridId = array();
//                                                foreach($gird_fields['grid_field_pre_filler'] as $grid_field_pre_filler){
//                                                    if($grid_field_pre_filler['root_id'] == 0){
//                                                        $docketGridPrefiller= new DocketGridPrefiller();
//                                                        $docketGridPrefiller->docket_field_grid_id = $gridField->id;
//                                                        $docketGridPrefiller->value = $grid_field_pre_filler['value'];
//                                                        $docketGridPrefiller->index = $grid_field_pre_filler['index'];
//                                                        $docketGridPrefiller->root_id = $grid_field_pre_filler['root_id'];
//                                                        $docketGridPrefiller->save();
//                                                        $arraygridId[$grid_field_pre_filler['id']] = $docketGridPrefiller->id;
//                                                    }else{
//                                                        $checkOldId = $this->checkOldAndNewId($grid_field_pre_filler['root_id'],$arraygridId);
//                                                        $docketGridPrefiller= new DocketGridPrefiller();
//                                                        $docketGridPrefiller->docket_field_grid_id = $gridField->id;
//                                                        $docketGridPrefiller->value = $grid_field_pre_filler['value'];
//                                                        $docketGridPrefiller->index = $grid_field_pre_filler['index'];
//                                                        $docketGridPrefiller->root_id =$checkOldId;
//                                                        $docketGridPrefiller->save();
//                                                        $arraygridId[$grid_field_pre_filler['id']] = $docketGridPrefiller->id;
//                                                    }
//
//                                                }
//                                            }
//
//                                        }
//                                    }
//
//                                    foreach ($row['gird_fields'] as $gird_fields) {
//                                        if ($row['docket_field_category_id'] == 22) {
//                                            if ($gird_fields['grid_field_formula'] != null) {
//                                                $gridId = $this->checkOldAndNewId($gird_fields['grid_field_formula']['docket_field_grid_id'], $gridFieldId);
////                                       dd($gird_fields['docket_field_grid_id']);
//                                                $formulaValue = unserialize($gird_fields['grid_field_formula']['formula']);
//                                                $formulaArray = array();
//                                                foreach ($formulaValue as $formulaValues) {
//                                                    if (preg_match("/TDiff/i", $formulaValues)) {
//                                                        $da = explode(",", $formulaValues);
//                                                        $arraydat = array();
//                                                        foreach ($da as $datas) {
//                                                            $arraydat = preg_replace("/[^0-9]/", "", $da);
//                                                        }
//                                                        $formulaArray[] = "TDiff(cell".$this->checkOldFormualAndNewId($arraydat, $gridFieldId)[0].",cell".$this->checkOldFormualAndNewId($arraydat, $gridFieldId)[1].")";
//                                                    } else {
//                                                        $formulaArray[] = $formulaValues;
//                                                    }
//                                                }
//                                                $docketGridFieldFromula = new GridFieldFormula();
//                                                $docketGridFieldFromula->docket_field_grid_id = $gridId;
//                                                $docketGridFieldFromula->user_id = Auth::user()->id;
//                                                $docketGridFieldFromula->formula = serialize($formulaArray);
//                                                $docketGridFieldFromula->save();
//                                            }
//
//                                            if ($gird_fields['grid_field_auto_pre_filler']) {
//                                                foreach ($gird_fields['grid_field_auto_pre_filler'] as $grid_field_auto_pre_filler) {
//                                                    $gridId = $this->checkOldAndNewId($grid_field_auto_pre_filler['grid_field_id'], $gridFieldId);
//                                                    $checkOldId = $this->checkOldAndNewId($grid_field_auto_pre_filler['link_grid_field_id'], $gridFieldId);
//                                                    $docketGridAutoPrefiller = new DocketGridAutoPrefiller();
//                                                    $docketGridAutoPrefiller->grid_field_id = $gridId;
//                                                    $docketGridAutoPrefiller->index = $grid_field_auto_pre_filler['index'];
//                                                    $docketGridAutoPrefiller->link_grid_field_id = $checkOldId;
//                                                    $docketGridAutoPrefiller->docket_field_id = $docketField->id;
//                                                    $docketGridAutoPrefiller->selected_index = $grid_field_auto_pre_filler['selected_index'];
//                                                    $docketGridAutoPrefiller->save();
//                                                }
//                                            }
//
//
//                                        }
//
//                                    }
//
//                                }
//
//                            }
//                            else{
//                                if($row['docket_pre_filler']){
//                                    $arraygridId = array();
//                                    foreach($row['docket_pre_filler'] as $docket_pre_filler){
//                                        if($docket_pre_filler['root_id'] == 0){
//                                            $docketPrefiller= new DocketFiledPreFiller();
//                                            $docketPrefiller->docket_field_id = $docketField->id;
//                                            $docketPrefiller->value = $docket_pre_filler['value'];
//                                            $docketPrefiller->index = $docket_pre_filler['index'];
//                                            $docketPrefiller->root_id = $docket_pre_filler['root_id'];
//                                            $docketPrefiller->save();
//                                            $arraygridId[$docket_pre_filler['id']] = $docketPrefiller->id;
//                                        }else{
//                                            $checkOldId = $this->checkOldAndNewId($docket_pre_filler['root_id'],$arraygridId);
//                                            $docketPrefiller= new DocketFiledPreFiller();
//                                            $docketPrefiller->docket_field_id = $docketField->id;
//                                            $docketPrefiller->value = $docket_pre_filler['value'];
//                                            $docketPrefiller->index = $docket_pre_filler['index'];
//                                            $docketPrefiller->root_id =$checkOldId;
//                                            $docketPrefiller->save();
//                                            $arraygridId[$docket_pre_filler['id']] = $docketPrefiller->id;
//                                        }
//
//                                    }
//                                }
//                            }
//                            if($row['export_mapping'] != null){
//                                $exportMapping = new ExportMapping();
//                                $exportMapping->docket_field_id = $docketField->id;
//                                $exportMapping->value = $row['export_mapping']['value'];
//                                $exportMapping->save();
//                            }
//
//
//
//                        }
//
//
//
//                    }
//                }
//                $downloadCount =  $templateBank->downloads;
//                $totalCount = $downloadCount+1;
//                $templateBank->update(['downloads'=>$totalCount]);
//                flash('Template installed successfully. Please click “Docket Book Manager >> Docket Templates” from the menu to view it.', 'success');
//                return redirect()->back();
//            }
//
//
//
//
//        }else{
//            flash('Invalid Action', 'warning');
//            return redirect()->back();
//        }
//
//
//    }

    public function checkOldAndNewId($oldId, $newAndOldId){
        foreach ($newAndOldId as $key => $data){
            if($oldId == $key){
              return $data;
            }
        }
    }

    public function checkOldFormualAndNewId($oldId, $newAndOldId){
        $array = array();
        foreach ($newAndOldId as $key => $data){
            if(in_array($key,$oldId)){
                $array[]= $data;
            }
        }
        return $array;

    }


    public function saveGridAutoCellPrefiller(Request $request){
        $this->validate($request,['id'   => 'required','value'=>'required']);
        $docketGridFiled = DocketFieldGrid::findorFail($request->id);
        $docketGridFiled->update(['auto_field'=>$request->value]);
        return response()->json(['status'=>true ,'Message'=>'Auto Filed Update Successfully.']);
    }

    public function saveGridAutoPrefiller(Request $request){
            $this->validate($request,['index'   => 'required','gridFieldId'=>'required','linkGridFieldId'=>'required']);
            $arrayData = array();
            if ($request->linkGridFieldId != 0){
                $autoFillQu  =    DocketGridAutoPrefiller::where('index',$request->index)->where('grid_field_id',$request->gridFieldId)->get();
                if(count($autoFillQu) !=0){
                    $arrayData [] = array('id'=>$autoFillQu->first()->link_grid_field_id,'display'=>'block');

                }
            }

            $autoFillQuery  =    DocketGridAutoPrefiller::where('grid_field_id',$request->gridFieldId)->where('index',$request->index)->get();
         if($autoFillQuery->count()>0){
                if($request->linkGridFieldId == 0){
                    $autoFillQuery->first()->delete();
                }else{
                    $autoFillQuerys  =    DocketGridAutoPrefiller::where('grid_field_id',$request->gridFieldId)->where('index',$request->index)->where('link_grid_field_id',$request->input('linkGridFieldId'))->get();
//                    dd($autoFillQuerys);
//                    $arrayData [] = array('id'=>$autoFillQuerys->first()->link_grid_field_id);
                   if ($autoFillQuerys->count( )== 0){
                       $oldAutoFillQuerys  =    DocketGridAutoPrefiller::where('grid_field_id',$request->gridFieldId)->where('link_grid_field_id',$request->input('linkGridFieldId'))->get();
                       DocketGridAutoPrefiller::where('grid_field_id',$request->gridFieldId)->where('index',$request->index)->delete();
                       if ($oldAutoFillQuerys->count()){
                           $oldAutoFillQuerys   =   $oldAutoFillQuerys->first();
                           $oldAutoFillQuerys->index =$request->index;
                           $oldAutoFillQuerys->save();
                       }else{
                           $saveDocketGridAutoPrefiller = new DocketGridAutoPrefiller();
                           $saveDocketGridAutoPrefiller->index =$request->index;
                           $saveDocketGridAutoPrefiller->grid_field_id = $request->gridFieldId;
                           $saveDocketGridAutoPrefiller->link_grid_field_id = $request->input('linkGridFieldId');
                           $saveDocketGridAutoPrefiller->docket_field_id = $request->docketFieldId;
                           $saveDocketGridAutoPrefiller->save();
                       }
                   }


                }
            }else{
                $oldAutoFillQuerys  =    DocketGridAutoPrefiller::where('grid_field_id',$request->gridFieldId)->where('link_grid_field_id',$request->input('linkGridFieldId'))->get();

                if ($oldAutoFillQuerys->count()){
                    $oldAutoFillQuerys->first()->index=$request->index;
                    $oldAutoFillQuerys->first()->save();
                }else{


                    $saveDocketGridAutoPrefiller = new DocketGridAutoPrefiller();
                    $saveDocketGridAutoPrefiller->index = $request->index;
                    $saveDocketGridAutoPrefiller->grid_field_id = $request->gridFieldId;
                    $saveDocketGridAutoPrefiller->docket_field_id = $request->docketFieldId;
                    $saveDocketGridAutoPrefiller->link_grid_field_id = $request->input('linkGridFieldId');
                    $saveDocketGridAutoPrefiller->save();
                }
            }


        $docketField = DocketField::where('id',$request->docketFieldId)->first();
        $finalSelectBox =  array();
        $categoryId = [1,2,3,4,29];
        $items = DocketFieldGrid::where('docket_field_id',$request->docketFieldId)->whereIn('docket_field_category_id',$categoryId )->get();
        $isDisabled = DocketGridAutoPrefiller::where('docket_field_id',$request->docketFieldId)->pluck('link_grid_field_id')->toArray();

//        $docketAutoPrefilereCheck = DocketGridAutoPrefiller::where('docket_field_id',$tempDocketId)->pluck('link_grid_field_id')->toArray();

        foreach ($items as $dd){
            if ($request->gridFieldId != $dd->id){
                if ($dd->docket_field_category_id == 3){
                    if ($dd->gridFieldFormula == null) {
                        if(in_array($dd->id,$isDisabled)){
                            $finalSelectBox[] = array(
                                'id'=>$dd->id,
                                'label'=>$dd->label,
                                'status'=> true,

                            );
                        }else{
                            $finalSelectBox[] = array(
                                'id' => $dd->id,
                                'label' => $dd->label,
                                'status' => false,
                            );
                        }
                    }else{
                        $finalSelectBox[] = array(
                            'id'=>$dd->id,
                            'label'=>$dd->label,
                            'status'=> true,
                        );
                    }

                }elseif($dd->docket_field_category_id == 29){

                    if (count($dd->gridFieldPreFiller) == 0) {
                        if(in_array($dd->id,$isDisabled)){
                            $finalSelectBox[] = array(
                                'id'=>$dd->id,
                                'label'=>$dd->label,
                                'status'=> true,
                            );
                        }else{
                            $finalSelectBox[] = array(
                                'id' => $dd->id,
                                'label' => $dd->label,
                                'status' => false,
                            );
                        }
                    } else {
                        $finalSelectBox[] = array(
                            'id' => $dd->id,
                            'label' => $dd->label,
                            'status' => true,
                        );
                    }

                }else {
                    if (count($dd->gridFieldPreFiller) == 0) {
                        if(in_array($dd->id,$isDisabled)){
                            $finalSelectBox[] = array(
                                'id'=>$dd->id,
                                'label'=>$dd->label,
                                'status'=> true,
                            );
                        }else{
                            $finalSelectBox[] = array(
                                'id' => $dd->id,
                                'label' => $dd->label,
                                'status' => false,
                            );
                        }
                    } else {
                        $finalSelectBox[] = array(
                            'id' => $dd->id,
                            'label' => $dd->label,
                            'status' => true,
                        );
                    }
                }
            }
        }
        array_push($arrayData,['id'=>$request->input('linkGridFieldId'),'display'=>'none']);
        $autoCheckFieldArray= DocketGridAutoPrefiller::where('grid_field_id',$request->gridFieldId)->pluck('link_grid_field_id')->toArray();
        $docketGridField = DocketFieldGrid::where('id',$request->gridFieldId)->where('docket_field_id',$request->docketFieldId)->first();
       if($request->isDependent == 1){
           $prefillerMaxIndex = DocketPrefiller::where('id',$docketGridField->docket_prefiller_id)->first();

           if ($prefillerMaxIndex == null){
               $finalPrefilMaxIndex =0;
           }else{
               if ($prefillerMaxIndex->docketPrefillerValue->count()!=0){
                   $finalPrefilMaxIndex =max($prefillerMaxIndex->docketPrefillerValue->pluck('index')->toArray());
               }else{
                   $finalPrefilMaxIndex =0;
               }
           }
       }else{
           $prefillerMaxIndex = DocketFieldGrid::where('id',$request->gridFieldId)->first();
           if ($prefillerMaxIndex->gridFieldPreFiller->count()!=0){
               $finalPrefilMaxIndex =max($prefillerMaxIndex->gridFieldPreFiller->pluck('index')->toArray());
           }else{
               $finalPrefilMaxIndex =0;
           }
       }


        return view('dashboard/company/docketManager/gridPrefiller/gridAutoField',compact('docketField','finalSelectBox','finalPrefilMaxIndex','docketGridField','arrayData','isDisabled','autoCheckFieldArray'));
    }

    public function emailDocketView(){
        $emailDocket    =   EmailSentDocket::find(850);
        $recipient  =   array('receiver_full_name'  =>    "Dileep Kr. ");
        return view('emails.V2.docket.emailDocket', compact('emailDocket','recipient'));
    }
    public function saveIsDependentView(Request $request){
        if ($request->isDependent == 1){
            $docketField = DocketField::where('id',$request->field_id)->first();
            $docketPrefillerManager = DocketPrefiller::where('company_id',Session::get('company_id'))->get();
            $docketGridPrefiller = DocketFieldGrid::where('id',$request->grid_field_id)->get()->first();
            if ($request->isOpen == 0){
                $docketGridPrefiller->is_dependent = $request->isDependent;
                $docketGridPrefiller->default_prefiller_id = null;
                $docketGridPrefiller->save();
                $docketGridAutoField = DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('id')->toArray();
                DocketGridAutoPrefiller::whereIn('id',$docketGridAutoField)->delete();
            }else{
                $docketGridPrefiller->is_dependent = $request->isDependent;
                $docketGridPrefiller->save();
            }
            $prefiller = array();
            // $docketPreFiller = DocketPrefillerValue::where('docket_prefiller_id', $docketGridPrefiller->docket_prefiller_id)->get();
            // foreach ($docketPreFiller as $subRow):
            //     $prefiller[] = array(
            //         'id' => $subRow->id,
            //         'value' => $subRow->label,
            //         'root_id' => $subRow->root_id,
            //         'index' => $subRow->index,
            //         'docket_prefiller_id' => $subRow->docket_prefiller_id,
            //         'docket_grid_id'=>$request->grid_field_id,
            //     );
            // endforeach;
            $docketPreFiller = DocketPrefiller::where('id',$docketGridPrefiller->docket_prefiller_id)->where('company_id',Session::get('company_id'))->get()->first();

            if($docketPreFiller != null){
                foreach ($docketPreFiller->docketPrefillerValue as $subRow):
                    $prefiller[] = array(
                        'id' => $subRow->id,
                        'value' => $subRow->label,
                        'root_id' => $subRow->root_id,
                        'index' => $subRow->index,
                        'docket_prefiller_id' => $subRow->docket_prefiller_id,
                        'docket_grid_id'=>$request->grid_field_id,
                    );
                endforeach;
            }
            $urlUpdatePreFiller = url('dashboard/company/docketManager/prefillerManager/updatePrifillerManagerlabel');
            $datas = $this->buildTreeArray($prefiller);
//            dd((new Collection($datas))->sortBy('value')->paginate(15));

            $finalPrefillerView = array();
            $finalSelectBox =  array();
            $categoryId = [1,2,3,4,29];
            $items = DocketFieldGrid::where('docket_field_id',$request->field_id)->whereIn('docket_field_category_id',$categoryId )->get();
            $docketAutoPrefilereCheck = DocketGridAutoPrefiller::where('docket_field_id',$request->field_id)->pluck('link_grid_field_id')->toArray();
            foreach ($items as $dd){
                if ($request->grid_field_id != $dd->id){
                    if ($dd->docket_field_category_id == 3){
                        if ($dd->gridFieldFormula == null) {
                            if (count($dd->gridFieldPreFiller) == 0) {
                                if (in_array($dd->id, $docketAutoPrefilereCheck)) {
                                    $finalSelectBox[] = array(
                                        'id' => $dd->id,
                                        'label' => $dd->label,
                                        'status' => true,

                                    );
                                } else {
                                    $finalSelectBox[] = array(
                                        'id' => $dd->id,
                                        'label' => $dd->label,
                                        'status' => false,
                                    );
                                }
                            } else {
                                $finalSelectBox[] = array(
                                    'id' => $dd->id,
                                    'label' => $dd->label,
                                    'status' => true,
                                );
                            }
                        }else{
                            $finalSelectBox[] = array(
                                'id'=>$dd->id,
                                'label'=>$dd->label,
                                'status'=> true,
                            );
                        }

                    }elseif($dd->docket_field_category_id == 29){
                        if (count($dd->gridFieldPreFiller) == 0) {
                            if(in_array($dd->id,$docketAutoPrefilereCheck)){
                                $finalSelectBox[] = array(
                                    'id'=>$dd->id,
                                    'label'=>$dd->label,
                                    'status'=> true,
                                );
                            }else{
                                $finalSelectBox[] = array(
                                    'id' => $dd->id,
                                    'label' => $dd->label,
                                    'status' => false,
                                );
                            }
                        } else {
                            $finalSelectBox[] = array(
                                'id' => $dd->id,
                                'label' => $dd->label,
                                'status' => true,
                            );
                        }
                    }else {
                        if (count($dd->gridFieldPreFiller) == 0) {
                            if(in_array($dd->id,$docketAutoPrefilereCheck)){
                                $finalSelectBox[] = array(
                                    'id'=>$dd->id,
                                    'label'=>$dd->label,
                                    'status'=> true,
                                );
                            }else{
                                $finalSelectBox[] = array(
                                    'id' => $dd->id,
                                    'label' => $dd->label,
                                    'status' => false,
                                );
                            }
                        } else {
                            $finalSelectBox[] = array(
                                'id' => $dd->id,
                                'label' => $dd->label,
                                'status' => true,
                            );
                        }
                    }

                }
            }
            $prefillerMaxIndex = DocketPrefiller::where('id',$docketGridPrefiller->docket_prefiller_id)->first();
            if ($prefillerMaxIndex == null){
                $finalPrefilMaxIndex =0;
            }else{
                if ($prefillerMaxIndex->docketPrefillerValue->count()!=0){
                    $finalPrefilMaxIndex =max($prefillerMaxIndex->docketPrefillerValue->pluck('index')->toArray());
                }else{
                    $finalPrefilMaxIndex =0;
                }
            }
            $docketGridField = DocketFieldGrid::where('id',$request->grid_field_id)->where('docket_field_id',$request->field_id)->first();
            $defaultPrefillerId =unserialize($docketGridField->default_prefiller_id);
            $fianl = (new Collection($datas))->sortBy('value')->paginate(20);
            foreach ($fianl as $row) {
                $prefillerForMaxIndex = DocketPrefillerValue::where('docket_prefiller_id', $row['docket_prefiller_id'])->pluck('index')->toArray();
                $finalPrefillerMaxIndex = max($prefillerForMaxIndex);
                $final = "";
                $this->prefillerFirstRow = true;
                $final .= '<tr><td>';
                if ($finalPrefillerMaxIndex == $row['index']) {
                    if ($defaultPrefillerId != null){
                        if (in_array($row['id'],$defaultPrefillerId)){
                            if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                                $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" checked  class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'" ><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1"  checked> <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
                            }else{
                                $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"  class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'" ><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1"  checked> <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
                            }
                        }else{
                            if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                                $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" checked class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1" > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
                            }else{
                                $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"   class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1" > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';

                            }
                        }
                    }else{
                        if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"  checked   class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1" > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';

                        }else{
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"  class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1" > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';

                        }
                    }
                } else {
                    if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"  checked  class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'">  <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" disabled  >  <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a   id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '"  data-index="' . $row['index'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';

                    }else{
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"   class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'">  <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" disabled  >  <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a   id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '"  data-index="' . $row['index'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';

                    }
                }
                if (count($row["prefiller"]) > 0) {
                    $final .= $this->getDocketPrefillerChild($row["prefiller"], $finalPrefillerMaxIndex,$defaultPrefillerId);
                }

                $finalPrefillerView[] = array(
                    'id' => $row['docket_prefiller_id'],
                    'final' => $final
                );
            }

            $padinateData= $fianl->links();
            $currentPage = $fianl->currentPage() + 1;
            $autoCheckFieldArray= DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('link_grid_field_id')->toArray();
            return view('dashboard/test', compact('docketPrefillerManager','docketField','finalPrefillerView','docketGridField','finalPrefilMaxIndex','finalSelectBox','autoCheckFieldArray','padinateData','currentPage'));
        }
    }



    public function saveIsDependent(Request $request){
        $this->validate($request,['isDependent'   => 'required','grid_field_id'=>'required','field_id'=>'required']);
        if ($request->isDependent == 1){
            $docketField = DocketField::where('id',$request->field_id)->first();
            $docketPrefillerManager = DocketPrefiller::where('company_id',Session::get('company_id'))->get();
            $docketGridPrefiller = DocketFieldGrid::where('id',$request->grid_field_id)->get()->first();
            if ($request->isOpen == 0){
                $docketGridPrefiller->is_dependent = $request->isDependent;
                $docketGridPrefiller->default_prefiller_id = null;
                $docketGridPrefiller->save();
                $docketGridAutoField = DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('id')->toArray();
                DocketGridAutoPrefiller::whereIn('id',$docketGridAutoField)->delete();
            }else{
                $docketGridPrefiller->is_dependent = $request->isDependent;
                $docketGridPrefiller->save();
            }
            $prefiller = array();
            $docketPreFiller = DocketPrefiller::where('id',$docketGridPrefiller->docket_prefiller_id)->where('company_id',Session::get('company_id'))->get()->first();

            if($docketPreFiller != null){
                foreach ($docketPreFiller->docketPrefillerValue as $subRow):
                    $prefiller[] = array(
                        'id' => $subRow->id,
                        'value' => $subRow->label,
                        'root_id' => $subRow->root_id,
                        'index' => $subRow->index,
                        'docket_prefiller_id' => $subRow->docket_prefiller_id,
                        'docket_grid_id'=>$request->grid_field_id,
                    );
                endforeach;
            }
            $urlUpdatePreFiller = url('dashboard/company/docketManager/prefillerManager/updatePrifillerManagerlabel');
            $datas = $this->buildTreeArray($prefiller);
            $finalPrefillerView = array();
            $finalSelectBox =  array();
            $categoryId = [1,2,3,4,29];
            $items = DocketFieldGrid::where('docket_field_id',$request->field_id)->whereIn('docket_field_category_id',$categoryId )->get();
            $docketAutoPrefilereCheck = DocketGridAutoPrefiller::where('docket_field_id',$request->field_id)->pluck('link_grid_field_id')->toArray();
            foreach ($items as $dd){
                if ($request->grid_field_id != $dd->id){
                    if ($dd->docket_field_category_id == 3){
                        if ($dd->gridFieldFormula == null) {
                            if (count($dd->gridFieldPreFiller) == 0) {
                                if (in_array($dd->id, $docketAutoPrefilereCheck)) {
                                    $finalSelectBox[] = array(
                                        'id' => $dd->id,
                                        'label' => $dd->label,
                                        'status' => true,

                                    );
                                } else {
                                    $finalSelectBox[] = array(
                                        'id' => $dd->id,
                                        'label' => $dd->label,
                                        'status' => false,
                                    );
                                }
                            } else {
                                $finalSelectBox[] = array(
                                    'id' => $dd->id,
                                    'label' => $dd->label,
                                    'status' => true,
                                );
                            }
                        }else{
                            $finalSelectBox[] = array(
                                'id'=>$dd->id,
                                'label'=>$dd->label,
                                'status'=> true,
                            );
                        }

                    }elseif($dd->docket_field_category_id == 29){
                        if (count($dd->gridFieldPreFiller) == 0) {
                            if(in_array($dd->id,$docketAutoPrefilereCheck)){
                                $finalSelectBox[] = array(
                                    'id'=>$dd->id,
                                    'label'=>$dd->label,
                                    'status'=> true,
                                );
                            }else{
                                $finalSelectBox[] = array(
                                    'id' => $dd->id,
                                    'label' => $dd->label,
                                    'status' => false,
                                );
                            }
                        } else {
                            $finalSelectBox[] = array(
                                'id' => $dd->id,
                                'label' => $dd->label,
                                'status' => true,
                            );
                        }
                    }else {
                        if (count($dd->gridFieldPreFiller) == 0) {
                            if(in_array($dd->id,$docketAutoPrefilereCheck)){
                                $finalSelectBox[] = array(
                                    'id'=>$dd->id,
                                    'label'=>$dd->label,
                                    'status'=> true,
                                );
                            }else{
                                $finalSelectBox[] = array(
                                    'id' => $dd->id,
                                    'label' => $dd->label,
                                    'status' => false,
                                );
                            }
                        } else {
                            $finalSelectBox[] = array(
                                'id' => $dd->id,
                                'label' => $dd->label,
                                'status' => true,
                            );
                        }
                    }

                }
            }
            $prefillerMaxIndex = DocketPrefiller::where('id',$docketGridPrefiller->docket_prefiller_id)->first();
            if ($prefillerMaxIndex == null){
                $finalPrefilMaxIndex =0;
            }else{
                if ($prefillerMaxIndex->docketPrefillerValue->count()!=0){
                    $finalPrefilMaxIndex =max($prefillerMaxIndex->docketPrefillerValue->pluck('index')->toArray());
                }else{
                    $finalPrefilMaxIndex =0;
                }
            }
            $docketGridField = DocketFieldGrid::where('id',$request->grid_field_id)->where('docket_field_id',$request->field_id)->first();
            $defaultPrefillerId =unserialize($docketGridField->default_prefiller_id);
            $fianl = (new Collection($datas))->sortBy('value')->paginate(20);
            foreach ($fianl as $row) {
                $prefillerForMaxIndex = DocketPrefillerValue::where('docket_prefiller_id', $row['docket_prefiller_id'])->pluck('index')->toArray();
                $finalPrefillerMaxIndex = max($prefillerForMaxIndex);
                $final = "";
                $this->prefillerFirstRow = true;
                $final .= '<tr><td>';
                $checkValue = "checked";
                $emptyCheckValue = "";
                $checkedValue =  ($docketGridField->default_auto_fill_prefiller == $row["id"]) ? $checkValue : $emptyCheckValue;


                if ($finalPrefillerMaxIndex == $row['index']) {
                    if ($defaultPrefillerId != null){
                        if (in_array($row['id'],$defaultPrefillerId)){
//                            if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                                $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"'.$checkedValue.'class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'" ><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1"  checked> <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
//                            }else{
//                                $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"  class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'" ><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1"  checked> <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
//                            }
                        }else{
//                            if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                                $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" '.$checkedValue.' class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1" > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
//                            }else{
//                                $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"   class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1" > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
//
//                            }
                        }
                    }else{
//                        if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"  '.$checkedValue.'   class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1" > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';

//                        }else{
//                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"  class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"><input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1" > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
//
//                        }
                    }
                } else {
//                    if($docketGridField->default_auto_fill_prefiller == $row["id"]){
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"  '.$checkedValue.'  class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'">  <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" disabled  >  <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a   id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '"  data-index="' . $row['index'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';

//                    }else{
//                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox"   class="defaultAutoPrefiller" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'">  <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" disabled  >  <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a   id="deleteprefillerManagerLabel" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '"  data-index="' . $row['index'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
//
//                    }
                }
                if (count($row["prefiller"]) > 0) {
                    $final .= $this->getDocketPrefillerChild($row["prefiller"], $finalPrefillerMaxIndex,$defaultPrefillerId);
                }

                $finalPrefillerView[] = array(
                    'id' => $row['docket_prefiller_id'],
                    'final' => $final
                );
            }

            $padinateData= $fianl->links();
            $currentPage = $fianl->currentPage() + 1;


            $autoCheckFieldArray= DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('link_grid_field_id')->toArray();

            return view('dashboard/company/docketManager/gridPrefiller/dependent', compact('docketPrefillerManager','docketField','finalPrefillerView','docketGridField','finalPrefilMaxIndex','finalSelectBox','autoCheckFieldArray','padinateData','currentPage'));
        }
        elseif($request->isDependent == 0){

            $docketGridPrefiller = DocketFieldGrid::where('id',$request->grid_field_id)->get()->first();
            if ($request->isOpen == 0){
                $docketGridPrefiller->docket_prefiller_id = 0;
                $docketGridPrefiller->is_dependent = $request->isDependent;
                $docketGridPrefiller->default_prefiller_id = null;
                $docketGridPrefiller->save();
                $docketGridAutoField = DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('id')->toArray();
                DocketGridAutoPrefiller::whereIn('id',$docketGridAutoField)->delete();
            }else{
                $docketGridPrefiller->is_dependent = $request->isDependent;
                $docketGridPrefiller->save();
            }
            $autoCheckStatus = false;
            $autoCheckFieldData = DocketGridAutoPrefiller::where('link_grid_field_id',$request->grid_field_id)->get();
            $autoCheckFieldArray= DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('link_grid_field_id')->toArray();
            if (count($autoCheckFieldData)!=0){
                $docketGridPrefillerss = DocketFieldGrid::where('id',$request->grid_field_id)->get()->first();
                $docketGridPrefillerss->auto_field = 0;
                $docketGridPrefillerss->save();
                $docketGridAutoField = DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('id')->toArray();
                DocketGridAutoPrefiller::whereIn('id',$docketGridAutoField)->delete();
                $autoCheckStatus = true;
            }
            $data =  $this->gridPrefillerSet($request);
            $docketField = $data->getData()['docketField'];
            $finalPrefillerView = $data->getData()['finalPrefillerView'];
            $docketGridField = $data->getData()['docketGridField'];
            $finalPrefilMaxIndex= $data->getData()['finalPrefilMaxIndex'];
            $finalSelectBox = $data->getData()['finalSelectBox'];

            return view('dashboard/company/docketManager/gridPrefiller/index', compact('docketField','finalPrefillerView','docketGridField','finalPrefilMaxIndex','finalSelectBox','autoCheckFieldData','autoCheckStatus','autoCheckFieldArray'));
        }
        else if($request->isDependent == 2){
            $docketField = DocketField::where('id',$request->field_id)->first();
            $docketGridPrefiller = DocketFieldGrid::where('id',$request->grid_field_id)->get()->first();
            if ($request->isOpen == 0){
                $docketGridPrefiller->docket_prefiller_id = 0;
                $docketGridPrefiller->is_dependent = $request->isDependent;
                $docketGridPrefiller->default_prefiller_id = null;
                $docketGridPrefiller->save();
                $docketGridAutoField = DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('id')->toArray();
                DocketGridAutoPrefiller::whereIn('id',$docketGridAutoField)->delete();
            }else{
                $docketGridPrefiller->is_dependent = $request->isDependent;
                $docketGridPrefiller->save();
            }
            $autoCheckStatus = false;
            $autoCheckFieldData = DocketGridAutoPrefiller::where('link_grid_field_id',$request->grid_field_id)->get();
            $autoCheckFieldArray= DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('link_grid_field_id')->toArray();
            if (count($autoCheckFieldData)!=0){
                $docketGridPrefillerss = DocketFieldGrid::where('id',$request->grid_field_id)->get()->first();
                $docketGridPrefillerss->auto_field = 0;
                $docketGridPrefillerss->save();
                $docketGridAutoField = DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('id')->toArray();
                DocketGridAutoPrefiller::whereIn('id',$docketGridAutoField)->delete();
                $autoCheckStatus = true;
            }
            $categoryId = [1,2,3,4,29];
            $allDocketGridField = DocketFieldGrid::where('docket_field_id',$request->field_id)->where('id','!=',$request->grid_field_id)->whereIn('docket_field_category_id',$categoryId )->get();
            $prefillerEcowise = PrefillerEcowise::where('company_id',Session::get('company_id'))->get();
            $docketGridField =  DocketFieldGrid::where('id',$request->grid_field_id)->get()->first();
            $keyValue = [];
//            $suggestionValue = [];
//            $keyValues = [];

//            if($docketGridField->prefillerEcowise != null){
//                if($docketGridField->linkPrefillerFilter){
//                    foreach ($docketGridField->linkPrefillerFilter as $prefillerEcowises){
//                        $value = json_decode($docketGridField->prefillerEcowise->data,true)[$prefillerEcowises->link_prefiller_filter_label];
//                        $result= array();
//                        foreach ($value as $data){
//                            if($data != []){
//                                $result[] = $data;
//                            }
//                        }
//                        $suggestionValue = array_unique($result);
//                        $keyValues[$prefillerEcowises->link_prefiller_filter_label] =  $suggestionValue;
//                    }
//                }
//            }
//
//            dd($keyValues);



            if($docketGridField->prefillerEcowise != null){
                foreach (json_decode($docketGridField->prefillerEcowise->data, true) as $key=> $value){
                    $keyValue [] = $key;
                }
            }

            $ecoPrefiller = PrefillerEcowise::where('id',$docketGridField->echowise_id)->get()->first();

//            if($ecoPrefiller){
//                if($docketGridField->link_prefiller_filter_label){
//                    $value = json_decode($ecoPrefiller->data,true)[$docketGridField->link_prefiller_filter_label];
//                    $result= array();
//                    foreach ($value as $data){
//                        if($data != []){
//                            $result[] = $data;
//                        }
//                    }
//                    $suggestionValue = array_unique($result);
//                }else{
//                    $suggestionValue = [];
//                }
//            }else{
                $suggestionValue = [];
//            }




            $maxIndex = (new Collection($docketGridField->gridFieldAutoPreFiller))->pluck('index')->toArray();

            $finaldata = array();
            foreach ($allDocketGridField as $item){
                if($item->is_dependent == 1 && $item->docFket_prefiller_id != null ){
                    $finaldata[] = array(
                        'id'=>$item->id,
                        'docket_field_id'=>$item->docket_field_id,
                        'label'=>$item->label,
                        'autofield_id'=>null,
                        'index'=>null,
                        'selected_index'=>null,
                        'link_grid_field_id' => null,
                        'isdisabled'=> true,
                        'same'=>null


                    );
                }elseif(count($item->gridFieldPreFiller) != 0){
                    $finaldata[] = array(
                        'id'=>$item->id,
                        'docket_field_id'=>$item->docket_field_id,
                        'label'=>$item->label,
                        'autofield_id'=>null,
                        'index'=>null,
                        'selected_index'=>null,
                        'link_grid_field_id' => null,

                        'isdisabled'=> true,
                        'same'=>null
                    );
                }elseif($item->gridFieldFormula != null){
                    $finaldata[] = array(
                        'id'=>$item->id,
                        'docket_field_id'=>$item->docket_field_id,
                        'label'=>$item->label,

                        'autofield_id'=>null,
                        'index'=>null,
                        'link_grid_field_id' => null,

                        'selected_index'=>null,
                        'isdisabled'=> true,
                        'same'=>null

                    );
                }else{

                    if(@$item->linkGridFieldAutoPrefiller[0] == null){
                        $finaldata[] = array(
                            'id'=>$item->id,
                            'docket_field_id'=>$item->docket_field_id,
                            'label'=>$item->label,
                            'autofield_id'=>null,
                            'index'=>null,
                            'link_grid_field_id' => null,
                            'selected_index'=>null,
                            'isdisabled'=> false,
                            'same'=>null
                        );
                    }else{
                        if($request->grid_field_id == $item->linkGridFieldAutoPrefiller[0]->grid_field_id){
                            $finaldata[] = array(
                                'id'=>$item->id,
                                'docket_field_id'=>$item->docket_field_id,
                                'label'=>$item->label,
                                'autofield_id'=>$item->linkGridFieldAutoPrefiller[0]->id,
                                'index'=>$item->linkGridFieldAutoPrefiller[0]->index,
                                'link_grid_field_id' =>$item->linkGridFieldAutoPrefiller[0]->link_grid_field_id,
                                'selected_index'=>$item->linkGridFieldAutoPrefiller[0]->selected_index,
                                'isdisabled'=> true,
                                'same'=>true
                            );

                        }else{
                            $finaldata[] = array(
                                'id'=>$item->id,
                                'docket_field_id'=>$item->docket_field_id,
                                'label'=>$item->label,
                                'autofield_id'=>$item->linkGridFieldAutoPrefiller[0]->id,
                                'index'=>$item->linkGridFieldAutoPrefiller[0]->index,
                                'selected_index'=>$item->linkGridFieldAutoPrefiller[0]->selected_index,
                                'link_grid_field_id' =>$item->linkGridFieldAutoPrefiller[0]->link_grid_field_id,
                                'isdisabled'=> true,
                                'same'=>false
                            );
                        }
                    }
                }
            }


            return view('dashboard/company/docketManager/gridPrefiller/ecowise', compact('docketField','docketGridField','keyValue','allDocketGridField','finaldata','maxIndex','prefillerEcowise','suggestionValue'));
        }
    }




    public function getEcowiseData(Request $request){
        $validator = Validator::make(Input::all(), ['username'   => 'required', 'password' =>  'required','url' =>  'required']);
        if ($validator->fails()) {
            foreach ($validator->messages()->getMessages() as $field_name => $messages) {
                $errors[] = $messages[0];
            }
            return response()->json(array('status' => false, 'message' => $errors));
        }else{
//            $data []= array('username'=>$request->username,'password'=>$request->username,'url'=>$request->url);
//            $datas = new FakeData();
//            $datas->data = json_encode($data);
//            $datas->save();



          try {
              $client = new \GuzzleHttp\Client();
              $response = $client->get($request->url, [
                  'auth' => [
                      $request->username,
                      $request->password
//                    '319029\Record Time',
//                    'Pa55w0rd.NK'
                  ],
              ]);
              $data = $response->getBody()->getContents();
              $parseData = array();
              $json = simplexml_load_string($data);

              foreach ($json->entry as $item) {
                  $ns = $item->content->children('http://schemas.microsoft.com/ado/2007/08/dataservices/metadata');
                  $fields = $ns->properties->children("http://schemas.microsoft.com/ado/2007/08/dataservices");
                  $parseData[] = json_decode(json_encode($fields), true);
              }

              $finalData = array();
              foreach ($parseData as $arrangeData) {
                  foreach ($arrangeData as $key => $arrangeDataas) {
                      $finalData[str_replace('_', ' ', $key)][] = $arrangeDataas;
                  }
              }

              $matchEcowiseData = PrefillerEcowise::where('url', $request->url)->where('company_id', Session::get('company_id'))->first();
              if ($matchEcowiseData == null) {
                  $saveEcowise = new PrefillerEcowise();
                  $saveEcowise->data = json_encode($finalData);
                  $saveEcowise->url = $request->url;
                  $saveEcowise->company_id = Session::get('company_id');
                  $saveEcowise->save();
              } else {
                  $matchEcowiseData->update(['data' => json_encode($finalData)]);

              }
              $girdfield = DocketFieldGrid::where('id',$request->girdId)->get()->first();
              $allUrl = PrefillerEcowise::where('company_id', Session::get('company_id'))->get();
              return view('dashboard/company/docketManager/prefillerEcowise/selectUrl', compact('allUrl'));
          }catch (\Exception $e){
                  return response()->json(array('status' => false, 'message' => "Invalid data please try again"));
          }

        }

    }


    public function ecowiseDataUpdateUrl(Request $request){
        $prefillerEcowise = PrefillerEcowise::where('company_id',Session::get('company_id'))->get();
        $girdfield = DocketFieldGrid::where('id',$request->field_id)->get()->first();

        if($request->autoField == 0){


            $docketGridFields =  DocketFieldGrid::where('id',$request->field_id)->get()->first();


            if($docketGridFields != null) {
                if (count($docketGridFields->gridFieldAutoPreFiller) != 0) {
                    foreach ($docketGridFields->gridFieldAutoPreFiller as $items) {
                        $items->delete();
                    }
                }
            }
            $docketGridFieldfudate=  DocketFieldGrid::where('id',$request->field_id)->update(['echowise_id'=>$request->id,'selected_index_value'=>null]);


            $docketGridField =  DocketFieldGrid::where('id',$request->field_id)->get()->first();
            if(@$docketGridField->linkPrefillerFilter){
                foreach ($docketGridField->linkPrefillerFilter as $linkPrefillerFilters){
                    $linkPrefillerFilters->delete();
                }
            }


            $keyValue = array();
            if(@$docketGridField->prefillerEcowise != null){
                foreach (json_decode($docketGridField->prefillerEcowise->data, true) as $key=> $value){
                    $keyValue [] = $key;
                }
            }

            return view('dashboard/company/docketManager/prefillerEcowise/withoutAutoFill', compact('prefillerEcowise','docketGridField','keyValue'));
        }
        else{

            $docketGridFields =  DocketFieldGrid::where('id',$request->field_id)->get()->first();
            if($docketGridFields != null) {
                if (count($docketGridFields->gridFieldAutoPreFiller) != 0) {
                    foreach ($docketGridFields->gridFieldAutoPreFiller as $items) {
                        $items->delete();
                    }
                }
            }
            DocketFieldGrid::where('id',$request->field_id)->update(['echowise_id'=>$request->id,'selected_index_value'=>null]);
            $categoryId = [1,2,3,4,29];
            $allDocketGridField = DocketFieldGrid::where('docket_field_id',$request->docket_field_id)->where('id','!=',$request->field_id)->whereIn('docket_field_category_id',$categoryId )->get();
            $prefillerEcowise = PrefillerEcowise::where('company_id',Session::get('company_id'))->get();
            $docketGridField =  DocketFieldGrid::where('id',$request->field_id)->get()->first();

            if($docketGridField->linkPrefillerFilter){
                foreach ($docketGridField->linkPrefillerFilter as $linkPrefillerFilters){
                    $linkPrefillerFilters->delete();
                }
            }
            $keyValue = array();
            if($docketGridField->prefillerEcowise != null){
                foreach (json_decode($docketGridField->prefillerEcowise->data, true) as $key=> $value){
                    $keyValue [] = $key;
                }
            }
            $maxIndex = (new Collection($docketGridField->gridFieldAutoPreFiller))->pluck('index')->toArray();

            $finaldata = array();
            foreach ($allDocketGridField as $item){
                if($item->is_dependent == 1 && $item->docket_prefiller_id != null ){
                    $finaldata[] = array(
                        'id'=>$item->id,
                        'docket_field_id'=>$item->docket_field_id,
                        'label'=>$item->label,
                        'autofield_id'=>null,
                        'index'=>null,
                        'selected_index'=>null,
                        'link_grid_field_id' => null,
                        'isdisabled'=> true,
                        'same'=>null


                    );
                }elseif(count($item->gridFieldPreFiller) != 0){
                    $finaldata[] = array(
                        'id'=>$item->id,
                        'docket_field_id'=>$item->docket_field_id,
                        'label'=>$item->label,
                        'autofield_id'=>null,
                        'index'=>null,
                        'selected_index'=>null,
                        'link_grid_field_id' => null,

                        'isdisabled'=> true,
                        'same'=>null
                    );
                }elseif($item->gridFieldFormula != null){
                    $finaldata[] = array(
                        'id'=>$item->id,
                        'docket_field_id'=>$item->docket_field_id,
                        'label'=>$item->label,

                        'autofield_id'=>null,
                        'index'=>null,
                        'link_grid_field_id' => null,

                        'selected_index'=>null,
                        'isdisabled'=> true,
                        'same'=>null

                    );
                }else{

                    if(@$item->linkGridFieldAutoPrefiller[0] == null){
                        $finaldata[] = array(
                            'id'=>$item->id,
                            'docket_field_id'=>$item->docket_field_id,
                            'label'=>$item->label,
                            'autofield_id'=>null,
                            'index'=>null,
                            'link_grid_field_id' => null,
                            'selected_index'=>null,
                            'isdisabled'=> false,
                            'same'=>null



                        );
                    }else{
                        if($request->field_id == $item->linkGridFieldAutoPrefiller[0]->grid_field_id){
                            $finaldata[] = array(
                                'id'=>$item->id,
                                'docket_field_id'=>$item->docket_field_id,
                                'label'=>$item->label,
                                'autofield_id'=>$item->linkGridFieldAutoPrefiller[0]->id,
                                'index'=>$item->linkGridFieldAutoPrefiller[0]->index,
                                'link_grid_field_id' =>$item->linkGridFieldAutoPrefiller[0]->link_grid_field_id,
                                'selected_index'=>$item->linkGridFieldAutoPrefiller[0]->selected_index,
                                'isdisabled'=> true,
                                'same'=>true
                            );
                        }else{
                            $finaldata[] = array(
                                'id'=>$item->id,
                                'docket_field_id'=>$item->docket_field_id,
                                'label'=>$item->label,
                                'autofield_id'=>$item->linkGridFieldAutoPrefiller[0]->id,
                                'index'=>$item->linkGridFieldAutoPrefiller[0]->index,
                                'selected_index'=>$item->linkGridFieldAutoPrefiller[0]->selected_index,
                                'link_grid_field_id' =>$item->linkGridFieldAutoPrefiller[0]->link_grid_field_id,
                                'isdisabled'=> true,
                                'same'=>false


                            );
                        }
                    }

                }


            }




            return view('dashboard/company/docketManager/prefillerEcowise/autoFill', compact('prefillerEcowise','docketGridField','keyValue','allDocketGridField','finaldata','maxIndex'));
        }

    }


    public function saveGridEcowiseAutoCellPrefiller(Request $request){
        $this->validate($request,['id'   => 'required','value'=>'required']);
        $docketGridFiled = DocketFieldGrid::findorFail($request->id);
        $docketGridFiled->update(['auto_field'=>$request->value]);
        if($docketGridFiled->auto_field == 0 ){
            $prefillerEcowise = PrefillerEcowise::where('company_id',Session::get('company_id'))->get();
            $docketGridField =  DocketFieldGrid::where('id',$request->id)->get()->first();
            $keyValue = array();
            if($docketGridField->prefillerEcowise != null){
                foreach (json_decode($docketGridField->prefillerEcowise->data, true) as $key=> $value){
                    $keyValue [] = $key;
                }
            }
            return view('dashboard/company/docketManager/prefillerEcowise/withoutAutoFill', compact('prefillerEcowise','docketGridField','keyValue'));

        }
        else if($docketGridFiled->auto_field == 1){
            $categoryId = [1,2,3,4,29];
            $allDocketGridField = DocketFieldGrid::where('docket_field_id',$request->docket_field_id)->where('id','!=',$request->id)->whereIn('docket_field_category_id',$categoryId )->get();
            $prefillerEcowise = PrefillerEcowise::where('company_id',Session::get('company_id'))->get();
            $docketGridField =  DocketFieldGrid::where('id',$request->id)->get()->first();
            $keyValue = array();
            if($docketGridField->prefillerEcowise != null){
                foreach (json_decode($docketGridField->prefillerEcowise->data, true) as $key=> $value){
                    $keyValue [] = $key;
                }
            }
            $maxIndex = (new Collection($docketGridField->gridFieldAutoPreFiller))->pluck('index')->toArray();

            $finaldata = array();
            foreach ($allDocketGridField as $item){
                if($item->is_dependent == 1 && $item->docket_prefiller_id != null ){
                        $finaldata[] = array(
                            'id'=>$item->id,
                            'docket_field_id'=>$item->docket_field_id,
                            'label'=>$item->label,
                            'autofield_id'=>null,
                            'index'=>null,
                            'selected_index'=>null,
                            'link_grid_field_id' => null,
                            'isdisabled'=> true,
                            'same'=>null


                        );
                }elseif(count($item->gridFieldPreFiller) != 0){
                    $finaldata[] = array(
                        'id'=>$item->id,
                        'docket_field_id'=>$item->docket_field_id,
                        'label'=>$item->label,
                        'autofield_id'=>null,
                        'index'=>null,
                        'selected_index'=>null,
                        'link_grid_field_id' => null,

                        'isdisabled'=> true,
                        'same'=>null
                    );
                }elseif($item->gridFieldFormula != null){
                    $finaldata[] = array(
                        'id'=>$item->id,
                        'docket_field_id'=>$item->docket_field_id,
                        'label'=>$item->label,

                        'autofield_id'=>null,
                        'index'=>null,
                        'link_grid_field_id' => null,

                        'selected_index'=>null,
                        'isdisabled'=> true,
                        'same'=>null

                    );
                }else{

                    if(@$item->linkGridFieldAutoPrefiller[0] == null){
                        $finaldata[] = array(
                            'id'=>$item->id,
                            'docket_field_id'=>$item->docket_field_id,
                            'label'=>$item->label,
                            'autofield_id'=>null,
                            'index'=>null,
                            'link_grid_field_id' => null,
                            'selected_index'=>null,
                            'isdisabled'=> false,
                            'same'=>null



                        );
                    }else{
                        if($request->id == $item->linkGridFieldAutoPrefiller[0]->grid_field_id){
                            $finaldata[] = array(
                                'id'=>$item->id,
                                'docket_field_id'=>$item->docket_field_id,
                                'label'=>$item->label,
                                'autofield_id'=>$item->linkGridFieldAutoPrefiller[0]->id,
                                'index'=>$item->linkGridFieldAutoPrefiller[0]->index,
                                'link_grid_field_id' =>$item->linkGridFieldAutoPrefiller[0]->link_grid_field_id,
                                'selected_index'=>$item->linkGridFieldAutoPrefiller[0]->selected_index,
                                'isdisabled'=> true,
                                'same'=>true
                            );
                        }else{
                            $finaldata[] = array(
                                'id'=>$item->id,
                                'docket_field_id'=>$item->docket_field_id,
                                'label'=>$item->label,
                                'autofield_id'=>$item->linkGridFieldAutoPrefiller[0]->id,
                                'index'=>$item->linkGridFieldAutoPrefiller[0]->index,
                                'selected_index'=>$item->linkGridFieldAutoPrefiller[0]->selected_index,
                                'link_grid_field_id' =>$item->linkGridFieldAutoPrefiller[0]->link_grid_field_id,
                                'isdisabled'=> true,
                                'same'=>false


                            );
                        }
                    }

                }


            }


            return view('dashboard/company/docketManager/prefillerEcowise/autoFill', compact('prefillerEcowise','docketGridField','keyValue','allDocketGridField','finaldata','maxIndex'));
        }


    }



    public function saveGridAutoPrefillerEcowise(Request $request){
        $this->validate($request,['index'   => 'required','gridFieldId'=>'required','linkGridFieldId'=>'required']);
        $arrayData = array();
        if ($request->linkGridFieldId != 0){
            $autoFillQu  =    DocketGridAutoPrefiller::where('index',$request->index)->where('grid_field_id',$request->gridFieldId)->get();
            if(count($autoFillQu) !=0){
                $arrayData [] = array('id'=>$autoFillQu->first()->link_grid_field_id,'display'=>'block');

            }
        }

        $autoFillQuery  =    DocketGridAutoPrefiller::where('grid_field_id',$request->gridFieldId)->where('index',$request->index)->get();
        if($autoFillQuery->count()>0){
            if($request->linkGridFieldId == 0){
                $autoFillQuery->first()->delete();
            }else{
                $autoFillQuerys  =    DocketGridAutoPrefiller::where('grid_field_id',$request->gridFieldId)->where('index',$request->index)->where('link_grid_field_id',$request->input('linkGridFieldId'))->get();
//                    dd($autoFillQuerys);
//                    $arrayData [] = array('id'=>$autoFillQuerys->first()->link_grid_field_id);
                if ($autoFillQuerys->count( )== 0){
                    $oldAutoFillQuerys  =    DocketGridAutoPrefiller::where('grid_field_id',$request->gridFieldId)->where('link_grid_field_id',$request->input('linkGridFieldId'))->get();
                    DocketGridAutoPrefiller::where('grid_field_id',$request->gridFieldId)->where('index',$request->index)->delete();
                    if ($oldAutoFillQuerys->count()){
                        $oldAutoFillQuerys   =   $oldAutoFillQuerys->first();
                        $oldAutoFillQuerys->index =$request->index;
                        $oldAutoFillQuerys->save();
                    }else{
                        $saveDocketGridAutoPrefiller = new DocketGridAutoPrefiller();
                        $saveDocketGridAutoPrefiller->index =$request->index;
                        $saveDocketGridAutoPrefiller->grid_field_id = $request->gridFieldId;
                        $saveDocketGridAutoPrefiller->link_grid_field_id = $request->input('linkGridFieldId');
                        $saveDocketGridAutoPrefiller->selected_index  = $autoFillQuery->first()->selected_index;;
                        $saveDocketGridAutoPrefiller->docket_field_id = $request->docketFieldId;
                        $saveDocketGridAutoPrefiller->save();
                    }
                }


            }
        }else{
            $oldAutoFillQuerys  =    DocketGridAutoPrefiller::where('grid_field_id',$request->gridFieldId)->where('link_grid_field_id',$request->input('linkGridFieldId'))->get();

            if ($oldAutoFillQuerys->count()){
                $oldAutoFillQuerys->first()->index=$request->index;
                $oldAutoFillQuerys->first()->save();
            }else{

                $saveDocketGridAutoPrefiller = new DocketGridAutoPrefiller();
                $saveDocketGridAutoPrefiller->index = $request->index;
                $saveDocketGridAutoPrefiller->grid_field_id = $request->gridFieldId;
                $saveDocketGridAutoPrefiller->docket_field_id = $request->docketFieldId;
                $saveDocketGridAutoPrefiller->link_grid_field_id = $request->input('linkGridFieldId');
                $saveDocketGridAutoPrefiller->save();
            }
        }

        $categoryId = [1,2,3,4,29];
        $allDocketGridField = DocketFieldGrid::where('docket_field_id',$request->docketFieldId)->where('id','!=',$request->gridFieldId)->whereIn('docket_field_category_id',$categoryId )->get();
        $prefillerEcowise = PrefillerEcowise::where('company_id',Session::get('company_id'))->get();
        $docketGridField =  DocketFieldGrid::where('id',$request->gridFieldId)->get()->first();
        $keyValue = array();
        if($docketGridField->prefillerEcowise != null){
            foreach (json_decode($docketGridField->prefillerEcowise->data, true) as $key=> $value){
                $keyValue [] = $key;
            }
        }

        $maxIndex = (new Collection($docketGridField->gridFieldAutoPreFiller))->pluck('index')->toArray();

        $finaldata = array();
        foreach ($allDocketGridField as $item){
            if($item->is_dependent == 1 && $item->docket_prefiller_id != null ){
                $finaldata[] = array(
                    'id'=>$item->id,
                    'docket_field_id'=>$item->docket_field_id,
                    'label'=>$item->label,
                    'autofield_id'=>null,
                    'index'=>null,
                    'selected_index'=>null,
                    'link_grid_field_id' => null,
                    'isdisabled'=> true,
                    'same'=>null


                );
            }elseif(count($item->gridFieldPreFiller) != 0){
                $finaldata[] = array(
                    'id'=>$item->id,
                    'docket_field_id'=>$item->docket_field_id,
                    'label'=>$item->label,
                    'autofield_id'=>null,
                    'index'=>null,
                    'selected_index'=>null,
                    'link_grid_field_id' => null,

                    'isdisabled'=> true,
                    'same'=>null
                );
            }elseif($item->gridFieldFormula != null){
                $finaldata[] = array(
                    'id'=>$item->id,
                    'docket_field_id'=>$item->docket_field_id,
                    'label'=>$item->label,

                    'autofield_id'=>null,
                    'index'=>null,
                    'link_grid_field_id' => null,

                    'selected_index'=>null,
                    'isdisabled'=> true,
                    'same'=>null

                );
            }else{

                if(@$item->linkGridFieldAutoPrefiller[0] == null){
                    $finaldata[] = array(
                        'id'=>$item->id,
                        'docket_field_id'=>$item->docket_field_id,
                        'label'=>$item->label,
                        'autofield_id'=>null,
                        'index'=>null,
                        'link_grid_field_id' => null,
                        'selected_index'=>null,
                        'isdisabled'=> false,
                        'same'=>null



                    );
                }else{
                    if($request->gridFieldId == $item->linkGridFieldAutoPrefiller[0]->grid_field_id){
                        $finaldata[] = array(
                            'id'=>$item->id,
                            'docket_field_id'=>$item->docket_field_id,
                            'label'=>$item->label,
                            'autofield_id'=>$item->linkGridFieldAutoPrefiller[0]->id,
                            'index'=>$item->linkGridFieldAutoPrefiller[0]->index,
                            'link_grid_field_id' =>$item->linkGridFieldAutoPrefiller[0]->link_grid_field_id,
                            'selected_index'=>$item->linkGridFieldAutoPrefiller[0]->selected_index,
                            'isdisabled'=> true,
                            'same'=>true
                        );
                    }else{
                        $finaldata[] = array(
                            'id'=>$item->id,
                            'docket_field_id'=>$item->docket_field_id,
                            'label'=>$item->label,
                            'autofield_id'=>$item->linkGridFieldAutoPrefiller[0]->id,
                            'index'=>$item->linkGridFieldAutoPrefiller[0]->index,
                            'selected_index'=>$item->linkGridFieldAutoPrefiller[0]->selected_index,
                            'link_grid_field_id' =>$item->linkGridFieldAutoPrefiller[0]->link_grid_field_id,
                            'isdisabled'=> true,
                            'same'=>false


                        );
                    }
                }

            }


        }




        return view('dashboard/company/docketManager/prefillerEcowise/autoFill',compact('prefillerEcowise','docketGridField','keyValue','allDocketGridField','finaldata','maxIndex'));
    }

    public function saveSelectPrefilerEcowise(Request $request){
        if($request->autoField ==1 ){

            if($request->type == 1) {
                if ($request->selectedId != "0") {
                    DocketFieldGrid::where('id', $request->field_id)->update(['selected_index_value' => $request->selectedId]);
                } else {
                    DocketFieldGrid::where('id', $request->field_id)->update(['selected_index_value' => null]);

                }
            }elseif($request->type == 2){
                if($request->selectedId != "0"){
                    DocketGridAutoPrefiller::where('grid_field_id',$request->field_id)->where('index',$request->index)->update(['selected_index'=>$request->selectedId]);
                }else{
                    DocketGridAutoPrefiller::where('grid_field_id',$request->field_id)->where('index',$request->index)->update(['selected_index'=>null]);
                }
            }

            $categoryId = [1,2,3,4,29];
            $allDocketGridField = DocketFieldGrid::where('docket_field_id',$request->docket_field_id)->where('id','!=',$request->field_id)->whereIn('docket_field_category_id',$categoryId )->get();
            $prefillerEcowise = PrefillerEcowise::where('company_id',Session::get('company_id'))->get();
            $docketGridField =  DocketFieldGrid::where('id',$request->field_id)->get()->first();
            $keyValue = array();
            if($docketGridField->prefillerEcowise != null){
                foreach (json_decode($docketGridField->prefillerEcowise->data, true) as $key=> $value){
                    $keyValue [] = $key;
                }
            }

            $maxIndex = (new Collection($docketGridField->gridFieldAutoPreFiller))->pluck('index')->toArray();

            $finaldata = array();
            foreach ($allDocketGridField as $item){
                if($item->is_dependent == 1 && $item->docket_prefiller_id != null ){
                    $finaldata[] = array(
                        'id'=>$item->id,
                        'docket_field_id'=>$item->docket_field_id,
                        'label'=>$item->label,
                        'autofield_id'=>null,
                        'index'=>null,
                        'selected_index'=>null,
                        'link_grid_field_id' => null,
                        'isdisabled'=> true,
                        'same'=>null


                    );
                }elseif(count($item->gridFieldPreFiller) != 0){
                    $finaldata[] = array(
                        'id'=>$item->id,
                        'docket_field_id'=>$item->docket_field_id,
                        'label'=>$item->label,
                        'autofield_id'=>null,
                        'index'=>null,
                        'selected_index'=>null,
                        'link_grid_field_id' => null,

                        'isdisabled'=> true,
                        'same'=>null
                    );
                }elseif($item->gridFieldFormula != null){
                    $finaldata[] = array(
                        'id'=>$item->id,
                        'docket_field_id'=>$item->docket_field_id,
                        'label'=>$item->label,

                        'autofield_id'=>null,
                        'index'=>null,
                        'link_grid_field_id' => null,

                        'selected_index'=>null,
                        'isdisabled'=> true,
                        'same'=>null

                    );
                }else{

                    if(@$item->linkGridFieldAutoPrefiller[0] == null){
                        $finaldata[] = array(
                            'id'=>$item->id,
                            'docket_field_id'=>$item->docket_field_id,
                            'label'=>$item->label,
                            'autofield_id'=>null,
                            'index'=>null,
                            'link_grid_field_id' => null,
                            'selected_index'=>null,
                            'isdisabled'=> false,
                            'same'=>null



                        );
                    }else{
                        if($request->field_id == $item->linkGridFieldAutoPrefiller[0]->grid_field_id){
                            $finaldata[] = array(
                                'id'=>$item->id,
                                'docket_field_id'=>$item->docket_field_id,
                                'label'=>$item->label,
                                'autofield_id'=>$item->linkGridFieldAutoPrefiller[0]->id,
                                'index'=>$item->linkGridFieldAutoPrefiller[0]->index,
                                'link_grid_field_id' =>$item->linkGridFieldAutoPrefiller[0]->link_grid_field_id,
                                'selected_index'=>$item->linkGridFieldAutoPrefiller[0]->selected_index,
                                'isdisabled'=> true,
                                'same'=>true
                            );
                        }else{
                            $finaldata[] = array(
                                'id'=>$item->id,
                                'docket_field_id'=>$item->docket_field_id,
                                'label'=>$item->label,
                                'autofield_id'=>$item->linkGridFieldAutoPrefiller[0]->id,
                                'index'=>$item->linkGridFieldAutoPrefiller[0]->index,
                                'selected_index'=>$item->linkGridFieldAutoPrefiller[0]->selected_index,
                                'link_grid_field_id' =>$item->linkGridFieldAutoPrefiller[0]->link_grid_field_id,
                                'isdisabled'=> true,
                                'same'=>false


                            );
                        }
                    }

                }


            }


            return view('dashboard/company/docketManager/prefillerEcowise/autoFill', compact('prefillerEcowise','docketGridField','keyValue','allDocketGridField','finaldata','maxIndex'));

        }else if($request->autoField ==0){
            if($request->type == 1){
                if($request->selectedId != "0"){
                    DocketFieldGrid::where('id',$request->field_id)->update(['selected_index_value'=>$request->selectedId]);
                }else{
                    DocketFieldGrid::where('id',$request->field_id)->update(['selected_index_value'=> null]);

                }
                $docketGridField =  DocketFieldGrid::where('id',$request->field_id)->get()->first();
                $keyValue = array();
                if($docketGridField->prefillerEcowise != null){
                    foreach (json_decode($docketGridField->prefillerEcowise->data, true) as $key=> $value){
                        $keyValue [] = $key;
                    }
                }
                return view('dashboard/company/docketManager/prefillerEcowise/withoutAutoFill', compact('docketGridField','keyValue'));
            }

        }




    }

     //normal
    public function getNormalEcowiseData(Request $request){
        $validator = Validator::make(Input::all(), ['username'   => 'required', 'password' =>  'required','url' =>  'required']);
        if ($validator->fails()) {
            foreach ($validator->messages()->getMessages() as $field_name => $messages) {
                $errors[] = $messages[0];
            }
            return response()->json(array('status' => false, 'message' => $errors));
        }else{

            try {
                $client = new \GuzzleHttp\Client();
                $response = $client->get($request->url, [
                    'auth' => [
                        $request->username,
                        $request->password
//                    '319029\Record Time',
//                    'Pa55w0rd.NK'
                    ],
                ]);
                $data = $response->getBody()->getContents();
                $parseData = array();
                $json = simplexml_load_string($data);

                foreach ($json->entry as $item) {
                    $ns = $item->content->children('http://schemas.microsoft.com/ado/2007/08/dataservices/metadata');
                    $fields = $ns->properties->children("http://schemas.microsoft.com/ado/2007/08/dataservices");
                    $parseData[] = json_decode(json_encode($fields), true);
                }

                $finalData = array();
                foreach ($parseData as $arrangeData) {
                    foreach ($arrangeData as $key => $arrangeDataas) {
                        $finalData[str_replace('_', ' ', $key)][] = $arrangeDataas;
                    }
                }

                $matchEcowiseData = PrefillerEcowise::where('url', $request->url)->where('company_id', Session::get('company_id'))->first();
                if ($matchEcowiseData == null) {
                    $saveEcowise = new PrefillerEcowise();
                    $saveEcowise->data = json_encode($finalData);
                    $saveEcowise->url = $request->url;
                    $saveEcowise->company_id = Session::get('company_id');
                    $saveEcowise->save();
                } else {
                    $matchEcowiseData->update(['data' => json_encode($finalData)]);
                }
                $girdfield = DocketField::where('id',$request->docket_field_id)->get()->first();

                $allUrl = PrefillerEcowise::where('company_id', Session::get('company_id'))->get();
                return view('dashboard/company/docketManager/prefillerEcowise/selectUrl', compact('allUrl','girdfield'));
            }catch (\Exception $e){
                return response()->json(array('status' => false, 'message' => "Invalid data please try again"));
            }

        }

    }
    public function ecowiseNormalDataUpdateUrl(Request $request){
        DocketField::where('id',$request->docket_field_id)->update(['echowise_id'=>$request->id,'selected_index'=>null,'link_prefiller_filter_label'=>'','link_prefiller_filter_value'=>'']);
        $docketField =  DocketField::where('id',$request->docket_field_id)->get()->first();
        if($docketField->linkPrefillerFilter){

            foreach ($docketField->linkPrefillerFilter as $linkPrefillerFilters){
                $linkPrefillerFilters->delete();
            }
        }
        $keyValue = array();
        if($docketField->prefillerEcowise != null){
            foreach (json_decode($docketField->prefillerEcowise->data, true) as $key=> $value){
                $keyValue [] = $key;
            }
        }
        return view('dashboard/company/docketManager/prefillerEcowise/dynamicNormalFilterView', compact('docketField','keyValue'));
    }

    public  function selectNormalPrefilerEcowise(Request $request){
        if($request->type == 1){
            if($request->selectedId != "0"){
                DocketField::where('id',$request->id)->update(['selected_index'=>$request->selectedId]);
            }else{
                DocketField::where('id',$request->id)->update(['selected_index'=>null]);

            }
            $docketFielddata =  DocketField::where('id',$request->id)->get()->first();
            $keyValue = array();
            if($docketFielddata->prefillerEcowise != null){
                foreach (json_decode($docketFielddata->prefillerEcowise->data, true) as $key=> $value){
                    $keyValue [] = $key;
                }
            }
            return view('dashboard/company/docketManager/prefiller/withoutAutoFill', compact('docketFielddata','keyValue'));
        }

    }



    public function getDocketPrefillerChild($prefiller, $finalPrefillerMaxIndex,$defaultPrefillerId)
    {
        $child = "";
        $urlUpdatePreFiller = url('dashboard/company/docketManager/prefillerManager/updatePrifillerManagerlabel');
        foreach ($prefiller as $item) {

            $prefillerForMaxIndex = DocketPrefillerValue::where('docket_prefiller_id', $item['docket_prefiller_id'])->pluck('index')->toArray();
            $finalPrefillerMaxIndex = max($prefillerForMaxIndex);
            if (!$this->prefillerFirstRow) {
                $child .= "<tr>";
                for ($i = 1; $i < $item['index']; $i++) {
                    $child .= "<td></td>";
                }
            }
            if ($finalPrefillerMaxIndex == $item['index']) {
                if ($defaultPrefillerId != null){
                    if (in_array($item['id'],$defaultPrefillerId)){
                        $child .= '<td><div class="prefillercontent">  <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$item["id"].'" items="'.$item["docket_grid_id"].'" datatype="1" checked > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a   id="deleteprefillerManagerLabel" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px 18px;background: #FF5722;position: absolute;box-shadow: none;top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"   data-index="' . $item['index'] . '"   class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>  </td>';
                    }else{
                        $child .= '<td><div class="prefillercontent">  <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$item["id"].'" items="'.$item["docket_grid_id"].'" datatype="1"  > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a   id="deleteprefillerManagerLabel" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px 18px;background: #FF5722;position: absolute;box-shadow: none;top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"   data-index="' . $item['index'] . '"   class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>  </td>';
                    }
                }else{
                    $child .= '<td><div class="prefillercontent">  <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" value="'.$item["id"].'" items="'.$item["docket_grid_id"].'" datatype="1"  > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a   id="deleteprefillerManagerLabel" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px 18px;background: #FF5722;position: absolute;box-shadow: none;top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"   data-index="' . $item['index'] . '"   class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>  </td>';
                }

            } else {
                $child .= '<td><div class="prefillercontent"> <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i>  <input  style="margin-right: 4px;" type="checkbox" class="defaultgridCheckMark" disabled  ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a   id="deleteprefillerManagerLabel" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin : 11px 18px;background: #FF5722;position: absolute;box-shadow: none;top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addPrefillerManagerValue" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"  data-index="' . $item['index'] . '"   class="btn btn-raised btn-danger btn-xs btnprefiller"   style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0; "><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>  </td>';

            }
            if (count($item['prefiller']) > 0) {
                $this->prefillerFirstRow = true;
                $child .= $this->getDocketPrefillerChild($item['prefiller'], $finalPrefillerMaxIndex,$defaultPrefillerId);
            } else {
                $this->prefillerFirstRow = false;
                $child .= "</tr>";
            }
        }
        return $child;
    }

    public function saveDocketPrefillerManager(Request $request){
        $this->validate($request,['grid_field_id'   => 'required','docketprefillerid'=>'required']);
        DocketFieldGrid::where('id',$request->grid_field_id)->update(['default_prefiller_id'=>null,'docket_prefiller_id'=>$request->docketprefillerid]);
        $data =  $this->saveIsDependent($request);
        $docketPrefillerManager =$data->getData()['docketPrefillerManager'];
        $docketField =$data->getData()['docketField'];
        $finalPrefillerView =$data->getData()['finalPrefillerView'];
        $docketGridField =$data->getData()['docketGridField'];
        $finalPrefilMaxIndex =$data->getData()['finalPrefilMaxIndex'];
        $finalSelectBox =$data->getData()['finalSelectBox'];
        $autoCheckFieldArray = DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('link_grid_field_id')->toArray();
        return view('dashboard/company/docketManager/gridPrefiller/dependent', compact('docketPrefillerManager','docketField','finalPrefillerView','docketGridField','finalPrefilMaxIndex','finalSelectBox','autoCheckFieldArray'));
    }

    public  function savePrefillerManagerChild(Request $request){
        $docketPrefillerId = $request->docketprefillerid;
        $value = $request->value;
        $rootId = $request->rootId;
        $index = $request->index;
        $docketFiledPreFiller = new DocketPrefillerValue();
        $docketFiledPreFiller->label = $value;
        $docketFiledPreFiller->root_id = $rootId;
        $docketFiledPreFiller->docket_prefiller_id = $docketPrefillerId;
        $docketFiledPreFiller->index = $index + 1;
        $docketFiledPreFiller->save();
        $data =  $this->saveIsDependent($request);
        $docketPrefillerManager =$data->getData()['docketPrefillerManager'];
        $docketField =$data->getData()['docketField'];
        $finalPrefillerView =$data->getData()['finalPrefillerView'];
        $docketGridField =$data->getData()['docketGridField'];
        $finalPrefilMaxIndex =$data->getData()['finalPrefilMaxIndex'];
        $finalSelectBox =$data->getData()['finalSelectBox'];
        $autoCheckFieldArray = DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('link_grid_field_id')->toArray();

        return view('dashboard/company/docketManager/gridPrefiller/dependent', compact('docketPrefillerManager','docketField','finalPrefillerView','docketGridField','finalPrefilMaxIndex','finalSelectBox','autoCheckFieldArray'));
    }



    public function getPrefillerChilds($prefiller,$finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory){
        $child = "";
        $urlUpdatePreFiller = url('dashboard/company/docketBookManager/designDocket/updatePreFiller');
        foreach ($prefiller as $item){

            $prefillerForMaxIndex = DocketFiledPreFiller::where('docket_field_id',$item['docket_field_id'])->pluck('index')->toArray();
            $finalPrefillerMaxIndex =max($prefillerForMaxIndex);

            $docketField = DocketField::where('id',$item['docket_field_id'])->where('docket_id',$tempDocketId)->first();
            $defaultPrefillerId =unserialize($docketField->default_prefiller_id);


            if(!$this->prefillerFirstRow){
                $child .= "<tr>";
                for($i=1; $i<$item['index'];$i++){ $child .= "<td></td>"; }
            }
            if ($finalPrefillerMaxIndex == $item['index']){
                if ($defaultPrefillerId != null) {
                    if (in_array($item['id'], $defaultPrefillerId)) {
                        $child .= '<td><div class="prefillercontent"> <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" value="' . $item['id'] . '" items="' . $item["docket_field_id"] . '"  checked><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a   id="deleteprefillerLabel" data-id="' . $item['id'] . '" data-docketfieldid="' . $item['docket_field_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#updateNewPrefillerneValue" data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $item['index'].'"  data-labels="'.$item["docket_field_name"].'"  data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div>  </td>';
                    } else {
                        $child .= '<td><div class="prefillercontent"> <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" value="' . $item['id'] . '" items="' . $item["docket_field_id"] . '" ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a   id="deleteprefillerLabel" data-id="' . $item['id'] . '" data-docketfieldid="' . $item['docket_field_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#updateNewPrefillerneValue" data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $item['index'].'"  data-labels="'.$item["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>   </td>';

                    }
                }else{
                    $child .= '<td><div class="prefillercontent"> <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" value="' . $item['id'] . '" items="' . $item["docket_field_id"] . '" ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a   id="deleteprefillerLabel" data-id="' . $item['id'] . '" data-docketfieldid="' . $item['docket_field_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#updateNewPrefillerneValue" data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $item['index'].'"  data-labels="'.$item["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>  </td>';

                }
            }else{
                $child .= '<td><div class="prefillercontent"> <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" disabled  ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="'.$item['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $item['value'] .'</a> <a   id="deleteprefillerLabel" data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin : 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#updateNewPrefillerneValue" data-id="'.$item['id'].'" data-docketfieldid="'.$item['docket_field_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $item['index'].'"  data-labels="'.$item["docket_field_name"].'"  class="btn btn-raised btn-danger btn-xs btnprefiller" data-prefillertype="'.$docketFieldCategory.'"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>  </td>';

            }
            if(count($item['prefiller'])>0){
                $this->prefillerFirstRow = true;
                $child .= $this->getPrefillerChilds($item['prefiller'],$finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory);
            }else{
                $this->prefillerFirstRow = false;
                $child .="</tr>";
            }
        }
        return $child;
    }

    public function savePrefillerData(Request $request){
        $this->validate($request,['field_id'   => 'required','is_dependent_data'=>'required']);
        $tempDocketId = $request->docket_id;
        if ($request->is_dependent_data == 0){
            $tempDocket =   Docket::where('id',$tempDocketId)->firstOrFail();
            $docketFielddata = DocketField::where('id',$request->field_id)->where('docket_id',$tempDocketId)->first();
            if ($request->isopen == 0){
                $docketFielddata->is_dependent = $request->is_dependent_data;
                $docketFielddata->default_prefiller_id = null;
                $docketFielddata->save();
            }
            $prefiller = array();
                foreach($docketFielddata->docketPreFiller as $subRow):
                    $prefiller[]   =  array(
                        'id'=> $subRow->id,
                        'value'=> $subRow->value,
                        'root_id'=> $subRow->root_id,
                        'index'=> $subRow->index,
                        'docket_field_id'=> $subRow->docket_field_id,
                        'docket_field_name'=>$subRow->docketField->label,
                    );
                endforeach;
            $urlUpdatePreFiller = url('dashboard/company/docketBookManager/designDocket/updatePreFiller');
            $datas = $this->buildTreeArray($prefiller);
            $finalPrefillerView = array();
            foreach ($datas as $row){
                $checkCategoryField = DocketField::where('id',$row['docket_field_id'])->where('docket_id',$tempDocketId)->first();
                if ($checkCategoryField->docket_field_category_id == 3){
                    $docketFieldCategory = 1;
                }else{
                    $docketFieldCategory = 0;
                }
                $final = "";
                $this->prefillerFirstRow    =   true;
                $final .= '<tr><td>';
                $prefillerForMaxIndex = DocketFiledPreFiller::where('docket_field_id',$row['docket_field_id'])->pluck('index')->toArray();
                $finalPrefillerMaxIndex =max($prefillerForMaxIndex);
                $docketField = DocketField::where('id',$row['docket_field_id'])->where('docket_id',$tempDocketId)->first();
                $defaultPrefillerId =unserialize($docketField->default_prefiller_id);
                if ($finalPrefillerMaxIndex == $row['index']){
                    if ($defaultPrefillerId != null){
                        if (in_array($row['id'],$defaultPrefillerId)){
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" value="'.$row["id"].'" items="'.$row["docket_field_id"].'"  checked  > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a   id="deleteprefillerLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true" /></a>  <a data-toggle="modal" data-target="#updateNewPrefillerneValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'"  data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a>  </div> </td>' ;
                        }else{
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" value="'.$row["id"].'" items="'.$row["docket_field_id"].'"   ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a   id="deleteprefillerLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#updateNewPrefillerneValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;
                        }
                    }else{
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" value="'.$row["id"].'" items="'.$row["docket_field_id"].'"   ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a   id="deleteprefillerLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#updateNewPrefillerneValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'" data-docket_id="'.$tempDocketId.'"  data-index="'. $row['index'].'"  data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;
                    }
                }else{
                    $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal"  disabled  ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="'.$row['id'].'" data-url="'.$urlUpdatePreFiller.'" data-title="Enter Label Text">'. $row['value'] .'</a>   <a  id="deleteprefillerLabel" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px -10px;background: #FF5722;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#updateNewPrefillerneValue" data-id="'.$row['id'].'" data-docketfieldid="'.$row['docket_field_id'].'" data-docket_id="'.$tempDocketId.'" data-index="'. $row['index'].'" data-labels="'.$row["docket_field_name"].'" data-prefillertype="'.$docketFieldCategory.'" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 5px;background: #4395bb;position: absolute;box-shadow: none;    top: 0px;right: 0px;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a> </div> </td>' ;
                }
                if(count($row["prefiller"])>0){
                    $final .=  $this->getPrefillerChilds($row["prefiller"],$finalPrefillerMaxIndex,$tempDocketId,$docketFieldCategory);
                }
                $finalPrefillerView[] = array(
                    'id'=>$row['docket_field_id'],
                    'final'=>$final
                );
            }
            return view('dashboard/company/docketManager/prefiller/independent', compact('tempDocket','finalPrefillerView','docketFielddata'));

        }
        elseif($request->is_dependent_data == 1){
            $docketPrefillerManager = DocketPrefiller::where('company_id',Session::get('company_id'))->get();

            $tempDocket =   Docket::where('id',$tempDocketId)->firstOrFail();
            $docketFielddata = DocketField::where('id',$request->field_id)->where('docket_id',$tempDocketId)->get()->first();
            if ($request->isopen == 0){
                $docketFielddata->is_dependent = $request->is_dependent_data;
                $docketFielddata->default_prefiller_id = null;
                $docketFielddata->save();
            }
            $prefiller = array();
            $finalPrefillerView = array();
            $docketPreFiller = DocketPrefillerValue::where('docket_prefiller_id', $docketFielddata->docket_prefiller_id)->get();
            foreach ($docketPreFiller as $subRow):
                $prefiller[] = array(
                    'id' => $subRow->id,
                    'value' => $subRow->label,
                    'root_id' => $subRow->root_id,
                    'index' => $subRow->index,
                    'docket_prefiller_id' => $subRow->docket_prefiller_id,
                    'docket_grid_id'=>$request->field_id,
                );
            endforeach;
            $urlUpdatePreFiller = url('dashboard/company/docketManager/prefillerManager/updatePrifillerManagerlabel');
            $datas = $this->buildTreeArray($prefiller);
            $docketFielddatas = DocketField::where('id',$request->field_id)->where('docket_id',$tempDocketId)->get()->first();
            $defaultPrefillerId =unserialize($docketFielddatas->default_prefiller_id);
            foreach ((new Collection($datas))->sortBy('value') as $row) {
                $prefillerForMaxIndex = DocketPrefillerValue::where('docket_prefiller_id', $row['docket_prefiller_id'])->pluck('index')->toArray();
                $finalPrefillerMaxIndex = max($prefillerForMaxIndex);
                $final = "";
                $this->prefillerFirstRow = true;
                $final .= '<tr><td>';
                if ($finalPrefillerMaxIndex == $row['index']) {
                    if ($defaultPrefillerId != null){
                        if (in_array($row['id'],$defaultPrefillerId)){
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1"  checked> <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabelchild" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addChidPrefillerManager" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
                        }else{
                            $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1" > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabelchild" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addChidPrefillerManager" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
                        }
                    }else{
                        $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" value="'.$row["id"].'" items="'.$row["docket_grid_id"].'"  datatype="1" > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a    id="deleteprefillerManagerLabelchild" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a>  <a data-toggle="modal" data-target="#addChidPrefillerManager" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" data-index="' . $row['index'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
                    }
                } else {
                    $final .= '<div class="prefillercontent"><input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" disabled  >  <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $row['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $row['value'] . '</a>   <a   id="deleteprefillerManagerLabelchild" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 18px;background: #FF5722;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addChidPrefillerManager" data-id="' . $row['id'] . '" data-docketPrefillerManagerId ="' . $row['docket_prefiller_id'] . '"  data-index="' . $row['index'] . '" class="btn btn-raised btn-danger btn-xs btnprefiller" style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0;"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div> </td>';
                }
                if (count($row["prefiller"]) > 0) {
                    $final .= $this->getDocketPrefillerManagerChild($row["prefiller"], $finalPrefillerMaxIndex,$defaultPrefillerId);
                }
                $finalPrefillerView[] = array(
                    'id' => $row['docket_prefiller_id'],
                    'final' => $final
                );
            }
            return view('dashboard/company/docketManager/prefiller/dependent', compact('tempDocket','finalPrefillerView','docketFielddata','docketPrefillerManager'));



        }else if($request->is_dependent_data == 2){
            $tempDocket =   Docket::where('id',$tempDocketId)->firstOrFail();
            $docketFielddata = DocketField::where('id',$request->field_id)->where('docket_id',$tempDocketId)->first();
            if ($request->isopen == 0){
                $docketFielddata->is_dependent = $request->is_dependent_data;
                $docketFielddata->default_prefiller_id = null;
                $docketFielddata->save();
            }

            $prefillerEcowise = PrefillerEcowise::where('company_id',Session::get('company_id'))->get();
            $keyValue = array();
            if($docketFielddata->prefillerEcowise != null){
                foreach (json_decode($docketFielddata->prefillerEcowise->data, true) as $key=> $value){
                    $keyValue [] = $key;
                }
            }

            $ecoPrefiller = PrefillerEcowise::where('id',$docketFielddata->echowise_id)->get()->first();
            if($ecoPrefiller) {
                if($docketFielddata->link_prefiller_filter_label!=""){
                    $value = json_decode($ecoPrefiller->data, true)[$docketFielddata->link_prefiller_filter_label];
                    $result = array();
                    foreach ($value as $data) {
                        if ($data != []) {
                            $result[] = $data;
                        }
                    }

                    $suggestionValue = array_unique($result);
                }else{
                    $suggestionValue = [];
                }

            }else{
                $suggestionValue = [];
            }

            return view('dashboard/company/docketManager/prefiller/ecowise',compact('tempDocket','docketFielddata','keyValue','prefillerEcowise','suggestionValue'));

        }
    }


    public function addNewParentPrefiller(Request $request){
        $fieldType = $request->dataType;
        if($fieldType == 0){
            $validator = Validator::make(Input::all(), ['value'   => 'required']);
            if ($validator->fails()) {
                foreach ($validator->messages()->getMessages() as $field_name => $messages) {
                    $errors[] = $messages[0];
                }
                return response()->json(array('status' => false, 'message' => $errors));
            }else{
                $value = $request->value;
            }

        }else if($fieldType == 1){
            $validator = Validator::make(Input::all(), ['value'   => 'required|Int']);
            if ($validator->fails()) {
                foreach ($validator->messages()->getMessages() as $field_name => $messages) {
                    $errors[] = $messages[0];
                }
                return response()->json(array('status' => false, 'message' => $errors));
            }else{
                $value = $request->value;
            }
        }else if($fieldType == 2){
            $validator = Validator::make(Input::all(), ['value'   => 'required|email']);
            if ($validator->fails()) {
                foreach ($validator->messages()->getMessages() as $field_name => $messages) {
                    $errors[] = $messages[0];
                }
                return response()->json(array('status' => false, 'message' => $errors));
            }else{
                $validator = new MailgunValidator('pubkey-6f241717413584cea1333586a2b88c57');
                if($validator->validate($request->value)) {

                    $value = $request->value;

                }else{
                    return response()->json(array('status' => false, 'message' => "Invalid Email address."));
                }
            }

        }else{
            return response()->json(['status' => false, 'message' => "Invalid Data"]);

        }


        $docketFiledPreFiller = new DocketFiledPreFiller();
        $docketFiledPreFiller->value = $value;
        $docketFiledPreFiller->root_id = 0;
        $docketFiledPreFiller->docket_field_id = $request->field_id;
        $docketFiledPreFiller->index =  1;
        $docketFiledPreFiller->save();
        $data = $this->savePrefillerData($request);
        $tempDocket=$data->getData()['tempDocket'];
        $finalPrefillerView =$data->getData()['finalPrefillerView'];
        $docketFielddata =$data->getData()['docketFielddata'];
        return view('dashboard/company/docketManager/prefiller/independent', compact('tempDocket','finalPrefillerView','docketFielddata'));
    }

    public function addNewChildPrefiller(Request $request){

        $fieldType = $request->dataType;
        if($fieldType == 0){
            $validator = Validator::make(Input::all(), ['value'   => 'required']);
            if ($validator->fails()) {
                foreach ($validator->messages()->getMessages() as $field_name => $messages) {
                    $errors[] = $messages[0];
                }
                return response()->json(array('status' => false, 'message' => $errors));
            }else{
                $value = $request->value;
            }

        }else if($fieldType == 1){
            $validator = Validator::make(Input::all(), ['value'   => 'required|Int']);
            if ($validator->fails()) {
                foreach ($validator->messages()->getMessages() as $field_name => $messages) {
                    $errors[] = $messages[0];
                }
                return response()->json(array('status' => false, 'message' => $errors));
            }else{
                $value = $request->value;
            }
        }else if($fieldType == 2){
            $validator = Validator::make(Input::all(), ['value'   => 'required|email']);
            if ($validator->fails()) {
                foreach ($validator->messages()->getMessages() as $field_name => $messages) {
                    $errors[] = $messages[0];
                }
                return response()->json(array('status' => false, 'message' => $errors));
            }else{
                $validator = new MailgunValidator('pubkey-6f241717413584cea1333586a2b88c57');
                if($validator->validate($request->value)) {
                    $value = $request->value;
                }else{
                    return response()->json(array('status' => false, 'message' => "Invalid Email address."));
                }
            }

        }else{
            return response()->json(['status' => false, 'message' => "Invalid Data"]);

        }
        $docketFiledPreFiller = new DocketFiledPreFiller();
        $docketFiledPreFiller->value = $value;
        $docketFiledPreFiller->root_id = $request->root;
        $docketFiledPreFiller->docket_field_id = $request->field_id;
        $docketFiledPreFiller->index =  $request->index + 1;
        $docketFiledPreFiller->save();
        $data = $this->savePrefillerData($request);
        $tempDocket=$data->getData()['tempDocket'];
        $finalPrefillerView =$data->getData()['finalPrefillerView'];
        $docketFielddata =$data->getData()['docketFielddata'];
        return view('dashboard/company/docketManager/prefiller/independent', compact('tempDocket','finalPrefillerView','docketFielddata'));

    }



    public function deletePrefillerLabels(Request $request){
        $root_id= $request->id;
        $prefillerId=$this->getChildPrefillerId($root_id);
        DocketFiledPreFiller::whereIn('id',array_unique($prefillerId))->delete();
        $data = $this->savePrefillerData($request);
        $tempDocket=$data->getData()['tempDocket'];
        $finalPrefillerView =$data->getData()['finalPrefillerView'];
        $docketFielddata =$data->getData()['docketFielddata'];
        return view('dashboard/company/docketManager/prefiller/independent', compact('tempDocket','finalPrefillerView','docketFielddata'));
    }


    public function clearAllPrefiller(Request $request){
        $data = DocketFiledPreFiller::where('docket_field_id',$request->field_id)->pluck('id')->toArray();
        DocketFiledPreFiller::whereIn('id',$data)->delete();
        $data = $this->savePrefillerData($request);
        $tempDocket=$data->getData()['tempDocket'];
        $finalPrefillerView =$data->getData()['finalPrefillerView'];
        $docketFielddata =$data->getData()['docketFielddata'];
        return view('dashboard/company/docketManager/prefiller/independent', compact('tempDocket','finalPrefillerView','docketFielddata'));
    }

    public function saveDocketFieldPrefillerManager(Request $request){
       DocketField::where('id',$request->field_id)->update(['default_prefiller_id'=>null,'docket_prefiller_id'=>$request->prefillerManagerId]);
        $data = $this->savePrefillerData($request);
        $tempDocket=$data->getData()['tempDocket'];
        $finalPrefillerView =$data->getData()['finalPrefillerView'];
        $docketFielddata =$data->getData()['docketFielddata'];
        $docketPrefillerManager = $data->getData()['docketPrefillerManager'];
        return view('dashboard/company/docketManager/prefiller/dependent', compact('tempDocket','finalPrefillerView','docketFielddata','docketPrefillerManager'));
    }


    public function getDocketPrefillerManagerChild($prefiller, $finalPrefillerMaxIndex,$defaultPrefillerId)
    {
        $child = "";
        $urlUpdatePreFiller = url('dashboard/company/docketManager/prefillerManager/updatePrifillerManagerlabel');
        foreach ($prefiller as $item) {

            $prefillerForMaxIndex = DocketPrefillerValue::where('docket_prefiller_id', $item['docket_prefiller_id'])->pluck('index')->toArray();
            $finalPrefillerMaxIndex = max($prefillerForMaxIndex);
            if (!$this->prefillerFirstRow) {
                $child .= "<tr>";
                for ($i = 1; $i < $item['index']; $i++) {
                    $child .= "<td></td>";
                }
            }
            if ($finalPrefillerMaxIndex == $item['index']) {
                if ($defaultPrefillerId != null){
                    if (in_array($item['id'],$defaultPrefillerId)){
                        $child .= '<td><div class="prefillercontent">  <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" value="'.$item["id"].'" items="'.$item["docket_grid_id"].'" datatype="1" checked > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a   id="deleteprefillerManagerLabelchild" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px 18px;background: #FF5722;position: absolute;box-shadow: none;top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addChidPrefillerManager" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"   data-index="' . $item['index'] . '"   class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>  </td>';
                    }else{
                        $child .= '<td><div class="prefillercontent">  <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" value="'.$item["id"].'" items="'.$item["docket_grid_id"].'" datatype="1"  > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a   id="deleteprefillerManagerLabelchild" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px 18px;background: #FF5722;position: absolute;box-shadow: none;top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addChidPrefillerManager" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"   data-index="' . $item['index'] . '"   class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>  </td>';
                    }
                }else{
                    $child .= '<td><div class="prefillercontent">  <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i> <input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" value="'.$item["id"].'" items="'.$item["docket_grid_id"].'" datatype="1"  > <a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a   id="deleteprefillerManagerLabelchild" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px 18px;background: #FF5722;position: absolute;box-shadow: none;top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addChidPrefillerManager" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"   data-index="' . $item['index'] . '"   class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin: 11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0"><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>  </td>';
                }

            } else {
                $child .= '<td><div class="prefillercontent"> <i style="font-size: 9px;color: #19afba;" class="fa fa-chevron-right" aria-hidden="true"></i>  <input  style="margin-right: 4px;" type="checkbox" class="defaultCheckMarkNormal" disabled  ><a href="#" id="shortText" class="editabledocketprefiller" data-type="text" data-pk="' . $item['id'] . '" data-url="' . $urlUpdatePreFiller . '" data-title="Enter Label Text">' . $item['value'] . '</a> <a   id="deleteprefillerManagerLabelchild" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"  class="btn btn-raised btn-danger btn-xs btnprefiller"  style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin : 11px 18px;background: #FF5722;position: absolute;box-shadow: none;top: 0; right: 0;"><span class="glyphicon glyphicon-remove" aria-hidden="true"  /></a> <a data-toggle="modal" data-target="#addChidPrefillerManager" data-id="' . $item['id'] . '" data-docketPrefillerManagerId="' . $item['docket_prefiller_id'] . '"  data-index="' . $item['index'] . '"   class="btn btn-raised btn-danger btn-xs btnprefiller"   style="font-size: 9px;color: #ffffffff;border-radius: 17px;padding: 0px 2px;margin:11px 3px;background: #4395bb;position: absolute;box-shadow: none; top: 0; right: 0; "><span class="glyphicon glyphicon-plus" aria-hidden="true" /></a></div>  </td>';

            }
            if (count($item['prefiller']) > 0) {
                $this->prefillerFirstRow = true;
                $child .= $this->getDocketPrefillerManagerChild($item['prefiller'], $finalPrefillerMaxIndex,$defaultPrefillerId);
            } else {
                $this->prefillerFirstRow = false;
                $child .= "</tr>";
            }
        }
        return $child;
    }


    public function saveChildManagerPrefiller(Request $request){
        $docketPrefillerId = $request->prefillerManagerId;
        $value = $request->value;
        $rootId = $request->rootId;
        $index = $request->index;
        $fieldType = $request->dataType;
        if($fieldType == 0){
            $validator = Validator::make(Input::all(), ['value'   => 'required']);
            if ($validator->fails()) {
                foreach ($validator->messages()->getMessages() as $field_name => $messages) {
                    $errors[] = $messages[0];
                }
                return response()->json(array('status' => false, 'message' => $errors));
            }else{
                $value = $request->value;
            }

        }else if($fieldType == 1){
            $validator = Validator::make(Input::all(), ['value'   => 'required|Int']);
            if ($validator->fails()) {
                foreach ($validator->messages()->getMessages() as $field_name => $messages) {
                    $errors[] = $messages[0];
                }
                return response()->json(array('status' => false, 'message' => $errors));
            }else{
                $value = $request->value;
            }
        }else if($fieldType == 2){
            $validator = Validator::make(Input::all(), ['value'   => 'required|email']);
            if ($validator->fails()) {
                foreach ($validator->messages()->getMessages() as $field_name => $messages) {
                    $errors[] = $messages[0];
                }
                return response()->json(array('status' => false, 'message' => $errors));
            }else{
                $validator = new MailgunValidator('pubkey-6f241717413584cea1333586a2b88c57');
                if($validator->validate($request->value)) {
                    $value = $request->value;
                }else{
                    return response()->json(array('status' => false, 'message' => "Invalid Email address."));
                }
            }

        }else{
            return response()->json(['status' => false, 'message' => "Invalid Data"]);

        }



        $docketFiledPreFiller = new DocketPrefillerValue();
        $docketFiledPreFiller->label = $value;
        $docketFiledPreFiller->root_id = $rootId;
        $docketFiledPreFiller->docket_prefiller_id = $docketPrefillerId;
        $docketFiledPreFiller->index = $index + 1;
        $docketFiledPreFiller->save();
        $data = $this->savePrefillerData($request);
        $tempDocket=$data->getData()['tempDocket'];
        $finalPrefillerView =$data->getData()['finalPrefillerView'];
        $docketFielddata =$data->getData()['docketFielddata'];
        $docketPrefillerManager = $data->getData()['docketPrefillerManager'];
        return view('dashboard/company/docketManager/prefiller/dependent', compact('tempDocket','finalPrefillerView','docketFielddata','docketPrefillerManager'));
    }

    public function deleteprefillerManagerLabelchild(Request $request){
        $root_id = $request->id;
        $prefillerId = $this->getChildPrefillerManagerId($root_id);
        DocketPrefillerValue::whereIn('id', array_unique($prefillerId))->delete();
        $data = $this->savePrefillerData($request);
        $tempDocket=$data->getData()['tempDocket'];
        $finalPrefillerView =$data->getData()['finalPrefillerView'];
        $docketFielddata =$data->getData()['docketFielddata'];
        $docketPrefillerManager = $data->getData()['docketPrefillerManager'];
        return view('dashboard/company/docketManager/prefiller/dependent', compact('tempDocket','finalPrefillerView','docketFielddata','docketPrefillerManager'));


    }


    public function getChildPrefillerManagerId($root_id)
    {
        $prefillerId = array();
        $prefillerId[] = intval($root_id);
        $query = DocketPrefillerValue::where('root_id', $root_id);
        if ($query->count() > 0) {
            foreach ($query->get() as $items) {
                $prefillerId[] = $items->id;
                if (DocketPrefillerValue::where('root_id', $items->id)->count() > 0) {
                    $prefillerId = array_merge($prefillerId, $this->getChildPrefillerManagerId($items->id));
                }
            }
        } else {
            $prefillerId[] = $root_id;
        }
        return $prefillerId;

    }

    public function deleteprefillerManagerLabel(Request $request){
        $root_id = $request->id;
        $prefillerId = $this->getChildPrefillerManagerId($root_id);
//        $getIndexValue= array_unique(DocketGridPrefiller::whereIn('id',array_unique($prefillerId))->pluck('index')->toArray());
//        DocketPrefillerValue::whereIn('id', array_unique($prefillerId))->delete();
//        if(count(DocketGridPrefiller::whereIn('id',array_unique($prefillerId))->where('docket_field_grid_id',$request->grid_field_id)->get()) == 0){
//            DocketGridAutoPrefiller::whereIn('index',$getIndexValue)->where('grid_field_id',$request->grid_field_id)->delete();
//        }

        $getIndexValue= array_unique(DocketPrefillerValue::whereIn('id',array_unique($prefillerId))->pluck('index')->toArray());
        DocketPrefillerValue::whereIn('id',array_unique($prefillerId))->delete();
        if(count(DocketPrefillerValue::whereIn('index',$getIndexValue)->where('docket_prefiller_id',$request->docketprefillermanagerid)->get()) == 0){
            DocketGridAutoPrefiller::whereIn('index',$getIndexValue)->where('grid_field_id',$request->grid_field_id)->delete();
        }

        $data =  $this->saveIsDependent($request);
        $docketPrefillerManager =$data->getData()['docketPrefillerManager'];
        $docketField =$data->getData()['docketField'];
        $finalPrefillerView =$data->getData()['finalPrefillerView'];
        $docketGridField =$data->getData()['docketGridField'];
        $finalPrefilMaxIndex =$data->getData()['finalPrefilMaxIndex'];
        $finalSelectBox =$data->getData()['finalSelectBox'];
        $autoCheckFieldArray = DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('link_grid_field_id')->toArray();
        return view('dashboard/company/docketManager/gridPrefiller/dependent', compact('docketPrefillerManager','docketField','finalPrefillerView','docketGridField','finalPrefilMaxIndex','finalSelectBox','autoCheckFieldArray'));
    }


    public function updateDocketTotalStatus(Request $request){
        DocketFieldGrid::where('id',$request->docketfieldId)->update(['sumable'=>$request->checked]);
    }
    public function gridSendDocket(Request $request){
        DocketFieldGrid::where('id',$request->docketfieldId)->update(['send_copy_docket'=>$request->checked]);
    }

    public function updateDocketPrefix(Request $request){
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        Docket::where('id',$request->pk)->update(['prefix'  => $request->value]);
    }

    public function updateInvoicePrefix(Request $request){
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        Invoice::where('id',$request->pk)->update(['prefix'  => $request->value]);
    }


    public function clearAllGridPrefiller(Request $request){
        DocketGridPrefiller::where('docket_field_grid_id',$request->grid_field_id)->delete();
        $autoCheckStatus = false;
        $autoCheckFieldData = DocketGridAutoPrefiller::where('link_grid_field_id',$request->grid_field_id)->get();
        $autoCheckFieldArray= DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('link_grid_field_id')->toArray();
        if (count($autoCheckFieldData)!=0){
            $docketGridPrefillerss = DocketFieldGrid::where('id',$request->grid_field_id)->get()->first();
            $docketGridPrefillerss->auto_field = 0;
            $docketGridPrefillerss->save();
            $docketGridAutoField = DocketGridAutoPrefiller::where('grid_field_id',$request->grid_field_id)->pluck('id')->toArray();
            DocketGridAutoPrefiller::whereIn('id',$docketGridAutoField)->delete();
            $autoCheckStatus = true;
        }
        $data =  $this->gridPrefillerSet($request);
        $docketField = $data->getData()['docketField'];
        $finalPrefillerView = $data->getData()['finalPrefillerView'];
        $docketGridField = $data->getData()['docketGridField'];
        $finalPrefilMaxIndex= $data->getData()['finalPrefilMaxIndex'];
        $finalSelectBox = $data->getData()['finalSelectBox'];
        return view('dashboard/company/docketManager/gridPrefiller/index', compact('docketField','finalPrefillerView','docketGridField','finalPrefilMaxIndex','finalSelectBox','autoCheckFieldData','autoCheckStatus','autoCheckFieldArray'));
    }


    public function exportMapping(Request $request){
        // type (Docket Elements)
        $type = $request->type;
        $docketFieldId  = $request->fieldId;
        $values = array();
        if($type == 1){
            if (count(ExportMapping::where('docket_field_id',$docketFieldId)->get()) == 0){
                $docketFields = DocketField::where('id',$docketFieldId)->withTrashed()->first();
                DocketField::where('id',$docketFieldId)->withTrashed()->update(['csv_header'=>$docketFields->label, 'is_show'=>1]);
                $newExportMapping = new ExportMapping();
                $newExportMapping->docket_field_id = $docketFieldId;
                $newExportMapping->value = serialize($values);
                $newExportMapping->save();
            }
            $docketField = DocketField::where('id',$docketFieldId)->withTrashed()->first();
            return view('dashboard/company/docketManager/exportMapping/normalDocketElement',compact('docketField'));

        }
        else if($type == 20){
            $docketField = DocketField::where('id',$docketFieldId)->withTrashed()->first();
            if (count(ExportMapping::where('docket_field_id',$docketFieldId)->get()) == 0){
                $docketFields = DocketField::where('id',$docketFieldId)->withTrashed()->first();
                DocketField::where('id',$docketFieldId)->withTrashed()->update(['csv_header'=>$docketFields->label, 'is_show'=>1]);
                foreach ($docketFields->docketManualTimer as $docketManualTimer){
                    DocketManualTimer::where('docket_field_id',$docketFieldId)->where('id',$docketManualTimer->id)->update(['csv_header'=>$docketManualTimer->label, 'is_show'=>1]);
                }
                foreach ($docketFields->docketManualTimerBreak as $docketManualTimerBreak){
                    DocketManualTimerBreak::where('docket_field_id',$docketFieldId)->where('id',$docketManualTimerBreak->id)->update(['csv_header'=>$docketManualTimerBreak->label, 'is_show'=>1]);
                }
                $values[] = array(
                    'csvHeader' =>"Explanation",
                    'label' => "Explanation",
                    'id'=>0,
                    'isShow'=>"1",
                );
                $values[] = array(
                    'csvHeader' =>"Total Hours",
                    'label' => "Total Hours",
                    'id'=>0,
                    'isShow'=>"1",

                );
                $newExportMapping = new ExportMapping();
                $newExportMapping->docket_field_id = $docketFieldId;
                $newExportMapping->value = serialize($values);
                $newExportMapping->save();
            }

            return view('dashboard/company/docketManager/exportMapping/ManualTimerDocketElement',compact('docketField'));

        }
        else if($type == 18){
            $docketFields = DocketField::where('id',$docketFieldId)->withTrashed()->first();
            if (count(ExportMapping::where('docket_field_id',$docketFieldId)->get()) == 0){
                $docketFields = DocketField::where('id',$docketFieldId)->withTrashed()->first();
                DocketField::where('id',$docketFieldId)->withTrashed()->update(['csv_header'=>$docketFields->label, 'is_show'=>1]);
                foreach ($docketFields->yesNoField as $yesNoField){
                    YesNoFields::where('id',$yesNoField->id)->update(['csv_header'=>$yesNoField->label, 'is_show'=>1]);
                    foreach ($yesNoField->yesNoDocketsField as $yesNoDocketsFields){
                        YesNoDocketsField::where('id',$yesNoDocketsFields->id)->where('yes_no_field_id',$yesNoDocketsFields->yes_no_field_id)->update(['csv_header'=>$yesNoDocketsFields->label, 'is_show'=>1]);
                    }
                }
                $newExportMapping = new ExportMapping();
                $newExportMapping->docket_field_id = $docketFieldId;
                $newExportMapping->value = serialize($values);
                $newExportMapping->save();
            }
            $docketField = DocketField::where('id',$docketFieldId)->withTrashed()->first();

            return view('dashboard/company/docketManager/exportMapping/YesNoNaDocketElement',compact('docketField'));
        }
        elseif($type == 8){

            if (count(ExportMapping::where('docket_field_id',$docketFieldId)->get()) == 0){
                $docketFields = DocketField::where('id',$docketFieldId)->withTrashed()->first();
                DocketField::where('id',$docketFieldId)->withTrashed()->update(['csv_header'=>$docketFields->label, 'is_show'=>1]);
                $values[] = array(
                    'csvHeader' =>"Checked",
                    'label' => "Checked",
                    'id'=>0,
                    'isShow'=>"1",
                );
                $values[] = array(
                    'csvHeader' =>"Unchecked",
                    'label' => "Unchecked",
                    'id'=>0,
                    'isShow'=>"1",

                );
                $newExportMapping = new ExportMapping();
                $newExportMapping->docket_field_id = $docketFieldId;
                $newExportMapping->value = serialize($values);
                $newExportMapping->save();

            }
            $docketField = DocketField::where('id',$docketFieldId)->withTrashed()->first();
            return view('dashboard/company/docketManager/exportMapping/checkBoxElement',compact('docketField'));
        }
        else if($type == 7){
            $docketField = DocketField::where('id',$docketFieldId)->withTrashed()->first();
            if (count(ExportMapping::where('docket_field_id',$docketFieldId)->get()) == 0){
                $docketFields = DocketField::where('id',$docketFieldId)->withTrashed()->first();
                DocketField::where('id',$docketFieldId)->withTrashed()->update(['csv_header'=>$docketFields->label, 'is_show'=>1]);
                foreach ($docketFields->unitRate as $unitRate){
                    DocketUnitRate::where('docket_field_id',$docketFieldId)->where('type',$unitRate->type)->update(['csv_header'=>$unitRate->label, 'is_show'=>1]);
                }
                $newExportMapping = new ExportMapping();
                $newExportMapping->docket_field_id = $docketFieldId;
                $newExportMapping->value = serialize($values);
                $newExportMapping->save();

            }
            return view('dashboard/company/docketManager/exportMapping/unitRateElement',compact('docketField'));
        }
        else if($type == 24) {
            $docketField = DocketField::where('id', $docketFieldId)->withTrashed()->first();
            if (count(ExportMapping::where('docket_field_id', $docketFieldId)->get()) == 0) {
                $docketFields = DocketField::where('id', $docketFieldId)->withTrashed()->first();
                DocketField::where('id', $docketFieldId)->update(['csv_header' => $docketFields->label, 'is_show' => 1]);
                foreach ($docketFields->tallyUnitRate as $tallyUnitRate) {
                    DocketTallyableUnitRate::where('docket_field_id', $docketFieldId)->where('type', $tallyUnitRate->type)->update(['csv_header' => $tallyUnitRate->label, 'is_show' => 1]);
                }
                $newExportMapping = new ExportMapping();
                $newExportMapping->docket_field_id = $docketFieldId;
                $newExportMapping->value = serialize($values);
                $newExportMapping->save();

            }
            return view('dashboard/company/docketManager/exportMapping/tallyableUnitRateElement', compact('docketField'));
        }
        else if($type == 22){
            if (count(ExportMapping::where('docket_field_id', $docketFieldId)->get()) == 0) {
                $docketFields = DocketField::where('id', $docketFieldId)->withTrashed()->first();
                DocketField::where('id', $docketFieldId)->update(['csv_header' => $docketFields->label, 'is_show' => 1]);
                foreach ($docketFields->girdFields as $girdField){
                    $normalArray = array();
                    if ($girdField->docket_field_category_id == 20 ){
                        $normalArray[] = array(
                            'csvHeader' =>"From",
                            'label' => "From",
                            'id'=>$girdField->id,
                            'isShow'=>"1",
                        );
                        $normalArray[] = array(
                            'csvHeader' =>"To",
                            'label' => "To",
                            'id'=>$girdField->id,
                            'isShow'=>"1",

                        );
                        $normalArray[] = array(
                            'csvHeader' =>"Total Break",
                            'label' => "Total Break",
                            'id'=>$girdField->id,
                            'isShow'=>"1",

                        );
                        $normalArray[] = array(
                            'csvHeader' =>"Explanation",
                            'label' => "Explanation",
                            'id'=>$girdField->id,
                            'isShow'=>"1",
                        );
                        $normalArray[] = array(
                            'csvHeader' =>"Total Hours",
                            'label' => "Total Hours",
                            'id'=>$girdField->id,
                            'isShow'=>"1",

                        );

                        DocketFieldGrid::where('id',$girdField->id)->update(['csv_header' => $girdField->docketFieldCategory->title,'export_value'=>serialize($normalArray), 'is_show' => 1]);
                    }else if($girdField->docket_field_category_id == 8){
                        $normalArray[] = array(
                            'csvHeader' =>"Checked",
                            'label' => "Checked",
                            'id'=>$girdField->id,
                            'isShow'=>"1",
                        );
                        $normalArray[] = array(
                            'csvHeader' =>"Unchecked",
                            'label' => "Unchecked",
                            'id'=>$girdField->id,
                            'isShow'=>"1",

                        );
                        $docketField = DocketField::where('id', $docketFieldId)->withTrashed()->first();
                        DocketFieldGrid::where('id',$girdField->id)->update(['csv_header' => $girdField->docketFieldCategory->title,'export_value'=>serialize($normalArray), 'is_show' => 1]);
                    }else{
                        DocketFieldGrid::where('id',$girdField->id)->update(['csv_header' => $girdField->docketFieldCategory->title,'export_value'=>serialize($normalArray), 'is_show' => 1]);

                    }
                };
                $newExportMapping = new ExportMapping();
                $newExportMapping->docket_field_id = $docketFieldId;
                $newExportMapping->value = serialize($values);
                $newExportMapping->save();


            }
            return view('dashboard/company/docketManager/exportMapping/gridElement', compact('docketField'));
        }else{
            $docketField = DocketField::where('id',$docketFieldId)->withTrashed()->first();
            return view('dashboard/company/docketManager/exportMapping/docketConstantElement',compact('docketField'));
        }

    }




    public function updateExportMappingHeader(Request $request){
        $type = $request->name;
        $value = $request->value;
        $id = $request->pk;
        if($type == "docketField"){
          DocketField::where('id',$id)->update(['csv_header'=>$value]);
        }elseif($type == "docketManualTimer"){
            DocketManualTimer::where('id',$id)->update(['csv_header'=>$value]);
        }elseif($type == "docketManualTimerBreak"){
            DocketManualTimerBreak::where('id',$id)->update(['csv_header'=>$value]);
        }elseif($type == "explanation"){
            $exportMapping = ExportMapping::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->value) as $data){
                if($data['label'] == 'Explanation'){
                    $values[] = array(
                        'csvHeader' =>$value,
                        'label' => "Explanation",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Total Hours",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->value = serialize($values);
            $exportMapping->save();

        }elseif($type == "totalHours"){
            $exportMapping = ExportMapping::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->value) as $data){
                if($data['label'] == 'Explanation'){
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Explanation",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$value,
                        'label' => "Total Hours",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->value = serialize($values);
            $exportMapping->save();
        }elseif($type == "checked"){
            $exportMapping = ExportMapping::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->value) as $data){
                if($data['label'] == 'Checked'){
                    $values[] = array(
                        'csvHeader' =>$value,
                        'label' => "Checked",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Unchecked",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }

            $exportMapping->value = serialize($values);
            $exportMapping->save();

        }elseif($type == "unchecked"){
            $exportMapping = ExportMapping::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->value) as $data){
                if($data['label'] == 'Checked'){
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Checked",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$value,
                        'label' => "Unchecked",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->value = serialize($values);
            $exportMapping->save();
        }else if($type == "yesNoField"){
            YesNoFields::where('id',$id)->update(['csv_header'=>$value]);
        }else if($type == "yesNoDocketsFields"){
            YesNoDocketsField::where('id',$id)->update(['csv_header'=>$value]);
        }else if($type == "docketConstant"){
            DocketConstantField::where('id',$id)->update(['csv_header'=>$value]);
        }elseif($type == "docketValueConstant"){
            $values = array();
           $docketConstan=  DocketConstantField::where('id',$id)->get()->first()->docketField->exportMapping;
            $exportMapping = ExportMapping::where('id',$docketConstan->id)->get()->first();
            foreach (unserialize($exportMapping->value) as $data){
                $values[] = array(
                    'csvHeader' =>$value,
                    'label' => "Fixed Value",
                    'id'=>0,
                    'isShow'=>$data['isShow'],
                );
            }
            $exportMapping->value = serialize($values);
            $exportMapping->save();
        }
        else if($type == "unitRate"){
            DocketUnitRate::where('id',$id)->update(['csv_header'=>$value]);
        }else if($type == "tallyUnitRate"){
            DocketTallyableUnitRate::where('id',$id)->update(['csv_header'=>$value]);
        }else if($type == "gridNormal"){
            DocketFieldGrid::where('id',$id)->update(['csv_header'=>$value]);
        } else if($type == "gridChecked"){
            $exportMapping = DocketFieldGrid::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->export_value) as $data){
                if($data['label'] == 'Checked'){
                    $values[] = array(
                        'csvHeader' =>$value,
                        'label' => "Checked",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Unchecked",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->export_value = serialize($values);
            $exportMapping->save();

        }elseif($type == "gridUnchecked"){
            $exportMapping = DocketFieldGrid::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->export_value) as $data){
                if($data['label'] == 'Checked'){
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Checked",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$value,
                        'label' => "Unchecked",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->export_value = serialize($values);
            $exportMapping->save();
        }elseif($type == "gridFrom"){
            $exportMapping = DocketFieldGrid::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->export_value) as $data){
                if($data['label'] == 'From'){
                    $values[] = array(
                        'csvHeader' =>$value,
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->export_value = serialize($values);
            $exportMapping->save();
        }
        elseif($type == "gridTo"){
            $exportMapping = DocketFieldGrid::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->export_value) as $data){
                if($data['label'] == 'To'){
                    $values[] = array(
                        'csvHeader' =>$value,
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->export_value = serialize($values);
            $exportMapping->save();
        }
        elseif($type == "gridTotal Break"){
            $exportMapping = DocketFieldGrid::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->export_value) as $data){
                if($data['label'] == 'Total Break'){
                    $values[] = array(
                        'csvHeader' =>$value,
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->export_value = serialize($values);
            $exportMapping->save();
        }
        elseif($type == "gridExplanation"){
            $exportMapping = DocketFieldGrid::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->export_value) as $data){
                if($data['label'] == 'Explanation'){
                    $values[] = array(
                        'csvHeader' =>$value,
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->export_value = serialize($values);
            $exportMapping->save();
        }

        elseif($type == "gridTotal Hours"){
            $exportMapping = DocketFieldGrid::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->export_value) as $data){
                if($data['label'] == 'Total Hours'){
                    $values[] = array(
                        'csvHeader' =>$value,
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->export_value = serialize($values);
            $exportMapping->save();
        }else{
            echo "<script>alert('Invalid attempt!')</script>";
        }


    }


    public function exportMappingCheckbox(Request $request){
        $type = $request->type;
        $value = $request->value;
        $id = $request->id;
        if($type == "docketField"){
            DocketField::where('id',$id)->update(['is_show'=>$value]);
        }elseif($type == "docketManualTimer"){
            DocketManualTimer::where('id',$id)->update(['is_show'=>$value]);
        }elseif($type == "docketManualTimerBreak"){
            DocketManualTimerBreak::where('id',$id)->update(['is_show'=>$value]);
        }elseif($type == "explanation"){
            $exportMapping = ExportMapping::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->value) as $data){
                if($data['label'] == 'Explanation'){
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Explanation",
                        'id'=>0,
                        'isShow'=>$values,
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Total Hours",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->value = serialize($values);
            $exportMapping->save();

        }elseif($type == "totalHours"){
            $exportMapping = ExportMapping::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->value) as $data){
                if($data['label'] == 'Explanation'){
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Explanation",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Total Hours",
                        'id'=>0,
                        'isShow'=>$values,
                    );
                }
            }
            $exportMapping->value = serialize($values);
            $exportMapping->save();
        }elseif($type == "checked"){
            $exportMapping = ExportMapping::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->value) as $data){
                if($data['label'] == 'Checked'){
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Checked",
                        'id'=>0,
                        'isShow'=>$values,
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Unchecked",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->value = serialize($values);
            $exportMapping->save();

        }elseif($type == "unchecked"){
            $exportMapping = ExportMapping::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->value) as $data){
                if($data['label'] == 'Checked'){
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Checked",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Unchecked",
                        'id'=>0,
                        'isShow'=>$values,
                    );
                }
            }
            $exportMapping->value = serialize($values);
            $exportMapping->save();
        }else if($type == "yesNoField"){
            YesNoFields::where('id',$id)->update(['is_show'=>$value]);
        }else if($type == "yesNoDocketsFields"){
            YesNoDocketsField::where('id',$id)->update(['is_show'=>$value]);
        }else if($type == "docketConstant"){
            DocketConstantField::where('id',$id)->update(['is_show'=>$value]);
        }else if($type == "docketValueConstant"){
            $values = array();
            $docketConstan=  DocketConstantField::where('id',$id)->get()->first()->docketField->exportMapping;
            $exportMapping = ExportMapping::where('id',$docketConstan->id)->get()->first();
            foreach (unserialize($exportMapping->value) as $data){
                $values[] = array(
                    'csvHeader' =>$data['csvHeader'],
                    'label' => "Fixed Value",
                    'id'=>0,
                    'isShow'=>$value,
                );
            }
            $exportMapping->value = serialize($values);
            $exportMapping->save();

        }else if($type == "unitRate"){
            DocketUnitRate::where('id',$id)->update(['is_show'=>$value]);
        } else if($type == "tallyUnitRate"){
            DocketTallyableUnitRate::where('id',$id)->update(['is_show'=>$value]);
        }else if($type == "gridNormal"){
            DocketFieldGrid::where('id',$id)->update(['is_show'=>$value]);
        }else if($type == "gridChecked"){
            $exportMapping = DocketFieldGrid::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->export_value) as $data){
                if($data['label'] == 'Checked'){
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Checked",
                        'id'=>0,
                        'isShow'=>$value,
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Unchecked",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->export_value = serialize($values);
            $exportMapping->save();

        }elseif($type == "gridUnchecked"){
            $exportMapping = DocketFieldGrid::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->export_value) as $data){
                if($data['label'] == 'Checked'){
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Checked",
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => "Unchecked",
                        'id'=>0,
                        'isShow'=>$value,
                    );
                }
            }
            $exportMapping->export_value = serialize($values);
            $exportMapping->save();
        }elseif($type == "gridFrom"){
            $exportMapping = DocketFieldGrid::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->export_value) as $data){
                if($data['label'] == 'From'){
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$value,
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->export_value = serialize($values);
            $exportMapping->save();
        }
        elseif($type == "gridTo"){
            $exportMapping = DocketFieldGrid::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->export_value) as $data){
                if($data['label'] == 'To'){
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$value,
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->export_value = serialize($values);
            $exportMapping->save();
        }
        elseif($type == "gridTotal Break"){
            $exportMapping = DocketFieldGrid::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->export_value) as $data){
                if($data['label'] == 'Total Break'){
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$value,
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->export_value = serialize($values);
            $exportMapping->save();
        }
        elseif($type == "gridExplanation"){
            $exportMapping = DocketFieldGrid::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->export_value) as $data){
                if($data['label'] == 'Explanation'){
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$value,
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->export_value = serialize($values);
            $exportMapping->save();
        }

        elseif($type == "gridTotal Hours"){
            $exportMapping = DocketFieldGrid::where('id',$id)->get()->first();
            $values = array();
            foreach (unserialize($exportMapping->export_value) as $data){
                if($data['label'] == 'Total Hours'){
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$value,
                    );
                }else{
                    $values[] = array(
                        'csvHeader' =>$data['csvHeader'],
                        'label' => $data['label'],
                        'id'=>0,
                        'isShow'=>$data['isShow'],
                    );
                }
            }
            $exportMapping->export_value = serialize($values);
            $exportMapping->save();
        }
        else{
            echo "<script>alert('Invalid attempt!')</script>";
        }
    }


    public function saveDocketConstant(Request $request){
        $this->validate($request,['value'   => 'required',"docket_id" => 'required']);
        $tempDocketId = $request->docket_id;
        $tempDocket     =   Docket::where('id',$tempDocketId)->firstOrFail();
        $values = array();
        $exportCategory= ExportMappingFieldCategory::where('id',$request->value)->get()->first();

        if($tempDocket->company_id==Session::get('company_id')) {
            $docketDocketValue = 30;
            $order = DocketField::where('docket_id', $tempDocketId)->count();
            $fieldDetails = DocketFiledCategory::where('id', $docketDocketValue)->firstOrFail();
                $newField = new DocketField();
                $newField->docket_id = $tempDocketId;
                $newField->docket_field_category_id = $docketDocketValue;
                $newField->required = 0;
                $newField->order = $order + 1;
                $newField->label = $fieldDetails->title;
                $newField->csv_header = $fieldDetails->title;
                $newField->is_show = 1;
                 if($newField->save()){
                     $docketExportMapping = new DocketConstantField();
                     $docketExportMapping->docket_field_id = $newField->id;
                     $docketExportMapping->export_mapping_field_category_id = $request->value;
                     $docketExportMapping->label = $exportCategory->title;
                     $docketExportMapping->csv_header = $exportCategory->title;
                     $docketExportMapping->is_show = 1;
                     $docketExportMapping->save();
                 }

               if($exportCategory->id == 11){
                   $values[] = array(
                       'csvHeader' =>"Fixed Value",
                       'label' => "Fixed Value",
                       'id'=>0,
                       'isShow'=>1,
                   );
                   $newExportMapping = new ExportMapping();
                   $newExportMapping->docket_field_id = $newField->id;
                   $newExportMapping->value = serialize($values);
                   $newExportMapping->save();
               }else{
                   $newExportMapping = new ExportMapping();
                   $newExportMapping->docket_field_id = $newField->id;
                   $newExportMapping->value = serialize($values);
                   $newExportMapping->save();
               }
            return $this->defaultDocketElementTemplate($newField->id, $tempDocketId);
        }
    }


    public function docketConstantLabelUpdate(Request $request){
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        $tempDocketId   =   DocketConstantField::where('id',$request->pk)->firstOrFail();
        if($tempDocketId->docketField->docketInfo->company_id==Session::get('company_id')){
            DocketConstantField::where('id',$request->pk)->update(['label'  => $request->value]);
        }else{
            echo "<script>alert('Invalid attempt!')</script>";
        }
    }

    public function deleteDocketFields(Request $request, $tempDocketId){
        $this->validate($request,['fieldId'   => 'required']);
        $tempDocket     =   Docket::where('id',$tempDocketId)->firstOrFail();
        if($tempDocket->company_id== Session::get('company_id')) {
            if(count(DocketTimesheet::where('docket_id',$tempDocket->id)->where('docket_field_id',$request->fieldId)->get()) == 1){
                echo "Cannot remove this field. This field is required to capture your employees timesheet/hours worked.";
            }else{
                DocketField::destroy($request->fieldId);
                return $this->defaultDeleteDocketElementTemplate($request->fieldId, $tempDocketId,$request->isShow);
            }
        }else{
            echo "Invalid attempt!";
        }

    }

    public function undoDocketField(Request $request){
        $this->validate($request,['fieldid'   => 'required','docket_id'=> 'required']);
        $tempDocket     =   Docket::where('id',$request->docket_id)->firstOrFail();
        if($tempDocket->company_id==Session::get('company_id')) {
            DocketField::where('docket_id',$request->docket_id)->where('id',$request->fieldid)->withTrashed()->update(['deleted_at'  => null]);
            return $this->defaultDeleteDocketElementTemplate($request->fieldid, $request->docket_id,$request->isShow);
        }else{
            echo "Invalid attempt!";
        }

    }

    public function defaultDeleteDocketElementTemplate($fieldType,$tempDocketId,$isShow){
        $item   =   DocketField::where('id',$fieldType)->withTrashed()->firstOrFail();
        $tempDocket =   Docket::where('id',$tempDocketId)->firstOrFail();
        $tempDocketFields = collect();
        $docketFields = collect();
        if($isShow == 1){
            $tempDocketFields =  DocketField::where('docket_id',$tempDocketId)->withTrashed()->orderBy('order','asc')->get();
            $docketFields= DocketField::orderby ('id','desc')->withTrashed()->first();
        }else if($isShow == 0){
            $tempDocketFields =  DocketField::where('docket_id',$tempDocketId)->orderBy('order','asc')->get();
            $docketFields= DocketField::orderby ('id','desc')->first();
        }


        $docketSetting =   DocketFooter::where('company_id',Session::get('company_id'))->orderby ('id','desc')->get();

        $docketDocument=DocketDocument::where('company_id',Session::get('company_id'))->orderby ('id','desc')->get();
        $attachedDocument=DocketAttachments::orderby ('id','desc')->get();
         return view('dashboard.company.docketManager.deleteDocketField.index', compact('item', 'tempDocket', 'tempDocketFields', 'docketSetting', 'docketFields','docketDocument','attachedDocument'));

    }

    public function showHideDeletedDocketElement(Request $request){
        $tempDocket =   Docket::where('id',$request->docket_id)->firstOrFail();
        $docketSetting =   DocketFooter::where('company_id',Session::get('company_id'))->orderby ('id','desc')->get();
        $docketDocument=DocketDocument::where('company_id',Session::get('company_id'))->orderby ('id','desc')->get();
        $attachedDocument=DocketAttachments::orderby ('id','desc')->get();
        $docketFields= DocketField::orderby ('id','desc')->withTrashed()->first();

        if($request->isShow == 1){
            $tempDocketFields=  DocketField::where('docket_id',$tempDocket->id)->withTrashed()->orderBy('order','asc')->get();
        }else{
            $tempDocketFields=  DocketField::where('docket_id',$tempDocket->id)->orderBy('order','asc')->get();
        }
        return view('dashboard.company.docketManager.deleteDocketField.index', compact( 'tempDocket', 'tempDocketFields', 'docketSetting', 'docketFields','docketDocument','attachedDocument'));

    }


    public function submitNumberSystem(Request $request){
        $this->validate($request,['value'   => 'required','company_id'=>'required']);
        if($request->company_id == Session::get('company_id')){
            Company::where('id',$request->company_id)->update(['number_system'=>$request->value]);
        }else{
            echo 'Invalid attempt!';
        }
    }


    public function showHideDocketPrefix(Request $request){
        $this->validate($request,['isShow'   => 'required','docket_id'=>'required']);
        Docket::where('id',$request->docket_id)->update(['hide_prefix'=>$request->isShow]);
    }

    public function showHideInvoicePrefix(Request $request){
        $this->validate($request,['isShow'   => 'required','invoice_id'=>'required']);
        Invoice::where('id',$request->invoice_id)->update(['hide_prefix'=>$request->isShow]);
    }

    public function showHideDocketNumber(Request $request){
        $this->validate($request,['isShow'   => 'required','docket_id'=>'required']);
        Docket::where('id',$request->docket_id)->update(['is_docket_number'=>$request->isShow]);
    }

    public function updateAprovalMethod(Request $request){
        $this->validate($request,['docket_approval_type'   => 'required','docket_id'=>'required']);
          Docket::where('id',$request->docket_id)->update(['docketApprovalType'=>$request->docket_approval_type]);
          return redirect()->back();

    }


    public function clearAllExportRule(Request $request){
        $this->validate($request,['docket_id'=>'required']);
        $docket = Docket::where('id', $request->docket_id)->get()->first();
         foreach ($docket->docketField as $docketField){
             $docketField->update(['csv_header'=>'','is_show'=>0]);

             if($docketField->exportMapping != null){
                 $docketField->exportMapping->delete();
             }

             if($docketField->docket_field_category_id == 18){
                 // yesNoField
                 foreach ($docketField->yesNoField as $yesNoField){
                     $yesNoField->update(['csv_header'=>'','is_show'=>0]);
                 }

             }else if($docketField->docket_field_category_id == 20){

                 foreach ($docketField->docketManualTimer as $docketManualTimer){
                     $docketManualTimer->update(['csv_header'=>'','is_show'=>0]);
                 }

                 foreach ($docketField->docketManualTimerBreak as $docketManualTimerBreak){
                     $docketManualTimerBreak->update(['csv_header'=>'','is_show'=>0]);
                 }

             }else if($docketField->docket_field_category_id == 23){
                 //tallyUnitRate
                 foreach ($docketField->tallyUnitRate as $tallyUnitRate){
                     $tallyUnitRate->update(['csv_header'=>'','is_show'=>0]);
                 }

             }else if($docketField->docket_field_category_id == 22){
                // girdFields
                 foreach ($docketField->girdFields as $girdFields){
                     $girdFields->update(['csv_header'=>'','is_show'=>0]);
                 }
             }else if($docketField->docket_field_category_id == 30){
                 // girdFields
                 $docketField->docketConstantField->update(['csv_header'=>'','is_show'=>0]);

             }else if($docketField->docket_field_category_id == 7){
                 // Unit rate
                 foreach ($docketField->unitRate as $unitRate){
                     $unitRate->update(['csv_header'=>'','is_show'=>0]);
                 }
             }




         }

    }


    public function isEmailSubjectdDocketGridFieldId(Request $request){
        $this->validate($request,['data' =>     'required','requiredDocketFieldId'=>'required']);
        $docketField =  DocketFieldGrid::findorFail( $request->requiredDocketFieldId);
        $docketField->update(['is_emailed_subject'=>$request->data]);
        return response()->json(['data'=>$docketField]);
    }


    public function updategridTimeFormat(Request $request){
        $this->validate($request,['docket_field_id'=>'required|int','docket_grid_field_id'=>'required|int','checked_value'=>'required']);
         DocketFieldGrid::where('id',$request->docket_grid_field_id)->where('docket_field_id',$request->docket_field_id)->update(['time_format'=>$request->checked_value]);
        return response()->json(['status'=>true,'value'=>$request->checked_value]);
    }

    public function updateTimeFormat(Request $request){
        $this->validate($request,['docket_field_id'=>'required|int','docket_id'=>'required|int','checked_value'=>'required']);
        DocketField::where('docket_id',$request->docket_id)->where('id',$request->docket_field_id)->update(['time_format'=>$request->checked_value]);
        return response()->json(['status'=>true,'value'=>$request->checked_value]);

    }


    public function updateGridRequired(Request $request){
        $this->validate($request,['docketFieldId'=>'required|int','id'=>'required|int','value'=>'required|int']);
        DocketFieldGrid::where('id',$request->id)->where('docket_field_id',$request->docketFieldId)->update(['required'=>$request->value]);
    }

    public function showDefaultFolder(Request $request){
        $defaultId = $request->defaultValue;
        $fieldId = $request->fieldId;
        $folderData= Folder::where('company_id', Session::get('company_id'))->where('type',0)->get();
        $treeArray = array();
        foreach ($folderData as $test) {
            $treeArray[] = array(
                'id' => $test->id,
                'parent_id' => $test->root_id,
                'name' => $test->name,
                'slug' => $test->slug,
            );
        }
        $txtTree[0]="";
        foreach($treeArray as $branch){
            if(isset($txtTree[$branch['parent_id']])) {
                $txtTree[$branch['id']] = $txtTree[$branch['parent_id']] . $branch['slug'] . "/";
            }
        }

        $datas = array();
        if(@$txtTree){
            foreach ($txtTree as $key => $value){
                if($key != 0) {
                    $datas[] = array(
                        "id"=> $key,
                        "value"=>rtrim($value,'/'),
                        "space" =>str_repeat('&nbsp;', count(explode('/',$value))-2),
                        'name'=> array_slice(explode('/',$value), -2, 1)
                    );


                }
            }
        }

        $data= (new Collection($datas))->sortBy('value');
        return view('dashboard.company.docketManager.defaultFolderView',compact('data','defaultId','fieldId'));
    }

    public function updateDefaultFolder(Request $request){
        $this->validate($request,['fieldId'=>'required|int','defaultValue'=>'required|int']);
        DocketField::where('id',$request->fieldId)->update(['folder_default_id'=>$request->defaultValue]);
        return response()->json(['status'=>true,'value'=>$request->defaultValue]);
    }

    public function linkPrefillerFilterView(Request $request){
        $viewStatus = $request->viewStatus;
        $this->validate($request,['value'=>'required','ids'=>'required|int','linkprefillerfilterid'=>'required|int']);

        if($request->value == "0"){
            $suggestionValue = [];
            if($request->linkprefillerfilterid!= 0){
                LinkPrefillerFilter::where('id',$request->linkprefillerfilterid)->get()->first()->delete();
            }
        }else{
            if($request->linkprefillerfilterid == "0"){
                $linkPrefillerFilter = new LinkPrefillerFilter();
                $linkPrefillerFilter->docket_field_id = $request->ids;
                $linkPrefillerFilter->link_prefiller_filter_label = $request->value;
                $linkPrefillerFilter->link_prefiller_filter_value = "";
                $linkPrefillerFilter->save();
            }else{
                LinkPrefillerFilter::where('id',$request->linkprefillerfilterid)->update(['link_prefiller_filter_label'=>$request->value,'link_prefiller_filter_value'=>""]);

            }
            $suggestionValue = [];
//            $ecoPrefiller = PrefillerEcowise::where('id',$request->linkId)->get()->first();
//            $value = json_decode($ecoPrefiller->data,true)[$request->value];
//            $result= array();
//            foreach ($value as $data){
//
//                if($data != []){
//                    $result[] = $data;
//                }
//
//            }
//            $suggestionValue = array_unique($result);
//            DocketField::where('id',$request->ids)->update(['link_prefiller_filter_label'=>$request->value,'link_prefiller_filter_value'=>""]);
        }
        $docketField = DocketField::where('id',$request->ids)->get()->first();
        $keyValue = array();
        if($docketField->prefillerEcowise != null){
            foreach (json_decode($docketField->prefillerEcowise->data, true) as $key=> $value){
                $keyValue [] = $key;
            }
        }
        return view('dashboard/company/docketManager/prefillerEcowise/filter',compact('suggestionValue','docketField','keyValue','viewStatus'));
    }
    public function updateLinkPrefillerValue(Request $request){
        $this->validate($request,['value'=>'required','docketFieldId'=>'required|int','linkprefillerfilterid'=>'required|int']);
        if($request->value == "0") {
            LinkPrefillerFilter::where('id',$request->linkprefillerfilterid)->update(['link_prefiller_filter_value' => ""]);
        }else{
            LinkPrefillerFilter::where('id',$request->linkprefillerfilterid)->update(['link_prefiller_filter_value' => $request->value]);
//            DocketField::where('id', $request->docketFieldId)->update(['link_prefiller_filter_value' => $request->value]);
        }
    }
    public function linkGridPrefillerFilterView(Request $request){

        $this->validate($request,['value'=>'required','fieldIds'=>'required|int','gridId'=>'required|int','linkId'=>'required|int','linkprefillerfilterid'=>'required|int']);
        $viewStatus = $request->viewStatus;
        $docketField = DocketField::where('id',$request->fieldIds)->first();
        $docketGridField = DocketFieldGrid::where('id',$request->gridId)->where('docket_field_id',$request->fieldIds)->get()->first();

        if($request->value == "0"){
            $suggestionValue = [];
            if($request->linkprefillerfilterid!= 0){
                LinkGridPrefillerFilter::where('id',$request->linkprefillerfilterid)->get()->first()->delete();
            }
        }else{


//            $ecoPrefiller = PrefillerEcowise::where('id',$docketGridField->echowise_id)->get()->first();
//            if($ecoPrefiller){
//
//                if($docketGridField->link_prefiller_filter_label){
//                    $value = json_decode($ecoPrefiller->data,true)[$docketGridField->link_prefiller_filter_label];
//                    $result= array();
//                        foreach ($value as $data){
//                            if($data != []){
//                                $result[] = $data;
//                            }
//                        }
//                    $suggestionValue = array_unique($result);
//                }else{
//                    $suggestionValue = [];
//                }
//
//            }else{
//                $suggestionValue = [];
//            }

            if($request->linkprefillerfilterid == "0"){
                $linkPrefillerFilter = new LinkGridPrefillerFilter();
                $linkPrefillerFilter->docket_field_grid_id = $request->gridId;
                $linkPrefillerFilter->link_prefiller_filter_label = $request->value;
                $linkPrefillerFilter->link_prefiller_filter_value = "";
                $linkPrefillerFilter->save();
            }else{
                LinkGridPrefillerFilter::where('id',$request->linkprefillerfilterid)->update(['link_prefiller_filter_label'=>$request->value,'link_prefiller_filter_value'=>""]);

            }




//            DocketFieldGrid::where('id',$request->gridId)->where('docket_field_id',$request->fieldIds)->update(['link_prefiller_filter_label'=>$request->value,'link_prefiller_filter_value'=>""]);


//            $ecoPrefiller = PrefillerEcowise::where('id',$request->linkId)->get()->first();
//            $value = json_decode($ecoPrefiller->data,true)[$request->value];
//            $result= array();
//            foreach ($value as $data){
//                if($data != []){
//                    $result[] = $data;
//                }
//            }
//            $suggestionValue = array_unique($result);
            $suggestionValue = [];
//            DocketFieldGrid::where('id',$request->gridId)->where('docket_field_id',$request->fieldIds)->update(['link_prefiller_filter_label'=>$request->value,'link_prefiller_filter_value'=>""]);
        }
//        $docketField = DocketFieldGrid::where('id',$request->gridId)->where('docket_field_id',$request->fieldIds)->get()->first();
        $keyValue = array();
//        if($docketField->prefillerEcowise != null){
//            foreach (json_decode($docketField->prefillerEcowise->data, true) as $key=> $value){
//                $keyValue [] = $key;
//            }
//        }

        if($docketGridField->prefillerEcowise != null){
            foreach (json_decode($docketGridField->prefillerEcowise->data, true) as $key=> $value){
                $keyValue [] = $key;
            }
        }

        return view('dashboard/company/docketManager/gridPrefiller/linkPrefillerFilter',compact('suggestionValue','docketGridField','docketField','keyValue','viewStatus'));

    }


    public function updateLinkGridPrefillerValue(Request $request){
        $this->validate($request,['value'=>'required','docketFieldId'=>'required|int','linkprefillerfilterid'=>'required|int']);
        $docketGridField = DocketFieldGrid::where('id',$request->docketFieldId)->get()->first();

//        if($request->value == "0") {
//            DocketFieldGrid::where('id', $request->docketFieldId)->update(['link_prefiller_filter_value' => ""]);
//        }else{
//            DocketFieldGrid::where('id', $request->docketFieldId)->update(['link_prefiller_filter_value' => $request->value]);
//        }

        if($request->value == "0"){
            LinkGridPrefillerFilter::where('id',$request->linkprefillerfilterid)->update(['link_prefiller_filter_value' => ""]);
        }else{


            $ecoPrefiller = PrefillerEcowise::where('id',$docketGridField->echowise_id)->get()->first();
//            if($ecoPrefiller){
//
//                if($docketGridField->link_prefiller_filter_label){
//                    $value = json_decode($ecoPrefiller->data,true)[$docketGridField->link_prefiller_filter_label];
//                    $result= array();
//                    foreach ($value as $data){
//                        if($data != []){
//                            $result[] = $data;
//                        }
//                    }
//                    $suggestionValue = array_unique($result);
//                }else{
//                    $suggestionValue = [];
//                }
//
//            }else{
                $suggestionValue = [];
//            }

            LinkGridPrefillerFilter::where('id',$request->linkprefillerfilterid)->update(['link_prefiller_filter_value'=>$request->value]);


        }
    }


    public function checkdefaultAutoFilledPrefiller(Request $request){
        $this->validate($request,['value'=>'required','docketGridFieldId'=>'required','docket_id'=>'required','checked'=>'required']);
        if($request->checked == 1){
            DocketFieldGrid::where('id',$request->docketGridFieldId)->update(['default_auto_fill_prefiller'=>$request->value]);
            return response()->json(array("status" => true));
        }else{
            DocketFieldGrid::where('id',$request->docketGridFieldId)->update(['default_auto_fill_prefiller'=>0]);
            return response()->json(array("status" => true));
        }


    }

    public function updateDocketIdLabel(Request $request){
        $this->validate($request,['pk'   => 'required', 'value' =>  'required']);
        Docket::where('id',$request->pk)->update(['docket_id_label'  => $request->value]);
    }


    public  function companyDocketViewDocketDraft($key){
        $docketDraftDb = DocketDraft::where([['id',$key]])->first();
        return view('dashboard.company.docketManager.dockets.draft.view', compact('docketDraftDb'));
    }

    public function gridDynamicFilterField(Request $request){
        $this->validate($request,['docketGridFieldId'=>'required|int']);
        $docketGridField = DocketFieldGrid::where('id',$request->docketGridFieldId)->get()->first();
        $docketField = DocketField::where('id',$docketGridField->docket_field_id)->get()->first();
        $keyValue = array();
        if($docketGridField->prefillerEcowise != null){
            foreach (json_decode($docketGridField->prefillerEcowise->data, true) as $key=> $value){
                $keyValue [] = $key;
            }
        }
        return view('dashboard.company.docketManager.prefillerEcowise.dynamicFilterView',compact('keyValue','docketGridField','docketField'));
    }


    public function removeGridDynamicFilterField(Request $request){
        $this->validate($request,['linkprefillerfilter'=>'required|int']);
        $linkPrefillerFilters = LinkGridPrefillerFilter::where('id', $request->linkprefillerfilter)->get()->first();
        $linkPrefillerFilters->delete();
        return response()->json(array("status" => true));
    }


    public function dynamicFilterField(Request $request){
        $this->validate($request,['docketFieldId'=>'required|int']);
        $docketField = DocketField::where('id',$request->docketFieldId)->get()->first();
        $keyValue = array();
        if($docketField->prefillerEcowise != null){
            foreach (json_decode($docketField->prefillerEcowise->data, true) as $key=> $value){
                $keyValue [] = $key;
            }
        }
        return view('dashboard.company.docketManager.prefillerEcowise.dynamicNormalFilterView',compact('keyValue','docketField'));
    }


    public function removeDynamicFilterField(Request $request){
        $this->validate($request,['linkprefillerfilter'=>'required|int']);
        if($request->linkprefillerfilter!= 0) {
            $linkPrefillerFilters = LinkPrefillerFilter::where('id', $request->linkprefillerfilter)->get()->first();
            $linkPrefillerFilters->delete();
        }
        return response()->json(array("status" => true));
    }



    public function updateGridPreview(Request $request){
        $this->validate($request,['docketFiledId'=>'required|int','id'=>'required|int', 'value'=>'required|int']);
        $docketgridField = DocketFieldGrid::where('docket_field_id',$request->docketFiledId)->where('preview_value',1)->get()->first();
         if($request->value == 0){
               DocketFieldGrid::where('id',$request->id)->update(["preview_value"=>$request->value]);
               return response()->json(array('status'=>true));
         }else{
             if(@$docketgridField){
                 return response()->json(array("status"=>false,'message'=>'Already Selected in '.$docketgridField->label.' Field'));
             }else{
                 DocketFieldGrid::where('id',$request->id)->update(["preview_value"=>$request->value]);
                 return response()->json(array('status'=>true));

             }
         }

    }



    public function updateGridPdfName(Request $request){
        $this->validate($request,['docketFiledId'=>'required|int','id'=>'required|int', 'value'=>'required|int']);
        $docketgridField = DocketFieldGrid::where('docket_field_id',$request->docketFiledId)->where('pdf_name_by_value',1)->get()->first();
        if($request->value == 0){
            DocketFieldGrid::where('id',$request->id)->update(["pdf_name_by_value"=>$request->value]);
            return response()->json(array('status'=>true));
        }else{
            if(@$docketgridField){
                return response()->json(array("status"=>false,'message'=>'Already Selected in '.$docketgridField->label.' Field'));
            }else{
                DocketFieldGrid::where('id',$request->id)->update(["pdf_name_by_value"=>$request->value]);
                return response()->json(array('status'=>true));

            }
        }


    }


    public function v2StoreAssignDocket(AssignTaskRequest $request){
        try{
            DB::beginTransaction();
            $assignDocket = new AssignDocketUser();
            $assignDocket->name = $request->name;
            $assignDocket->assigned_by = auth()->user()->id;
            $assignDocket->from_date = Carbon::parse($request->start_date)->toDateTimeString();
            $assignDocket->to_date = Carbon::parse($request->end_date)->toDateTimeString();
            $assignDocket->bgcolor = $request->bgcolor;
            $assignDocket->comment = ($request->has('comment')) ? $request->comment : '';
            $assignDocket->save();

            if($request->has('docketTemplate')){
                foreach($request->docketTemplate as $docketTemplateId){
                    if($request->has('machineList')){
                        foreach($request->machineList as $machineId){
                            $checkDate = $this->machineDateValidation($request,$machineId);
                            if($checkDate){
                                DB::rollback();
                                return response()->json(['status' => false,'error' => $this->machineErrorMessage($checkDate) ,'value' => $machineId,'type' => "machine"]);
                            }
                            $checkLeave = $this->machineLeaveValidation($request,$machineId);
                            if($checkLeave){
                                DB::rollback();
                                return response()->json(['status' => false,'error' => $this->machineLeaveErrorMessage($checkLeave) ,'value' => $machineId,'type' => "machine" ]);
                            }
                            $assignDocketUserConnection = new AssignDocketUserConnection();
                            $assignDocketUserConnection->assign_docket_id = $assignDocket->id;
                            $assignDocketUserConnection->machine_id = $machineId;
                            $assignDocketUserConnection->docket_id = $docketTemplateId;
                            $assignDocketUserConnection->save();
                        }
                    }
                    if($request->has('employeeList')){
                        foreach($request->employeeList as $employeeId){
                            $checkDate = $this->employeeDateValidation($request,$employeeId);
                            if($checkDate){
                                DB::rollback();
                                return response()->json(['status' => false,'error' => $this->employeeErrorMessage($checkDate) ,'value' => $employeeId,'type' => "employee" ]);
                            }
                            $checkLeave = $this->employeeLeaveValidation($request,$employeeId);
                            if($checkLeave){
                                DB::rollback();
                                return response()->json(['status' => false,'error' => $this->employeeLeaveErrorMessage($checkLeave) ,'value' => $employeeId ,'type' => "employee"]);
                            }
                            $assignDocketUserConnection = new AssignDocketUserConnection();
                            $assignDocketUserConnection->assign_docket_id = $assignDocket->id;
                            $assignDocketUserConnection->user_id = $employeeId;
                            $assignDocketUserConnection->docket_id = $docketTemplateId;
                            $assignDocketUserConnection->save();
                        }
                    }
                }
            }else{
                if($request->has('machineList')){
                    foreach($request->machineList as $machineId){
                        $checkDate = $this->machineDateValidation($request,$machineId);
                        if($checkDate){
                            DB::rollback();
                            return response()->json(['status' => false,'error' => $this->machineErrorMessage($checkDate) ,'value' => $machineId ,'type' => "machine"]);
                        }
                        $checkLeave = $this->machineLeaveValidation($request,$machineId);
                        if($checkLeave){
                            DB::rollback();
                            return response()->json(['status' => false,'error' => $this->machineLeaveErrorMessage($checkLeave) ,'value' => $machineId ,'type' => "machine"]);
                        }
                        $assignDocketUserConnection = new AssignDocketUserConnection();
                        $assignDocketUserConnection->assign_docket_id = $assignDocket->id;
                        $assignDocketUserConnection->machine_id = $machineId;
                        $assignDocketUserConnection->save();
                    }
                }
                if($request->has('employeeList')){
                    foreach($request->employeeList as $employeeId){
                        $checkDate = $this->employeeDateValidation($request,$employeeId);
                        if($checkDate){
                            DB::rollback();
                            return response()->json(['status' => false,'error' => $this->employeeErrorMessage($checkDate) ,'value' => $employeeId,'type' => "employee" ]);
                        }
                        $checkLeave = $this->employeeLeaveValidation($request,$employeeId);
                        if($checkLeave){
                            DB::rollback();
                            return response()->json(['status' => false,'error' => $this->employeeLeaveErrorMessage($checkLeave) ,'value' => $employeeId ,'type' => "employee"]);
                        }
                        $assignDocketUserConnection = new AssignDocketUserConnection();
                        $assignDocketUserConnection->assign_docket_id = $assignDocket->id;
                        $assignDocketUserConnection->user_id = $employeeId;
                        $assignDocketUserConnection->save();
                    }
                }
            }
            DB::commit();
            $machineDetail = [];
            $userDetail = [];
            foreach($assignDocket->assignDocketUserConnection as $dataValue){
                if($dataValue->machine){
                    $tempMachine['name'] =  $dataValue->machine->name;
                    $tempMachine['image'] =  $dataValue->machine->image;
                    array_push($machineDetail,$tempMachine);
                }
                if($dataValue->user){
                    $tempUser['name'] =  $dataValue->user->first_name . ' ' . $dataValue->user->last_name;
                    $tempUser['image'] =  $dataValue->user->image;
                    array_push($userDetail,$tempUser);
                }
            }
            $machineDetail = array_map("unserialize", array_unique(array_map("serialize", $machineDetail)));
            $userDetail = array_map("unserialize", array_unique(array_map("serialize", $userDetail)));
            return response()->json(['status' => true ,'assign_docket_id' => $assignDocket->id,'machineDetail' => $machineDetail, 'userDetail' => $userDetail]);
        }catch(\Exception $ex){
            DB::rollback(); 
            return response()->json(['status' => false,'error' => 'error']);
        }
    }

    public function v2UpdateAssignDocket(AssignTaskRequest $request){
        try{
            DB::beginTransaction();
            $assignDocket = AssignDocketUser::find($request->id);
            $oldAssignDocket = $assignDocket->toArray();
            $assignDocket->name = $request->name;
            $assignDocket->assigned_by = auth()->user()->id;
            $assignDocket->from_date = Carbon::parse($request->start_date)->toDateTimeString();
            $assignDocket->to_date = Carbon::parse($request->end_date)->toDateTimeString();
            $assignDocket->bgcolor = $request->bgcolor;
            $assignDocket->comment = ($request->has('comment')) ? $request->comment : '';
            $assignDocket->save();

            AssignDocketUserConnection::where('assign_docket_id',$assignDocket->id)->delete();

            if($request->has('docketTemplate')){
                foreach($request->docketTemplate as $docketTemplateId){
                    $checkDocketDraftAssign = DocketDraftsAssign::where([['assign_docket_user_id',$assignDocket->id],['docket_id',$docketTemplateId]])->first();
                    if($checkDocketDraftAssign != null){
                        DocketDraftsAssign::where([['assign_docket_user_id',$assignDocket->id],['docket_id',$docketTemplateId]])->delete();
                    }
                    if($request->has('machineList')){
                        foreach($request->machineList as $machineId){
                            $checkDate = $this->machineDateValidation($request,$machineId,$assignDocket->id);
                            if($checkDate){
                                DB::rollback();
                                return response()->json(['status' => false,'error' => $this->machineErrorMessage($checkDate),'data'=>$oldAssignDocket ,'value' => $machineId,'type' => "machine" ]);
                            }
                            $checkLeave = $this->machineLeaveValidation($request,$machineId);
                            if($checkLeave){
                                DB::rollback();
                                return response()->json(['status' => false,'error' => $this->machineLeaveErrorMessage($checkLeave) ,'data'=>$oldAssignDocket ,'value' => $machineId,'type' => "machine" ]);
                            }
                            $assignDocketUserConnection = new AssignDocketUserConnection();
                            $assignDocketUserConnection->assign_docket_id = $assignDocket->id;
                            $assignDocketUserConnection->machine_id = $machineId;
                            $assignDocketUserConnection->docket_id = $docketTemplateId;
                            $assignDocketUserConnection->save();

                            if($checkDocketDraftAssign != null){
                                $docketDraftsAssign = new DocketDraftsAssign();
                                $docketDraftsAssign->assign_docket_user_id = $assignDocket->id;
                                $docketDraftsAssign->docket_id = $docketTemplateId;
                                $docketDraftsAssign->docket_draft_id = $checkDocketDraftAssign->docket_draft_id;
                                $docketDraftsAssign->machine_id = $machineId;
                                $docketDraftsAssign->save();
                            }
                        }
                    }
                    if($request->has('employeeList')){
                        foreach($request->employeeList as $employeeId){
                            $checkDate = $this->employeeDateValidation($request,$employeeId,$assignDocket->id);
                            if($checkDate){
                                DB::rollback();
                                return response()->json(['status' => false,'error' => $this->employeeErrorMessage($checkDate) ,'data'=>$oldAssignDocket ,'value' => $employeeId,'type' => "employee" ]);
                            }
                            $checkLeave = $this->employeeLeaveValidation($request,$employeeId);
                            if($checkLeave){
                                DB::rollback();
                                return response()->json(['status' => false,'error' => $this->employeeLeaveErrorMessage($checkLeave),'data'=>$oldAssignDocket ,'value' => $employeeId,'type' => "employee" ]);
                            }
                            $assignDocketUserConnection = new AssignDocketUserConnection();
                            $assignDocketUserConnection->assign_docket_id = $assignDocket->id;
                            $assignDocketUserConnection->user_id = $employeeId;
                            $assignDocketUserConnection->docket_id = $docketTemplateId;
                            $assignDocketUserConnection->save();

                            if($checkDocketDraftAssign != null){
                                $docketDraftsAssign = new DocketDraftsAssign();
                                $docketDraftsAssign->assign_docket_user_id = $assignDocket->id;
                                $docketDraftsAssign->docket_id = $docketTemplateId;
                                $docketDraftsAssign->docket_draft_id = $checkDocketDraftAssign->docket_draft_id;
                                $docketDraftsAssign->user_id = $employeeId;
                                $docketDraftsAssign->save();
                            }
                        }
                    }
                }
            }else{
                if($request->has('machineList')){
                    foreach($request->machineList as $machineId){
                        $checkDate = $this->machineDateValidation($request,$machineId,$assignDocket->id);
                        if($checkDate){
                            DB::rollback();
                            return response()->json(['status' => false,'error' => $this->machineErrorMessage($checkDate),'data'=>$oldAssignDocket  ,'value' => $machineId,'type' => "machine" ]);
                        }
                        $checkLeave = $this->machineLeaveValidation($request,$machineId);
                        if($checkLeave){
                            DB::rollback();
                            return response()->json(['status' => false,'error' => $this->machineLeaveErrorMessage($checkLeave),'data'=>$oldAssignDocket ,'value' => $machineId,'type' => "machine"  ]);
                        }
                        $assignDocketUserConnection = new AssignDocketUserConnection();
                        $assignDocketUserConnection->assign_docket_id = $assignDocket->id;
                        $assignDocketUserConnection->machine_id = $machineId;
                        $assignDocketUserConnection->save();
                    }
                }
                if($request->has('employeeList')){
                    foreach($request->employeeList as $employeeId){
                        $checkDate = $this->employeeDateValidation($request,$employeeId,$assignDocket->id);
                        if($checkDate){
                            DB::rollback();
                            return response()->json(['status' => false,'error' => $this->employeeErrorMessage($checkDate),'data'=>$oldAssignDocket ,'value' => $employeeId,'type' => "employee"  ]);
                        }
                        $checkLeave = $this->employeeLeaveValidation($request,$employeeId);
                        if($checkLeave){
                            DB::rollback();
                            return response()->json(['status' => false,'error' => $this->employeeLeaveErrorMessage($checkLeave),'data'=>$oldAssignDocket ,'value' => $employeeId,'type' => "employee"  ]);
                        }
                        $assignDocketUserConnection = new AssignDocketUserConnection();
                        $assignDocketUserConnection->assign_docket_id = $assignDocket->id;
                        $assignDocketUserConnection->user_id = $employeeId;
                        $assignDocketUserConnection->save();
                    }
                }
            }
            DB::commit();
            $machineDetail = [];
            $userDetail = [];
            foreach($assignDocket->assignDocketUserConnection as $dataValue){
                if($dataValue->machine){
                    $tempMachine['name'] =  $dataValue->machine->name;
                    $tempMachine['image'] =  $dataValue->machine->image;
                    array_push($machineDetail,$tempMachine);
                }
                if($dataValue->user){
                    $tempUser['name'] =  $dataValue->user->first_name . ' ' . $dataValue->user->last_name;
                    $tempUser['image'] =  $dataValue->user->image;
                    array_push($userDetail,$tempUser);
                }
            }
            $machineDetail = array_map("unserialize", array_unique(array_map("serialize", $machineDetail)));
            $userDetail = array_map("unserialize", array_unique(array_map("serialize", $userDetail)));
            return response()->json(['status' => true,'machineDetail' => $machineDetail, 'userDetail' => $userDetail]);
        }catch(\Exception $ex){
            DB::rollback();
            return response()->json(['status' => false,'error' => 'error','data'=>$oldAssignDocket]);
        }
    }

    public function v2DeleteAssignDocket(Request $request){
        try{
            DB::beginTransaction();

            AssignDocketUserConnection::where('assign_docket_id',$request->id)->delete();
            DocketDraftsAssign::where('assign_docket_user_id',$request->id)->delete();
            AssignDocketUser::where('id',$request->id)->delete();

            DB::commit();
            return response()->json(['status' => true]);
        }catch(\Exception $ex){
            DB::rollback();
            return response()->json(['status' => false]);
        }
    }

    public function v2StoreAssignDocketDayView($date){
        try{
            $employeesQuery   =   Employee::where('company_id',Session::get('company_id'))->get();
            $companyAdmin   =    Company::where('id',Session::get('company_id'))->first();
            $employees[]  = array('id'    =>  $companyAdmin->user_id, 'name'  =>  $companyAdmin->userInfo->first_name. " ".$companyAdmin->userInfo->last_name);
            foreach ($employeesQuery as $row) {
                if(@$row->userInfo->isActive == 1) {
                    $employees[] = array( 'id' => $row->user_id, 'name' => $row->userInfo->first_name . " " . $row->userInfo->last_name, 'image' => $row->userInfo->image);
                }
            }

            $machineDatas = Machine::where([['company_id',auth()->user()->companyInfo->id]])->get();

            $assignDocketUsers = AssignDocketUser::where([[DB::raw('DATE_FORMAT(from_date,"%Y-%m-%d")'), "<=",Carbon::parse($date)->format('Y-m-d')],
                            [DB::raw('DATE_FORMAT(to_date,"%Y-%m-%d")'), ">=",Carbon::parse($date)->format('Y-m-d')]])
                    ->with('assignDocketUserConnection.machine','assignDocketUserConnection.user')->get();
            $machines = [];
            $users = [];
            foreach ($assignDocketUsers as $key => $assignDocketUser) {
                foreach ($assignDocketUser->assignDocketUserConnection as $key => $assign_docket_user_connection) {
                    $totalDuration = Carbon::parse($assignDocketUser->from_date)->diffInMinutes(Carbon::parse($assignDocketUser->to_date));
                    if($assign_docket_user_connection->machine){
                        array_push($machines,[
                            'id' => $assign_docket_user_connection->machine->id,
                            'name' => $assign_docket_user_connection->machine->name,
                            'image' => $assign_docket_user_connection->machine->image,
                            'minutes' => $totalDuration
                        ]);
                    }
                    if($assign_docket_user_connection->user){
                        array_push($users,[
                            'id' => $assign_docket_user_connection->user->id,
                            'name' => $assign_docket_user_connection->user->first_name . ' ' . $assign_docket_user_connection->user->last_name,
                            'image' => $assign_docket_user_connection->user->image,
                            'minutes' => $totalDuration
                        ]);
                    }
                }
            }

            $machinesResult = FunctionUtils::unique_multidim_array_sum($machines,'id','minutes');
            $userResult = FunctionUtils::unique_multidim_array_sum($users,'id','minutes');

            foreach ($employees as $key => $employee) {
                $exist = false;
                foreach ($userResult as $key => $value) {
                    if($employee['id'] == $value['id']){
                        $exist = true;
                    }
                }
                if(!$exist){
                    $temp = [];
                    $temp['id'] = $employee['id'];
                    $temp['name'] = $employee['name'];
                    $temp['image'] = (isset($employee['image'])) ? $employee['image'] : '';
                    $temp['minutes'] = 0;
                    array_push($userResult,$temp);
                }
            }

            foreach ($machineDatas as $key => $machine) {
                $exist = false;
                foreach ($machinesResult as $key => $value) {
                    if($machine['id'] == $value['id']){
                        $exist = true;
                    }
                }
                if(!$exist){
                    $temp = [];
                    $temp['id'] = $machine['id'];
                    $temp['name'] = $machine['name'];
                    $temp['image'] = (isset($machine['image'])) ? $machine['image'] : '';
                    $temp['minutes'] = 0;
                    array_push($machinesResult,$temp);
                }
            }

            return response()->json(['status' => true, 'machinesResult' => $machinesResult, 'userResult' => $userResult,'totalHourperDay' => 8]);
        }catch(\Exception $ex){
            DB::rollback();
            return response()->json(['status' => false]);
        }
    }

    function machineDateValidation($request,$machineId,$assignDocketId=null){
        $data = AssignDocketUserConnection::where([['assign_docket_user_connection.machine_id',$machineId]])
                ->when($assignDocketId != null, function($query) use($assignDocketId) {
                    return $query->where('assign_docket_id','!=',$assignDocketId);
                })
                ->join('assign_docket_user','assign_docket_user.id','assign_docket_user_connection.assign_docket_id')
                ->groupBy('assign_docket_user_connection.assign_docket_id')
                ->where([[DB::raw('DATE_FORMAT(assign_docket_user.from_date,"%Y-%m-%d %H:%i")'), "<=",Carbon::parse($request->start_date)],
                        [DB::raw('DATE_FORMAT(assign_docket_user.to_date,"%Y-%m-%d %H:%i")'), ">=",Carbon::parse($request->start_date)]])
                ->with('machine')->first();
        if($data == null){
            $data = AssignDocketUserConnection::where([['assign_docket_user_connection.machine_id',$machineId]])
                    ->when($assignDocketId != null, function($query) use($assignDocketId) {
                        return $query->where('assign_docket_id','!=',$assignDocketId);
                    })
                    ->join('assign_docket_user','assign_docket_user.id','assign_docket_user_connection.assign_docket_id')
                    ->groupBy('assign_docket_user_connection.assign_docket_id')
                    ->where([[DB::raw('DATE_FORMAT(assign_docket_user.from_date,"%Y-%m-%d %H:%i")'), "<=",Carbon::parse($request->end_date)],
                            [DB::raw('DATE_FORMAT(assign_docket_user.to_date,"%Y-%m-%d %H:%i")'), ">=",Carbon::parse($request->end_date)]])
                ->with('machine')->first();
        }
        return $data;
    }

    function machineErrorMessage($checkDate){
        return "Conflict! ". $checkDate->machine['name'] ." has already been assigned a task at 
                ". Carbon::parse($checkDate->from_date)->format('Y-m-d h:i A') ." to ". Carbon::parse($checkDate->to_date)->format('Y-m-d h:i A');
        // return  $checkDate->machine['name']. ' machine already have a task from '
        //         .Carbon::parse($checkDate->from_date)->format('Y-m-d h:i A').' to ' . Carbon::parse($checkDate->to_date)->format('Y-m-d h:i A');
    }

    function employeeDateValidation($request,$employeeId,$assignDocketId=null){
        $data = AssignDocketUserConnection::where([['assign_docket_user_connection.user_id',$employeeId]])
                ->when($assignDocketId != null, function($query) use($assignDocketId) {
                    return $query->where('assign_docket_id','!=',$assignDocketId);
                })
                ->join('assign_docket_user','assign_docket_user.id','assign_docket_user_connection.assign_docket_id')
                ->groupBy('assign_docket_user_connection.assign_docket_id')
                ->where([[DB::raw('DATE_FORMAT(assign_docket_user.from_date,"%Y-%m-%d %H:%i")'), "<=",Carbon::parse($request->start_date)],
                        [DB::raw('DATE_FORMAT(assign_docket_user.to_date,"%Y-%m-%d %H:%i")'), ">=",Carbon::parse($request->start_date)]])
                ->with('user')->first();
        if($data == null){
            $data = AssignDocketUserConnection::where([['assign_docket_user_connection.user_id',$employeeId]])
                    ->when($assignDocketId != null, function($query) use($assignDocketId) {
                        return $query->where('assign_docket_id','!=',$assignDocketId);
                    })
                    ->join('assign_docket_user','assign_docket_user.id','assign_docket_user_connection.assign_docket_id')
                    ->groupBy('assign_docket_user_connection.assign_docket_id')
                    ->where([[DB::raw('DATE_FORMAT(assign_docket_user.from_date,"%Y-%m-%d %H:%i")'), "<=",Carbon::parse($request->end_date)],
                            [DB::raw('DATE_FORMAT(assign_docket_user.to_date,"%Y-%m-%d %H:%i")'), ">=",Carbon::parse($request->end_date)]])
                    ->with('user')->first();
        }
        return $data;
    }

    function employeeErrorMessage($checkDate){
        return "Conflict! ". $checkDate->user['first_name']. ' ' . $checkDate->user['last_name'] ." has already been assigned a task at 
                ". Carbon::parse($checkDate->from_date)->format('Y-m-d h:i A') ." to ". Carbon::parse($checkDate->to_date)->format('Y-m-d h:i A');
        // return $checkDate->user['first_name']. ' ' . $checkDate->user['last_name'] . ' employee already have a task from '
        //      .Carbon::parse($checkDate->from_date)->format('Y-m-d h:i A').' to ' . Carbon::parse($checkDate->to_date)->format('Y-m-d h:i A');
    }

    public function machineLeaveValidation($request,$machineId){
        $data = EmployeeLeave::where([['machine_id',$machineId],[DB::raw('DATE_FORMAT(from_date,"%Y-%m-%d")'), "<=",Carbon::parse($request->start_date)->format('Y-m-d')],
                            [DB::raw('DATE_FORMAT(to_date,"%Y-%m-%d")'), ">=",Carbon::parse($request->start_date)->format('Y-m-d')]])->with('machine')->first();
       
        if($data == null){
            $data = EmployeeLeave::where([['machine_id',$machineId],[DB::raw('DATE_FORMAT(from_date,"%Y-%m-%d")'), "<=",Carbon::parse($request->end_date)->format('Y-m-d')],
                            [DB::raw('DATE_FORMAT(to_date,"%Y-%m-%d")'), ">=",Carbon::parse($request->end_date)->format('Y-m-d')]])->with('machine')->first();
        }
        return $data;
    }

    function machineLeaveErrorMessage($checkleave){
        return $checkleave->machine['name'] . ' machine is on leave from ' .$checkleave->from_date.' to ' . $checkleave->to_date;
    }

    public function employeeLeaveValidation($request,$employeeId){
        $data = EmployeeLeave::where([['user_id',$employeeId],[DB::raw('DATE_FORMAT(from_date,"%Y-%m-%d")'), "<=",Carbon::parse($request->start_date)->format('Y-m-d')],
                            [DB::raw('DATE_FORMAT(to_date,"%Y-%m-%d")'), ">=",Carbon::parse($request->start_date)->format('Y-m-d')]])->with('userInfo')->first();
       
        if($data == null){
            $data = EmployeeLeave::where([['user_id',$employeeId],[DB::raw('DATE_FORMAT(from_date,"%Y-%m-%d")'), "<=",Carbon::parse($request->end_date)->format('Y-m-d')],
                            [DB::raw('DATE_FORMAT(to_date,"%Y-%m-%d")'), ">=",Carbon::parse($request->end_date)->format('Y-m-d')]])->with('userInfo')->first();
        }
        return $data;
    }

    function employeeLeaveErrorMessage($checkleave){
        return $checkleave->userInfo['first_name']. ' ' . $checkleave->userInfo['last_name'] . ' employee is on leave from ' .$checkleave->from_date.' to ' . $checkleave->to_date;
    }
}
